[{"D:\\Project\\react\\src\\index.js":"1","D:\\Project\\react\\src\\Store\\Store.js":"2","D:\\Project\\react\\src\\App.js":"3","D:\\Project\\react\\src\\Login.js":"4","D:\\Project\\react\\src\\Home.js":"5","D:\\Project\\react\\src\\Cookies.js":"6","D:\\Project\\react\\src\\Method\\Store.js":"7","D:\\Project\\react\\src\\Program\\WindowFrame.js":"8","D:\\Project\\react\\src\\Component\\Control\\ExplainInput.js":"9","D:\\Project\\react\\src\\Component\\Control\\Button.js":"10","D:\\Project\\react\\src\\db\\Mysql\\Mysql.js":"11","D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuMain.js":"12","D:\\Project\\react\\src\\Component\\Menu\\tabMenu\\TabList.js":"13","D:\\Project\\react\\src\\db\\Mysql\\MysqlServer.js":"14","D:\\Project\\react\\src\\Method\\Comm.js":"15","D:\\Project\\react\\src\\Method\\Grid.js":"16","D:\\Project\\react\\src\\Program\\MES\\PgmTest.js":"17","D:\\Project\\react\\src\\JSON\\jsonControl.js":"18","D:\\Project\\react\\src\\Program\\MES\\Chart\\PgmTest2.js":"19","D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainView.js":"20","D:\\Project\\react\\src\\Program\\MES\\Menu.js":"21","D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainList.js":"22","D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuTitle.js":"23","D:\\Project\\react\\src\\Component\\Menu\\tabMenu\\TabListItem.js":"24","D:\\Project\\react\\src\\Component\\Control\\DetailDiv.js":"25","D:\\Project\\react\\src\\Component\\Control\\SearchDiv.js":"26","D:\\Project\\react\\src\\Method\\Popup.js":"27","D:\\Project\\react\\src\\Method\\Component.js":"28","D:\\Project\\react\\src\\Component\\Control\\Input.js":"29","D:\\Project\\react\\src\\Component\\Control\\Combobox.js":"30","D:\\Project\\react\\src\\Component\\Control\\DateTime.js":"31","D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart1.js":"32","D:\\Project\\react\\src\\Component\\Control\\Number.js":"33","D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart2.js":"34","D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart3.js":"35","D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetail.js":"36","D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart4.js":"37","D:\\Project\\react\\src\\Component\\Grid\\Column\\Number.js":"38","D:\\Project\\react\\src\\Component\\Grid\\Column\\Input.js":"39","D:\\Project\\react\\src\\Component\\Grid\\Grid.js":"40","D:\\Project\\react\\src\\Component\\Layout\\Layout.js":"41","D:\\Project\\react\\src\\Component\\Grid\\Column\\DateTime.js":"42","D:\\Project\\react\\src\\Component\\Grid\\Column\\Combobox.js":"43","D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetailComponent.js":"44","D:\\Project\\react\\src\\Component\\Popup\\PopupFrame.js":"45","D:\\Project\\react\\src\\Program\\POPUP\\PopupTest.js":"46","D:\\Project\\01.YK\\react\\src\\index.js":"47","D:\\Project\\01.YK\\react\\src\\Store\\Store.js":"48","D:\\Project\\01.YK\\react\\src\\App.js":"49","D:\\Project\\01.YK\\react\\src\\Home.js":"50","D:\\Project\\01.YK\\react\\src\\Login.js":"51","D:\\Project\\01.YK\\react\\src\\Cookies.js":"52","D:\\Project\\01.YK\\react\\src\\Program\\WindowFrame.js":"53","D:\\Project\\01.YK\\react\\src\\WebReq\\WebReq.js":"54","D:\\Project\\01.YK\\react\\src\\Method\\Store.js":"55","D:\\Project\\01.YK\\react\\src\\Method\\Component.js":"56","D:\\Project\\01.YK\\react\\src\\Component\\Control\\Input.js":"57","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\tabMenu\\TabList.js":"58","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuMain.js":"59","D:\\Project\\01.YK\\react\\src\\db\\Mysql\\Mysql.js":"60","D:\\Project\\01.YK\\react\\src\\db\\Mysql\\MysqlServer.js":"61","D:\\Project\\01.YK\\react\\src\\JSON\\jsonControl.js":"62","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\tabMenu\\TabListItem.js":"63","D:\\Project\\01.YK\\react\\src\\Method\\Comm.js":"64","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainView.js":"65","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainList.js":"66","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuTitle.js":"67","D:\\Project\\01.YK\\react\\src\\Method\\Grid.js":"68","D:\\Project\\01.YK\\react\\src\\Component\\Control\\Combobox.js":"69","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Image.js":"70","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Input.js":"71","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Combobox.js":"72","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Grid.js":"73","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\TextArea.js":"74","D:\\Project\\01.YK\\react\\src\\Component\\Control\\DetailDiv.js":"75","D:\\Project\\01.YK\\react\\src\\Component\\Control\\SearchDiv.js":"76","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\DateTime.js":"77","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Number.js":"78","D:\\Project\\01.YK\\react\\src\\Method\\Popup.js":"79","D:\\Project\\01.YK\\react\\src\\Component\\Control\\DateTime.js":"80","D:\\Project\\01.YK\\react\\src\\Component\\Control\\Number.js":"81","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetail.js":"82","D:\\Project\\01.YK\\react\\src\\Component\\Layout\\Layout.js":"83","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetailComponent.js":"84","D:\\Project\\01.YK\\react\\src\\Component\\Popup\\PopupFrame.js":"85","D:\\Project\\01.YK\\react\\src\\Program\\POPUP\\PopupTest.js":"86","D:\\Project\\01.YK\\react\\src\\Component\\Control\\TextArea.js":"87","D:\\Project\\01.YK\\react\\src\\db\\Oracle\\Oracle.js":"88","D:\\Project\\01.YK\\react\\src\\db\\Oracle\\OracleServer.js":"89","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Checkbox.js":"90","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Detailspan.js":"91","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Mainspan.js":"92","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Botspan.js":"93","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\TabList.js":"94","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\CAMR_SETTING\\CAMR_SETTING.js":"95","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\Chit.js":"96","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\ChitMemo.js":"97","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\DISP_PROC\\CompleteBtn.js":"98","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\DISP_PROC\\TabList.js":"99","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\ENTR_PROC\\ENTR_PROC.js":"100","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\CompleteBtn.js":"101","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\DISP_PROC\\DISP_PROC.js":"102","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_HIST\\CompleteBtn.js":"103","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_HIST\\INSP_HIST.js":"104","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\DispImg.js":"105","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\DispInfo.js":"106","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\CompleteBtn.js":"107","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\Botspan.js":"108","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RecImage.js":"109","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RecTimer.js":"110","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\INSP_PROC.js":"111","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\SHIP_PROC\\CompleteBtn.js":"112","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\SHIP_PROC\\SHIP_PROC.js":"113","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\INSP_CFRM.js":"114","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\TabList.js":"115","D:\\Project\\01.YK\\react\\src\\Component\\Control\\Checkbox.js":"116","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\CompleteBtn.js":"117","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\RecImage.js":"118","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\RecImageDtl.js":"119","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\TabList.js":"120","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\INSP_CANC.js":"121","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RecImageDtl.js":"122","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\MENU\\Menu.js":"123","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\MENU\\MENU.js":"124","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\COMM\\COMM.js":"125","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RainInfo.js":"126","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\RecImage.js":"127","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\RecImageDtl.js":"128","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\AUTH\\AUTH.js":"129","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\USER\\USER.js":"130","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarUserName.js":"131","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\CompleteBtnModify.js":"132","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\CompleteBtnModify.js":"133","D:\\Project\\01.YK\\react\\src\\RtspFullScreen.js":"134","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\ChitMemo copy.js":"135","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Report\\DAILY_PROC.js":"136","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\ChitMemo copy 2.js":"137","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Report\\TabList.js":"138","D:\\Project\\01.YK\\react\\src\\Snapshot.js":"139","D:\\Project\\01.YK\\react\\src\\HLSViewer.js":"140","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\ENTR_WAIT\\ENTR_WAIT.js":"141","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\Chit copy.js":"142","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\Chit.js":"143","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\Chit.js":"144","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\DISP_PROC\\DISP_PROC copy.js":"145","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\CompleteBtn copy.js":"146","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Report\\Chit.js":"147"},{"size":280,"mtime":1623198507106,"results":"148","hashOfConfig":"149"},{"size":720,"mtime":1623198507098,"results":"150","hashOfConfig":"149"},{"size":423,"mtime":1623198506881,"results":"151","hashOfConfig":"149"},{"size":8922,"mtime":1624253274618,"results":"152","hashOfConfig":"149"},{"size":2339,"mtime":1623198789146,"results":"153","hashOfConfig":"149"},{"size":540,"mtime":1623198506986,"results":"154","hashOfConfig":"149"},{"size":23552,"mtime":1623287890068,"results":"155","hashOfConfig":"149"},{"size":8266,"mtime":1623287890068,"results":"156","hashOfConfig":"149"},{"size":2540,"mtime":1623198506898,"results":"157","hashOfConfig":"149"},{"size":2100,"mtime":1623198506882,"results":"158","hashOfConfig":"149"},{"size":6863,"mtime":1624253278354,"results":"159","hashOfConfig":"149"},{"size":4687,"mtime":1623198506975,"results":"160","hashOfConfig":"149"},{"size":3073,"mtime":1623287890068,"results":"161","hashOfConfig":"149"},{"size":1831,"mtime":1624251408048,"results":"162","hashOfConfig":"149"},{"size":3421,"mtime":1623198507062,"results":"163","hashOfConfig":"149"},{"size":2093,"mtime":1623287890068,"results":"164","hashOfConfig":"149"},{"size":18566,"mtime":1623894271533,"results":"165","hashOfConfig":"149"},{"size":1143,"mtime":1623198507057,"results":"166","hashOfConfig":"149"},{"size":6851,"mtime":1623198507076,"results":"167","hashOfConfig":"149"},{"size":1382,"mtime":1623198506974,"results":"168","hashOfConfig":"149"},{"size":24216,"mtime":1623894171987,"results":"169","hashOfConfig":"149"},{"size":1121,"mtime":1623198506969,"results":"170","hashOfConfig":"149"},{"size":474,"mtime":1623198506977,"results":"171","hashOfConfig":"149"},{"size":2132,"mtime":1623287890068,"results":"172","hashOfConfig":"149"},{"size":388,"mtime":1623198506891,"results":"173","hashOfConfig":"149"},{"size":255,"mtime":1623198506906,"results":"174","hashOfConfig":"149"},{"size":1224,"mtime":1623893479508,"results":"175","hashOfConfig":"149"},{"size":1819,"mtime":1623287890068,"results":"176","hashOfConfig":"149"},{"size":6965,"mtime":1623198506901,"results":"177","hashOfConfig":"149"},{"size":7293,"mtime":1623895218374,"results":"178","hashOfConfig":"149"},{"size":8663,"mtime":1623287890068,"results":"179","hashOfConfig":"149"},{"size":3372,"mtime":1623198507071,"results":"180","hashOfConfig":"149"},{"size":7848,"mtime":1623287890068,"results":"181","hashOfConfig":"149"},{"size":1917,"mtime":1623198507073,"results":"182","hashOfConfig":"149"},{"size":3131,"mtime":1623198507074,"results":"183","hashOfConfig":"149"},{"size":853,"mtime":1623198506971,"results":"184","hashOfConfig":"149"},{"size":2181,"mtime":1623198507075,"results":"185","hashOfConfig":"149"},{"size":4696,"mtime":1623287890068,"results":"186","hashOfConfig":"149"},{"size":5031,"mtime":1623198506933,"results":"187","hashOfConfig":"149"},{"size":19259,"mtime":1623287890068,"results":"188","hashOfConfig":"149"},{"size":3834,"mtime":1623198506966,"results":"189","hashOfConfig":"149"},{"size":4266,"mtime":1623287890068,"results":"190","hashOfConfig":"149"},{"size":10178,"mtime":1623892863583,"results":"191","hashOfConfig":"149"},{"size":1361,"mtime":1623198506972,"results":"192","hashOfConfig":"149"},{"size":4358,"mtime":1623835586251,"results":"193","hashOfConfig":"149"},{"size":1121,"mtime":1623198507093,"results":"194","hashOfConfig":"149"},{"size":280,"mtime":1627967732377,"results":"195","hashOfConfig":"196"},{"size":937,"mtime":1624503751437,"results":"197","hashOfConfig":"196"},{"size":805,"mtime":1633536621441,"results":"198","hashOfConfig":"196"},{"size":10520,"mtime":1633585550815,"results":"199","hashOfConfig":"196"},{"size":4300,"mtime":1632994475709,"results":"200","hashOfConfig":"196"},{"size":498,"mtime":1632994844866,"results":"201","hashOfConfig":"196"},{"size":9915,"mtime":1633422225765,"results":"202","hashOfConfig":"196"},{"size":6265,"mtime":1633150138093,"results":"203","hashOfConfig":"196"},{"size":26541,"mtime":1633405442644,"results":"204","hashOfConfig":"196"},{"size":2719,"mtime":1630373034880,"results":"205","hashOfConfig":"196"},{"size":7522,"mtime":1632721162627,"results":"206","hashOfConfig":"196"},{"size":6881,"mtime":1633349884572,"results":"207","hashOfConfig":"196"},{"size":4987,"mtime":1633526983838,"results":"208","hashOfConfig":"196"},{"size":6863,"mtime":1624253278354,"results":"209","hashOfConfig":"196"},{"size":1840,"mtime":1631858104682,"results":"210","hashOfConfig":"196"},{"size":1143,"mtime":1623198507057,"results":"211","hashOfConfig":"196"},{"size":2177,"mtime":1625013232145,"results":"212","hashOfConfig":"196"},{"size":11986,"mtime":1633626196495,"results":"213","hashOfConfig":"196"},{"size":1382,"mtime":1624581507523,"results":"214","hashOfConfig":"196"},{"size":950,"mtime":1632998921715,"results":"215","hashOfConfig":"196"},{"size":474,"mtime":1623198506977,"results":"216","hashOfConfig":"196"},{"size":2754,"mtime":1633068195385,"results":"217","hashOfConfig":"196"},{"size":10090,"mtime":1631508480438,"results":"218","hashOfConfig":"196"},{"size":2585,"mtime":1631508505548,"results":"219","hashOfConfig":"196"},{"size":5784,"mtime":1631077508334,"results":"220","hashOfConfig":"196"},{"size":13520,"mtime":1631698826910,"results":"221","hashOfConfig":"196"},{"size":20829,"mtime":1631695586624,"results":"222","hashOfConfig":"196"},{"size":5181,"mtime":1628573250397,"results":"223","hashOfConfig":"196"},{"size":388,"mtime":1623198506891,"results":"224","hashOfConfig":"225"},{"size":255,"mtime":1623198506906,"results":"226","hashOfConfig":"196"},{"size":4727,"mtime":1625460225083,"results":"227","hashOfConfig":"196"},{"size":5136,"mtime":1631781173368,"results":"228","hashOfConfig":"196"},{"size":1224,"mtime":1623893479508,"results":"229","hashOfConfig":"196"},{"size":8804,"mtime":1633406810234,"results":"230","hashOfConfig":"196"},{"size":7848,"mtime":1623287890068,"results":"231","hashOfConfig":"225"},{"size":1878,"mtime":1633050464089,"results":"232","hashOfConfig":"196"},{"size":3834,"mtime":1623198506966,"results":"233","hashOfConfig":"196"},{"size":1357,"mtime":1629162522603,"results":"234","hashOfConfig":"196"},{"size":4358,"mtime":1623835586251,"results":"235","hashOfConfig":"196"},{"size":1121,"mtime":1623198507093,"results":"236","hashOfConfig":"196"},{"size":2759,"mtime":1633424587295,"results":"237","hashOfConfig":"196"},{"size":583,"mtime":1631682469787,"results":"238","hashOfConfig":"196"},{"size":2815,"mtime":1632359212653,"results":"239","hashOfConfig":"196"},{"size":5885,"mtime":1631844206365,"results":"240","hashOfConfig":"196"},{"size":736,"mtime":1631508800841,"results":"241","hashOfConfig":"196"},{"size":1233,"mtime":1633009463065,"results":"242","hashOfConfig":"196"},{"size":401,"mtime":1628504220899,"results":"243","hashOfConfig":"196"},{"size":3027,"mtime":1631508811397,"results":"244","hashOfConfig":"196"},{"size":15720,"mtime":1633615789534,"results":"245","hashOfConfig":"196"},{"size":3457,"mtime":1633626597844,"results":"246","hashOfConfig":"196"},{"size":3601,"mtime":1633493668671,"results":"247","hashOfConfig":"196"},{"size":10652,"mtime":1633010390092,"results":"248","hashOfConfig":"196"},{"size":2385,"mtime":1632720605468,"results":"249","hashOfConfig":"196"},{"size":11738,"mtime":1633582436531,"results":"250","hashOfConfig":"196"},{"size":2504,"mtime":1633350241450,"results":"251","hashOfConfig":"196"},{"size":39711,"mtime":1633604529066,"results":"252","hashOfConfig":"196"},{"size":8125,"mtime":1629189945002,"results":"253","hashOfConfig":"196"},{"size":19612,"mtime":1633047195968,"results":"254","hashOfConfig":"196"},{"size":2078,"mtime":1629446195358,"results":"255","hashOfConfig":"196"},{"size":1742,"mtime":1629271666066,"results":"256","hashOfConfig":"196"},{"size":10081,"mtime":1633629662980,"results":"257","hashOfConfig":"196"},{"size":401,"mtime":1625628154746,"results":"258","hashOfConfig":"196"},{"size":8645,"mtime":1632982845864,"results":"259","hashOfConfig":"196"},{"size":2549,"mtime":1631508640072,"results":"260","hashOfConfig":"196"},{"size":71386,"mtime":1633629309799,"results":"261","hashOfConfig":"196"},{"size":8500,"mtime":1632719886419,"results":"262","hashOfConfig":"196"},{"size":30916,"mtime":1633582473390,"results":"263","hashOfConfig":"196"},{"size":38419,"mtime":1633603392546,"results":"264","hashOfConfig":"196"},{"size":2388,"mtime":1631508874799,"results":"265","hashOfConfig":"196"},{"size":7767,"mtime":1630374088248,"results":"266","hashOfConfig":"196"},{"size":3257,"mtime":1633349715009,"results":"267","hashOfConfig":"196"},{"size":518,"mtime":1630485105323,"results":"268","hashOfConfig":"196"},{"size":3574,"mtime":1631243139928,"results":"269","hashOfConfig":"196"},{"size":2386,"mtime":1631508873857,"results":"270","hashOfConfig":"196"},{"size":38297,"mtime":1633603391426,"results":"271","hashOfConfig":"196"},{"size":9035,"mtime":1633578155840,"results":"272","hashOfConfig":"196"},{"size":10780,"mtime":1631515530215,"results":"273","hashOfConfig":"196"},{"size":20041,"mtime":1631837046067,"results":"274","hashOfConfig":"196"},{"size":16623,"mtime":1633097283264,"results":"275","hashOfConfig":"196"},{"size":482,"mtime":1631527170390,"results":"276","hashOfConfig":"196"},{"size":572,"mtime":1633411428712,"results":"277","hashOfConfig":"196"},{"size":3965,"mtime":1633539103896,"results":"278","hashOfConfig":"196"},{"size":22680,"mtime":1633057469818,"results":"279","hashOfConfig":"196"},{"size":14854,"mtime":1633000053505,"results":"280","hashOfConfig":"196"},{"size":410,"mtime":1633046788866,"results":"281","hashOfConfig":"196"},{"size":3246,"mtime":1633349565316,"results":"282","hashOfConfig":"196"},{"size":5841,"mtime":1633603087332,"results":"283","hashOfConfig":"196"},{"size":8050,"mtime":1633530924758,"results":"284","hashOfConfig":"196"},{"size":2291,"mtime":1633404817506,"results":"285","hashOfConfig":"196"},{"size":35956,"mtime":1633630440912,"results":"286","hashOfConfig":"196"},{"size":2336,"mtime":1633424146344,"results":"287","hashOfConfig":"196"},{"size":1612,"mtime":1633630332953,"results":"288","hashOfConfig":"196"},{"size":1500,"mtime":1633537591014,"results":"289","hashOfConfig":"196"},{"size":3702,"mtime":1633539385978,"results":"290","hashOfConfig":"196"},{"size":11426,"mtime":1633629753023,"results":"291","hashOfConfig":"196"},{"size":3469,"mtime":1633583372095,"results":"292","hashOfConfig":"196"},{"size":1163,"mtime":1633602326789,"results":"293","hashOfConfig":"196"},{"size":1163,"mtime":1633602326789,"results":"294","hashOfConfig":"196"},{"size":37198,"mtime":1633604009224,"results":"295","hashOfConfig":"196"},{"size":10052,"mtime":1633494016369,"results":"296","hashOfConfig":"196"},{"size":1179,"mtime":1633630331127,"results":"297","hashOfConfig":"196"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},"1ai3dju",{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"300"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"300"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"300"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"300"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"300"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"300"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"300"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},"vmaov1",{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"399"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"399"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"399"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"399"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"399"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"461"},"4k3ehh",{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"461"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"399"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"399"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"504","messages":"505","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"399"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"399"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518","usedDeprecatedRules":"399"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"541","usedDeprecatedRules":"399"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"544","usedDeprecatedRules":"399"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"399"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"399"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567","usedDeprecatedRules":"399"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"399"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"399"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"586","usedDeprecatedRules":"399"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"589","usedDeprecatedRules":"399"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"399"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"597","messages":"598","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599","usedDeprecatedRules":"399"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616","usedDeprecatedRules":"399"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"399"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Project\\react\\src\\index.js",[],["621","622"],"D:\\Project\\react\\src\\Store\\Store.js",[],"D:\\Project\\react\\src\\App.js",[],"D:\\Project\\react\\src\\Login.js",["623","624","625"],"D:\\Project\\react\\src\\Home.js",["626"],"import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport SideBarMenuMain from './Component/Menu/SideBarMenu/SideBarMenuMain';\r\nimport TabList from './Component/Menu/tabMenu/TabList';\r\nimport WindowFrame from './Program/WindowFrame';\r\n\r\nimport './Home.css';\r\nimport {getSessionCookie} from \"./Cookies\";\r\n// import {ExampleApp} from './Component/Popup/TestPopup'\r\n\r\nlet isSession = false;\r\n\r\nconst Home = (props) => {  \r\n  const session = getSessionCookie(\"session\");\r\n  const leftWindow = useSelector((e) => e.SIDEBARMENU_REDUCER.State, (p, n) => {\r\n    return p.open === n.open;\r\n  });\r\n\r\n  const windowState = useSelector((e) => {\r\n    if(e.WINDOWFRAME_REDUCER === undefined) {\r\n      return null;\r\n    }else{\r\n      return e.WINDOWFRAME_REDUCER.windowState\r\n    }\r\n  }, (p, n) => {\r\n    return (p === null ? 0 : p.length) === (n === null ? 0 : n.length)\r\n  });\r\n\r\n  // const SideBarMenuState = useSelector((e) => e.SIDEBARMENU_REDUCER.State, (p, n) => {\r\n  //   return JSON.stringify(p) === JSON.stringify(n);\r\n  // });\r\n\r\n  // const width = SideBarMenuState[0].width;\r\n\r\n  let width = 343; \r\n  if(leftWindow.open) width = 90;\r\n  // if (session === \"SUCCESS\")\r\n  // {\r\n    isSession = true;\r\n  // }\r\n  return (\r\n    \r\n    <React.Fragment>      \r\n      {isSession ?\r\n      <>\r\n        <div style={{display:'inline-block', height:'100%'}} >\r\n          <SideBarMenuMain />\r\n        </div>\r\n        \r\n        <div style={{display:'inline-block', paddingRight:'17px', transition:'all 0.2s ease-in-out', position:'absolute', left:width, right:0, height:'100%'}}>\r\n          <div style={{display:'flex', flexDirection:'column', height:'100vh'}}>\r\n            <div style={{height:80}}>\r\n              <TabList />\r\n            </div>\r\n            <div style={{flex:1, display:'flex'}}> \r\n              <div style={{float:'left', width:'100%', position:'relative', zIndex:0, overflow:'hidden'}}>\r\n                {windowState != null &&\r\n                  windowState.map(e => \r\n                    <WindowFrame key={e.programId} programId={e.programId} programNam={e.programNam}/>\r\n                  )\r\n                }\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n      :\r\n        <div>LOGIN PLZZZ</div>\r\n      }\r\n      \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;","D:\\Project\\react\\src\\Cookies.js",["627"],"import React from \"react\";\r\nimport * as Cookies from \"js-cookie\";\r\n\r\nexport const setSessionCookie = (key, value, expire) => {\r\n  console.log(key + \":\" + value);\r\n  Cookies.remove(key); // 원래 쿠키 삭제\r\n  Cookies.set(key, value, {expires : expire} ); // 키, 값,  만료일\r\n};\r\n\r\nexport const getSessionCookie = (key) => {\r\n  const sessionCookie = Cookies.get(key);\r\n\r\n  if (sessionCookie === undefined) {\r\n    return {};\r\n  } \r\n  else \r\n  {\r\n    console.log(\"sessionCookie : \" + sessionCookie)\r\n    return sessionCookie;\r\n  }\r\n};","D:\\Project\\react\\src\\Method\\Store.js",[],"D:\\Project\\react\\src\\Program\\WindowFrame.js",[],"D:\\Project\\react\\src\\Component\\Control\\ExplainInput.js",[],"D:\\Project\\react\\src\\Component\\Control\\Button.js",[],"D:\\Project\\react\\src\\db\\Mysql\\Mysql.js",[],"D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuMain.js",[],"D:\\Project\\react\\src\\Component\\Menu\\tabMenu\\TabList.js",[],"D:\\Project\\react\\src\\db\\Mysql\\MysqlServer.js",[],"D:\\Project\\react\\src\\Method\\Comm.js",[],"D:\\Project\\react\\src\\Method\\Grid.js",[],"D:\\Project\\react\\src\\Program\\MES\\PgmTest.js",[],"D:\\Project\\react\\src\\JSON\\jsonControl.js",[],"D:\\Project\\react\\src\\Program\\MES\\Chart\\PgmTest2.js",[],"D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainView.js",[],"D:\\Project\\react\\src\\Program\\MES\\Menu.js",["628","629"],"import React, { Component } from 'react';\r\nimport Grid from '../../Component/Grid/Grid';\r\nimport Layout from '../../Component/Layout/Layout';\r\n\r\nimport { gfc_initPgm, gfc_getAtt, gfc_getMultiLang } from '../../Method/Comm';\r\nimport { gfg_getGrid, gfg_appendRow, gfg_setValue, gfg_setSelectRow } from '../../Method/Grid';\r\nimport { gfo_getInput, gfo_getCombo, gfo_getDateTime, gfo_getNumber } from '../../Method/Component';\r\nimport { gfs_getStoreValue } from '../../Method/Store';\r\nimport { getCallSP_Mysql } from '../../db/Mysql/Mysql';\r\n\r\nimport { Number as columnNumber } from '../../Component/Grid/Column/Number';\r\nimport { Input as columnInput } from '../../Component/Grid/Column/Input';\r\nimport { DateTime as columnDateTime } from '../../Component/Grid/Column/DateTime';\r\nimport { Combobox as columnCombobox} from '../../Component/Grid/Column/Combobox';\r\n\r\nimport SearchDiv from '../../Component/Control/SearchDiv';\r\nimport DetailDiv from '../../Component/Control/DetailDiv';\r\n\r\nimport Input from '../../Component/Control/Input';\r\nimport Combobox from '../../Component/Control/Combobox';\r\nimport DateTime from '../../Component/Control/DateTime';\r\nimport Number from '../../Component/Control/Number';\r\n\r\nimport store from \"../../Store/Store.js\";\r\n\r\nclass Menu extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        gfc_initPgm(props.pgm, props.nam, this);\r\n    }\r\n    Retrieve = () => {\r\n        const menu_id = gfo_getInput(this.props.pgm, 'search_menu_id').getValue();\r\n        const menu_nam = gfo_getInput(this.props.pgm, 'search_menu_nam').getValue();\r\n        const menu_use = gfo_getCombo(this.props.pgm, 'search_menu_use').getValue();                \r\n\r\n        getCallSP_Mysql(\r\n            [{SP        : 'SP_MENU_ED050',\r\n              ROWSTATUS : 'R',\r\n              COP_CD    : '10', \r\n              MENU_ID   : menu_id,\r\n              MENU_NAM  : menu_nam,\r\n              USE_YN    : menu_use,\r\n              MENU_LEVEL  : 0,\r\n              MENU_GRP_YN : '0',\r\n              UP_MENU_ID  : '',\r\n              PGM_ID      : '',\r\n              MENU_SEQ    : 0,\r\n              RETAUT_YN : '',\r\n              INSAUT_YN : '',\r\n              SAVAUT_YN : '',\r\n              DELAUT_YN : '',\r\n              PRNAUT_YN : '',\r\n              EXEAUT_YN : '',\r\n              APPAUT_YN : '',\r\n              XLSAUT_YN : '',\r\n              ETCAUT_YN : '',\r\n              UPDCHR_NO : '',\r\n            }]\r\n        ).then(\r\n            e=>{\r\n                const MSG_CODE = e.data.MSG_CODE;\r\n                const MSG_TEXT = e.data.MSG_TEXT;\r\n                if (e.data.result){\r\n                    const grid = gfg_getGrid(this.props.pgm, 'main50');\r\n                    grid.resetData(e.data.data);\r\n                    gfg_setSelectRow(grid);\r\n                  }\r\n                  else{\r\n                  }                  \r\n                  gfc_getMultiLang(MSG_CODE, MSG_TEXT);\r\n            }\r\n        )\r\n    }\r\n\r\n    Insert = () => {\r\n        const grid = gfg_getGrid(this.props.pgm, 'main50');\r\n        gfg_appendRow(grid, grid.getRowCount(), {}, 'MENU_NAM')\r\n    }\r\n    Save = () => {\r\n\r\n        const grid = gfg_getGrid(this.props.pgm, 'main50');\r\n        getCallSP_Mysql(\r\n            [],\r\n            [{grid,\r\n              SP          : 'SP_MENU_ED050',\r\n              COP_CD    : '10',              \r\n              MENU_ID     : 'VARCHAR',\r\n              MENU_NAM    : 'VARCHAR',\r\n              USE_YN      : 'VARCHAR',\r\n              MENU_LEVEL  : 'DECIMAL',\r\n              MENU_GRP_YN : 'VARCHAR',\r\n              UP_MENU_ID  : 'VARCHAR',\r\n              PGM_ID      : 'VARCHAR',\r\n              MENU_SEQ    : 'INT',\r\n              RETAUT_YN : 'VARCHAR',\r\n              INSAUT_YN : 'VARCHAR',\r\n              SAVAUT_YN : 'VARCHAR',\r\n              DELAUT_YN : 'VARCHAR',\r\n              PRNAUT_YN : 'VARCHAR',\r\n              EXEAUT_YN : 'VARCHAR',\r\n              APPAUT_YN : 'VARCHAR',\r\n              XLSAUT_YN : 'VARCHAR',\r\n              ETCAUT_YN : 'VARCHAR',\r\n              UPDCHR_NO : 'VARCHAR'\r\n            }],\r\n            [{\r\n                UPDCHR_NO : gfs_getStoreValue('USER_REDUCER', 'USER_ID') //gfs_getStoreValue\r\n            }]\r\n        ).then(\r\n            e=>{\r\n                const MSG_CODE = e.data.MSG_CODE;\r\n                const MSG_TEXT = e.data.MSG_TEXT;\r\n                if (e.data.result){\r\n                    grid.resetOriginData()\r\n                    grid.restore();\r\n                  }\r\n                  else{\r\n                    const COL_NAM = e.data.COL_NAM;\r\n                    const ROW_KEY = e.data.ROW_KEY;\r\n          \r\n                    gfg_setSelectRow(grid, COL_NAM, ROW_KEY);\r\n                  }                  \r\n                  gfc_getMultiLang(MSG_CODE, MSG_TEXT);\r\n            }\r\n        )\r\n    }\r\n    Delete = () => {\r\n        const grid = gfg_getGrid(this.props.pgm, 'main50');\r\n        getCallSP_Mysql(\r\n            [],\r\n            [{grid,\r\n              SP          : 'SP_MENU_ED050',\r\n              COP_CD    : '10',              \r\n              MENU_ID     : 'VARCHAR',\r\n              MENU_NAM    : 'VARCHAR',\r\n              USE_YN      : 'VARCHAR',\r\n              MENU_LEVEL  : 'DECIMAL',\r\n              MENU_GRP_YN : 'VARCHAR',\r\n              UP_MENU_ID  : 'VARCHAR',\r\n              PGM_ID      : 'VARCHAR',\r\n              MENU_SEQ    : 'INT',\r\n              RETAUT_YN : 'VARCHAR',\r\n              INSAUT_YN : 'VARCHAR',\r\n              SAVAUT_YN : 'VARCHAR',\r\n              DELAUT_YN : 'VARCHAR',\r\n              PRNAUT_YN : 'VARCHAR',\r\n              EXEAUT_YN : 'VARCHAR',\r\n              APPAUT_YN : 'VARCHAR',\r\n              XLSAUT_YN : 'VARCHAR',\r\n              ETCAUT_YN : 'VARCHAR',\r\n              UPDCHR_NO : 'VARCHAR'\r\n            }],\r\n            [{\r\n                UPDCHR_NO : gfs_getStoreValue('USER_REDUCER', 'USER_ID') //gfs_getStoreValue\r\n            }],\r\n            true\r\n        ).then(\r\n            e => {\r\n              const MSG_CODE = e.data.MSG_CODE;\r\n              const MSG_TEXT = e.data.MSG_TEXT;\r\n              const ROW_KEY = e.data.ROW_KEY;\r\n      \r\n              if(e.data.result){\r\n                grid.removeRow(ROW_KEY);\r\n                grid.resetOriginData();\r\n                grid.restore();\r\n                gfc_getMultiLang(MSG_CODE, MSG_TEXT);\r\n              }else{\r\n                if (MSG_CODE === 'PHANTOM'){\r\n      \r\n                }else{\r\n                  gfc_getMultiLang(MSG_CODE, MSG_TEXT);\r\n                }\r\n              }\r\n            }\r\n          )\r\n    }\r\n\r\n    onSelectChange = (e) => {\r\n        if(e === null) return;\r\n        gfo_getNumber(this.props.pgm, 'detail_menu_seq').setValue(e.MENU_SEQ);\r\n        gfo_getInput(this.props.pgm, 'detail_menu_comment').setValue(e.BIGO);\r\n        gfo_getInput(this.props.pgm, 'detail_crt_no').setValue(e.CRTCHR_NO);\r\n        gfo_getDateTime(this.props.pgm, 'detail_crt_dt').setValue(e.CRT_DT);\r\n        gfo_getInput(this.props.pgm, 'detail_up_no').setValue(e.UPDCHR_NO);\r\n        gfo_getDateTime(this.props.pgm, 'detail_up_dt').setValue(e.UPD_DT);        \r\n      }\r\n    \r\n      afterChange = (e) => {\r\n      }\r\n\r\n    render(){\r\n        return (\r\n        <Layout split   ='horizontal'\r\n                minSize     ={[54]}\r\n                defaultSize ={54}\r\n                // resizerStyle='none'\r\n                >\r\n        <SearchDiv>\r\n            <Input pgm={this.props.pgm}\r\n                    id='search_menu_id'\r\n                    label={gfc_getAtt('메뉴 ID')}\r\n            >\r\n            </Input>\r\n            <Input pgm={this.props.pgm}\r\n                    id='search_menu_nam'\r\n                    label={gfc_getAtt('메뉴 이름')}>\r\n            </Input>\r\n\r\n            <Combobox pgm={this.props.pgm}\r\n                        id='search_menu_use'\r\n                        location= 'Common/Common.js'\r\n                        fn      = 'use_yn'\r\n                        value   = 'USE_YN'\r\n                        display = 'YN_STR'\r\n                        field   = {[]}\r\n                        param   = {[]}\r\n                        width   = {500}\r\n                        >\r\n            </Combobox>            \r\n        </SearchDiv>\r\n\r\n            <Layout primary     = 'second'\r\n                    split       ='vertical'\r\n                    defaultSize = {'0%'}\r\n                    direction   = 'left'\r\n            >\r\n                <Grid pgm={this.props.pgm}\r\n                  id='main50'\r\n                  selectionChange={(e) => this.onSelectChange(e)}\r\n                  afterChange={(e) => this.afterChange(e)}\r\n                  columns = {[\r\n                                columnInput({name    : 'MENU_ID', \r\n                                            header  : gfc_getAtt('메뉴ID'), \r\n                                            width   : 120, \r\n                                            readOnly: false\r\n                                        }),\r\n                                columnInput({name    : 'MENU_NAM', \r\n                                            header  : gfc_getAtt('메뉴명'), \r\n                                            width   : 120, \r\n                                            readOnly: false\r\n                                        }),\r\n                                columnCombobox({name: 'USE_YN', \r\n                                                header: gfc_getAtt('사용여부'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),\r\n                                columnNumber({name : 'MENU_LEVEL',\r\n                                              header: gfc_getAtt('메뉴단계'),\r\n                                              readOnly : false,\r\n                                            }),\r\n                                columnCombobox({name: 'RETAUT_YN', \r\n                                                header: gfc_getAtt('조회권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),   \r\n                                columnCombobox({name: 'INSAUT_YN', \r\n                                                header: gfc_getAtt('등록권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),\r\n                                columnCombobox({name: 'SAVAUT_YN', \r\n                                                header: gfc_getAtt('저장권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),       \r\n                                columnCombobox({name: 'DELAUT_YN', \r\n                                                header: gfc_getAtt('삭제권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),   \r\n                                columnCombobox({name: 'PRNAUT_YN', \r\n                                                header: gfc_getAtt('출력권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),   \r\n                                columnCombobox({name: 'EXEAUT_YN', \r\n                                                header: gfc_getAtt('실행권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),   \r\n                                columnCombobox({name: 'APPAUT_YN', \r\n                                                header: gfc_getAtt('결재권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),   \r\n                                columnCombobox({name: 'XLSAUT_YN', \r\n                                                header: gfc_getAtt('엑셀권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),   \r\n                                columnCombobox({name: 'ETCAUT_YN', \r\n                                                header: gfc_getAtt('기타권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),   \r\n                                columnNumber({name : 'MENU_SEQ',\r\n                                              header: gfc_getAtt('메뉴 SEQ'),\r\n                                              width : 0,\r\n                                              readOnly : true,                                              \r\n                                              }),\r\n                                columnInput({name  : 'BIGO', \r\n                                             header: gfc_getAtt('코멘트'), \r\n                                             width : 0,\r\n                                             readOnly: true\r\n                                             }),\r\n                                columnInput({name  : 'CRTCHR_NO', \r\n                                             header: gfc_getAtt('생성자'), \r\n                                             width : 0,\r\n                                             readOnly: true,\r\n                                             align   : 'center'\r\n                                            }),\r\n                                \r\n                                columnDateTime({name  : 'CRT_DT',\r\n                                                header: gfc_getAtt('생성일자'),\r\n                                                width : 0,\r\n                                                format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                                                time  : 'HH:mm',\r\n                                                editor: { \r\n                                                 timepicker: true\r\n                                                }\r\n                                              }),\r\n                                \r\n                                columnInput({name  : 'UPDCHR_NO', \r\n                                             header: gfc_getAtt('수정자'), \r\n                                             width : 0,\r\n                                             readOnly: true\r\n                                            }),\r\n  \r\n                                columnDateTime({name  : 'UPD_DT',\r\n                                                header: gfc_getAtt('수정일시'),\r\n                                                width : 0,\r\n                                                format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                                                time  : 'HH:mm',\r\n                                                readOnly: true\r\n                                              })\r\n                        \r\n                  ]}>\r\n\r\n                </Grid>\r\n                <DetailDiv title={gfc_getAtt('상세정보')}>\r\n                    <tr>\r\n                        <th>{gfc_getAtt('메뉴 SEQ')}</th>\r\n                        <td>\r\n                            <Number pgm={this.props.pgm}\r\n                                    id='detail_menu_seq'>\r\n                            </Number>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>{gfc_getAtt('비고')}</th>\r\n                        <td>\r\n                        <Input pgm={this.props.pgm}\r\n                                    id='detail_menu_comment'>\r\n                            </Input>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>{gfc_getAtt('생성자')}</th>\r\n                        <td>\r\n                        <Input pgm={this.props.pgm}\r\n                                    id='detail_crt_no'\r\n                                    readOnly={true}>\r\n                            </Input>\r\n                        </td>\r\n                        <th>{gfc_getAtt('생성일')}</th>\r\n                        <td>\r\n                            <DateTime pgm={this.props.pgm}\r\n                                        id='detail_crt_dt'\r\n                                        format= {`${gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT')} HH:mm`}\r\n                                        readOnly={true}>\r\n                            </DateTime>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>{gfc_getAtt('갱신자')}</th>\r\n                        <td>\r\n                        <Input pgm={this.props.pgm}\r\n                                    id='detail_up_no'\r\n                                    readOnly={true}>\r\n                            </Input>\r\n                        </td>\r\n                        <th>{gfc_getAtt('갱신일')}</th>\r\n                        <td>\r\n                            <DateTime pgm={this.props.pgm}\r\n                                        id='detail_up_dt'\r\n                                        format= {`${gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT')} HH:mm`}\r\n                                        readOnly={true}>                                            \r\n                            </DateTime>\r\n                        </td>\r\n                    </tr>\r\n                </DetailDiv>\r\n\r\n            </Layout>\r\n        </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainList.js",[],"D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuTitle.js",[],"D:\\Project\\react\\src\\Component\\Menu\\tabMenu\\TabListItem.js",[],"D:\\Project\\react\\src\\Component\\Control\\DetailDiv.js",[],"D:\\Project\\react\\src\\Component\\Control\\SearchDiv.js",[],"D:\\Project\\react\\src\\Method\\Popup.js",[],"D:\\Project\\react\\src\\Method\\Component.js",[],"D:\\Project\\react\\src\\Component\\Control\\Input.js",[],"D:\\Project\\react\\src\\Component\\Control\\Combobox.js",[],"D:\\Project\\react\\src\\Component\\Control\\DateTime.js",[],"D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart1.js",[],"D:\\Project\\react\\src\\Component\\Control\\Number.js",[],"D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart2.js",[],"D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart3.js",[],"D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetail.js",[],"D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart4.js",["630","631"],"import React, { useRef } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport * as echarts from 'echarts';\r\n\r\nlet myChart;\r\n\r\nconst Chart4 = (props) => {\r\n  const chartDiv = useRef(null);\r\n  \r\n  const data = useSelector((e) => e.PGMTEST2_REDUCER.data4Org);\r\n\r\n  const dateList = data.map(function (item) {\r\n      return item.OTIME;\r\n  });\r\n  const valueList = data.map(function (item) {\r\n      return item.VALUE;\r\n  });\r\n\r\n  const option = {\r\n    xAxis: {\r\n        type: 'category',\r\n        boundaryGap: false\r\n    },\r\n    yAxis: {\r\n        type: 'value',\r\n        boundaryGap: [0, '30%']\r\n    },\r\n    visualMap: {\r\n        type: 'piecewise',\r\n        show: false,\r\n        dimension: 0,\r\n        seriesIndex: 0,\r\n        pieces: [{\r\n            gt: 1,\r\n            lt: 3,\r\n            color: 'rgba(0, 0, 180, 0.4)'\r\n        }, {\r\n            gt: 5,\r\n            lt: 7,\r\n            color: 'rgba(255, 0, 0)'\r\n        }]\r\n    },\r\n    series: [\r\n        {\r\n            type: 'line',\r\n            smooth: 0.6,\r\n            symbol: 'none',\r\n            lineStyle: {\r\n                color: '#5470C6',\r\n                width: 5\r\n            },\r\n            markLine: {\r\n                symbol: ['none', 'none'],\r\n                label: {show: false},\r\n                data: [\r\n                    {xAxis: 1},\r\n                    {xAxis: 3},\r\n                    {xAxis: 5},\r\n                    {xAxis: 7}\r\n                ]\r\n            },\r\n            areaStyle: {},\r\n            data: [\r\n                ['2019-10-10', 200],\r\n                ['2019-10-11', 560],\r\n                ['2019-10-12', 750],\r\n                ['2019-10-13', 580],\r\n                ['2019-10-14', 250],\r\n                ['2019-10-15', 300],\r\n                ['2019-10-16', 450],\r\n                ['2019-10-17', 300],\r\n                ['2019-10-18', 100]\r\n            ]\r\n        }\r\n    ]\r\n  };\r\n\r\n\r\n  if(myChart === undefined && chartDiv.current !== null){\r\n     myChart = echarts.init(chartDiv.current);\r\n  }\r\n\r\n  if(option && myChart) myChart.setOption(option);\r\n\r\n  return(\r\n    <div ref={chartDiv} style={{float:'left', width:'50%', height:'100%'}} ></div>\r\n  );\r\n}\r\n\r\nexport default Chart4;","D:\\Project\\react\\src\\Component\\Grid\\Column\\Number.js",[],"D:\\Project\\react\\src\\Component\\Grid\\Column\\Input.js",[],"D:\\Project\\react\\src\\Component\\Grid\\Grid.js",[],"D:\\Project\\react\\src\\Component\\Layout\\Layout.js",[],"D:\\Project\\react\\src\\Component\\Grid\\Column\\DateTime.js",[],"D:\\Project\\react\\src\\Component\\Grid\\Column\\Combobox.js",[],"D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetailComponent.js",[],"D:\\Project\\react\\src\\Component\\Popup\\PopupFrame.js",["632"],"import React from 'react';\r\nimport { Component } from 'react';\r\nimport { jsonMaxValue } from '../../JSON/jsonControl';\r\nimport { Rnd } from 'react-rnd';\r\nimport ReactDOM from 'react-dom';\r\nimport { gfs_PGM_REDUCER, gfs_dispatch, gfs_getStoreValue } from '../../Method/Store';\r\n\r\nclass PopupFrame extends Component {\r\n  popupOpenYn = null;\r\n  parentNode = null;\r\n  rootId = 0;\r\n\r\n  zIndex = 0;\r\n  state = {\r\n    width  : this.props.width,\r\n    height : this.props.height,\r\n    child  : undefined,\r\n    pgm    : '',\r\n    nam    : ''\r\n  }\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.rootId = this.props.rootId;\r\n\r\n    this.zIndex = jsonMaxValue(gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState'), 'windowZindex');\r\n\r\n    this.popupOpenYn = document.querySelector('[id^=\"POPUP_OWNER\"]');\r\n    \r\n    var bg = document.createElement('div');\r\n    bg.id = 'POPUP_OWNER_' + props.parent.props.pgm + '_' + this.rootId;\r\n    bg.style = `position: fixed;\r\n                z-index: ${this.zIndex};\r\n                left: 0px;\r\n                top: 0px;\r\n                width: 100%;\r\n                height: 100%;\r\n                overflow: auto;\r\n                background: rgba(0,0,0,0.4)`;\r\n    if(this.popupOpenYn === null){\r\n      document.body.append(bg);\r\n    }else{\r\n      this.parentNode = ReactDOM.findDOMNode(this.props.parent);\r\n      this.parentNode.append(bg);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    const pgm = this.state.pgm + this.props.rootId;\r\n    const rtnValue = gfs_getStoreValue(pgm);\r\n\r\n    // gfs_dispatch('WINDOWFRAME_REDUCER', 'CLOSEWINDOW', \r\n    //   ({\r\n    //     activeWindow: {programId: pgm\r\n    //                   }\r\n    //   })\r\n    // );\r\n\r\n    this.props.callback(rtnValue);\r\n  }\r\n\r\n  componentDidMount(){  \r\n    const popup = import(`../../Program/POPUP/${this.props.src}`);\r\n    popup.then(\r\n      e => {\r\n        //지금 팝업은 메뉴도 없고,\r\n        // 다국어 테이블도 없고해서 그냥 하드코딩한다.\r\n        // 차후에 결정되면 메뉴등록해서 nam가져올지 다국어에서 nam가져올지 결정\r\n        const pgm = e.default.name + this.props.rootId;\r\n        const nam = e.default.name;\r\n        gfs_PGM_REDUCER(pgm);\r\n\r\n        this.setState({pgm: e.default.name, nam: nam});\r\n\r\n        this.setState({\r\n          child: \r\n          <div className='win_body'>\r\n            <e.default pgm={pgm} nam={nam}/>\r\n          </div>\r\n        });\r\n      }\r\n    )\r\n  }\r\n  \r\n  render() {\r\n\r\n    return(     \r\n      <Rnd size={{\r\n        width: this.state.width,\r\n        height:this.state.height\r\n      }}\r\n      dragHandleClassName='win_header'\r\n      // bounds='parent'\r\n      style={{\r\n        zIndex: this.zIndex + 1\r\n      }}\r\n      onResizeStop= {(e, dir, ref, delta, position) => this.setState({width: this.state.width < delta.width ? this.state.width - delta.width : this.state.width + delta.width,\r\n                                                                      height: this.state.height < delta.height ? this.state.height - delta.height : this.state.height + delta.height})}\r\n      >\r\n        <div style={{width:'100%'}} \r\n             className='content'\r\n             >\r\n        \r\n          <div className='win_header' style={{cursor:'move'}}>\r\n            <h4>[{this.state.pgm}] {this.state.nam}</h4>\r\n            \r\n            <div className='win_controller'>\r\n\r\n              <button type='button' className='close' \r\n                      onClick={() => {\r\n                        ReactDOM.unmountComponentAtNode(document.getElementById('POPUP_' + this.props.parent.props.pgm + '_' + this.rootId));\r\n\r\n                        if(this.parentNode === null){\r\n                          document.body.removeChild(document.getElementById('POPUP_OWNER_' + this.props.parent.props.pgm + '_' + this.rootId));\r\n                        }else{\r\n                          this.parentNode.removeChild(document.getElementById('POPUP_OWNER_' + this.props.parent.props.pgm + '_' + this.rootId));\r\n                        }\r\n                      }}\r\n                      onMouseDown={e => e.stopPropagation()} >\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {this.state.child}\r\n        </div>\r\n      </Rnd>    \r\n    );\r\n  }\r\n}\r\n\r\nPopupFrame.propTypes = {\r\n\r\n};\r\n\r\nPopupFrame.defaultProps = {\r\n\r\n};\r\n\r\nexport default PopupFrame;","D:\\Project\\react\\src\\Program\\POPUP\\PopupTest.js",["633"],"import React from 'react';\r\nimport { Component } from 'react';\r\n\r\nimport Layout from '../../Component/Layout/Layout';\r\nimport SearchDiv from '../../Component/Control/SearchDiv';\r\nimport Input from '../../Component/Control/Input';\r\nimport { gfc_getAtt } from '../../Method/Comm';\r\nimport { gfp_openPopup } from '../../Method/Popup';\r\n\r\nclass PopupTest extends Component {\r\n\r\n  // constructor(props){\r\n  //   super(props);\r\n  // }\r\n  \r\n  render() {\r\n\r\n    return(        \r\n      <Layout split       ='horizontal'\r\n              minSize     ={[54]}\r\n              defaultSize ={54}\r\n              resizerStyle='none' \r\n      >\r\n        <SearchDiv>\r\n            <Input pgm={this.props.pgm}\r\n                   id='search_user_nam'\r\n                   label={gfc_getAtt('사용자명')} />\r\n            <Input pgm={this.props.pgm}\r\n                   id='search_user_id'\r\n                   label={gfc_getAtt('사용자ID')} />\r\n                   \r\n        </SearchDiv>\r\n        <div>HIHI</div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nPopupTest.propTypes = {\r\n\r\n};\r\n\r\nPopupTest.defaultProps = {\r\n\r\n};\r\n\r\nexport default PopupTest;","D:\\Project\\01.YK\\react\\src\\index.js",[],["634","635"],"D:\\Project\\01.YK\\react\\src\\Store\\Store.js",[],"D:\\Project\\01.YK\\react\\src\\App.js",[],"D:\\Project\\01.YK\\react\\src\\Home.js",["636","637","638","639","640","641","642"],"import React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom'\r\nimport SideBarMenuMain from './Component/Menu/SideBarMenu/SideBarMenuMain';\r\nimport TabList from './Component/Menu/tabMenu/TabList';\r\nimport WindowFrame from './Program/WindowFrame';\r\nimport { getDynamicSql_Oracle } from './db/Oracle/Oracle';\r\nimport './Home.css';\r\nimport { getSessionCookie, setSessionCookie } from './Cookies';\r\nimport { gfs_injectAsyncReducer, gfs_WINDOWFRAME_REDUCER, gfs_dispatch, gfs_PGM_REDUCER, gfs_getStoreValue } from './Method/Store';\r\nimport { gfc_sleep, gfc_set_oracle_column } from './Method/Comm';\r\n\r\nimport GifPlayer from 'react-gif-player';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nlet isSession = false;\r\n\r\nconst defaultData = async(user_id) => {\r\n\r\n  const userReducer = (nowState, action) => {\r\n    if(action.reducer !== 'USER_REDUCER') {\r\n      return {\r\n        COP_CD    : nowState === undefined ? '' : nowState.COP_CD,\r\n        USER_ID   : nowState === undefined ? '' : nowState.USER_ID,\r\n        USER_NAM  : nowState === undefined ? '' : nowState.USER_NAM,\r\n        DEPT_NAM  : nowState === undefined ? '' : nowState.DEPT_NAM,\r\n        YMD_FORMAT: nowState === undefined ? '' : nowState.YMD_FORMAT,\r\n        YM_FORMAT : nowState === undefined ? '' : nowState.YM_FORMAT,\r\n        NUM_FORMAT: nowState === undefined ? '' : nowState.NUM_FORMAT,\r\n        NUM_ROUND : nowState === undefined ? '' : nowState.NUM_ROUND,\r\n        ERP_ID    : nowState === undefined ? '' : nowState.ERP_ID,\r\n        AREA_TP   : nowState === undefined ? '' : nowState.AREA_TP,\r\n        AUTH      : nowState === undefined ? {} : nowState.AUTH,\r\n        CAMERA_NO : nowState === undefined ? '' : nowState.CAMERA_NO\r\n      };\r\n    }\r\n\r\n    if(action.type === 'USER'){\r\n      return Object.assign({}, nowState, {\r\n        COP_CD     : action.COP_CD,\r\n        USER_ID    : action.USER_ID,\r\n        USER_NAM   : action.USER_NAM,\r\n        DEPT_NAM   : action.DEPT_NAM,\r\n        YMD_FORMAT : action.YMD_FORMAT,\r\n        YM_FORMAT  : action.YM_FORMAT,\r\n        NUM_FORMAT : action.NUM_FORMAT,\r\n        NUM_ROUND  : action.NUM_ROUND,\r\n        ERP_ID     : action.ERP_ID,\r\n        AREA_TP    : action.AREA_TP,\r\n        AUTH       : nowState.AUTH,\r\n        CAMERA_NO  : action.CAMERA_NO\r\n      });\r\n    }else if(action.type === 'AUTH'){\r\n      return Object.assign({}, nowState, {\r\n        COP_CD     : nowState.COP_CD,\r\n        USER_ID    : nowState.USER_ID,\r\n        USER_NAM   : nowState.USER_NAM,\r\n        DEPT_NAM   : nowState.DEPT_NAM,\r\n        YMD_FORMAT : nowState.YMD_FORMAT,\r\n        YM_FORMAT  : nowState.YM_FORMAT,\r\n        NUM_FORMAT : nowState.NUM_FORMAT,\r\n        NUM_ROUND  : nowState.NUM_ROUND,\r\n        ERP_ID     : nowState.ERP_ID,\r\n        AREA_TP    : nowState.AREA_TP,\r\n        AUTH       : action.AUTH,\r\n        CAMERA_NO  : nowState.CAMERA_NO\r\n      });\r\n    }\r\n  };\r\n\r\n  gfs_injectAsyncReducer('USER_REDUCER', userReducer);\r\n\r\n  let result = await getDynamicSql_Oracle(\r\n    'Common/Common',\r\n    'LOGIN_SESSION',\r\n    [{user_id}]\r\n  ); \r\n\r\n  let data = gfc_set_oracle_column(result);\r\n\r\n  gfs_dispatch('USER_REDUCER', 'USER', {\r\n    COP_CD    : '10',\r\n    USER_ID   : data[0].USER_ID,\r\n    USER_NAM  : data[0].USER_NAM,\r\n    DEPT_NAM  : data[0].DEPT_NAM,\r\n    YMD_FORMAT: 'yyyy-MM-DD',\r\n    YM_FORMAT : 'yyyy-MM',\r\n    NUM_FORMAT: '0,0',\r\n    NUM_ROUND : '2R',\r\n    ERP_ID    : data[0].ERP_ID,\r\n    AREA_TP   : data[0].AREA_TP,\r\n    AUTH      : {},\r\n    CAMERA_NO : data[0].CAMERA_NO\r\n  });\r\n\r\n  let result2 = await getDynamicSql_Oracle(\r\n    'Common/Common',\r\n    'AUTH_TOTAL',\r\n    [{COP_CD: '10',\r\n      user_id\r\n    }]\r\n  ); \r\n\r\n  let data2 = gfc_set_oracle_column(result2);\r\n  gfs_dispatch('USER_REDUCER', 'AUTH', {\r\n    AUTH      : data2\r\n  });\r\n\r\n  defaultOpen();\r\n}\r\n\r\nconst onActiveWindow = (e) => {\r\n  if(document.visibilityState === 'visible'){\r\n    gfs_dispatch('MASK_REDUCER', 'ON_ACTIVE', {\r\n      active : true,\r\n      time   : new Date()\r\n    });\r\n  }else{\r\n    gfs_dispatch('MASK_REDUCER', 'ON_ACTIVE', {\r\n      active : false,\r\n      time   : new Date()\r\n    });\r\n  }\r\n}\r\n\r\nconst defaultOpen = async() => {\r\n  \r\n    // const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n    // if(auth.length === undefined || auth.length === 0) return;\r\n\r\n    // const inspProc = auth.find(e => e.MENU_ID === 'INSP_PROC');\r\n    // if(inspProc !== null){\r\n    //   if(inspProc.PGMAUT_YN === 'Y'){\r\n    //     //검수대기 Open\r\n    //     gfs_PGM_REDUCER('INSP_PROC');\r\n    //     gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n    //     ({\r\n    //       windowZindex: 0,\r\n    //       activeWindow: {programId: 'INSP_PROC',\r\n    //                       programNam: '검수진행'\r\n    //                     }\r\n    //     }));\r\n    //   }\r\n    // }\r\n\r\n    // await gfc_sleep(500);\r\n\r\n    // const inspHist = auth.find(e => e.MENU_ID === 'INSP_HIST');\r\n    // if(inspHist !== null){\r\n    //   if(inspHist.PGMAUT_YN === 'Y'){\r\n    //     //검수이력 Open\r\n    //     gfs_PGM_REDUCER('INSP_HIST');\r\n    //     gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n    //     ({\r\n    //       windowZindex: 1,\r\n    //       activeWindow: {programId: 'INSP_HIST',\r\n    //                       programNam: '검수이력'\r\n    //                     }\r\n    //     }));\r\n    //   }\r\n    // }\r\n\r\n    // await gfc_sleep(500);\r\n\r\n    // const dispProc = auth.find(e => e.MENU_ID === 'DISP_PROC');\r\n    // if(dispProc !== null){\r\n    //   if(dispProc.PGMAUT_YN === 'Y'){\r\n    //     //출차대기 Open\r\n    //     gfs_PGM_REDUCER('DISP_PROC');\r\n    //     gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n    //     ({\r\n    //       windowZindex: 2,\r\n    //       activeWindow: {programId: 'DISP_PROC',\r\n    //                       programNam: '출차대기'\r\n    //                     }\r\n    //     }));\r\n    //   }\r\n    // }\r\n\r\n    // await gfc_sleep(500);\r\n\r\n    // const entrProc = auth.find(e => e.MENU_ID === 'ENTR_PROC');\r\n    // if(entrProc !== null){\r\n    //   if(entrProc.PGMAUT_YN === 'Y'){\r\n    //     //입차대기 Open\r\n    //     gfs_PGM_REDUCER('ENTR_PROC');\r\n    //     gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n    //     ({\r\n    //       windowZindex: 3,\r\n    //       activeWindow: {programId: 'ENTR_PROC',\r\n    //                       programNam: '입차대기'\r\n    //                     }\r\n    //     }));\r\n    //   }\r\n    // }\r\n\r\n    // await gfc_sleep(500);\r\n\r\n    // if(inspProc !== null){\r\n    //   if(inspProc.PGMAUT_YN === 'Y'){\r\n\r\n    //     gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n    //     ({\r\n    //       windowZindex: 0,\r\n    //       activeWindow: {programId: 'INSP_PROC',\r\n    //                       programNam: '검수진행'\r\n    //                     }\r\n    //     }));\r\n    //   }\r\n    // }\r\n}\r\n\r\nconst Home = (props) => {  \r\n  const user_id = getSessionCookie('login');\r\n\r\n\r\n  // const session = getSessionCookie('session');\r\n  // if (session === 'SUCCESS')\r\n  // {\r\n    // isSession = true;\r\n  // }\r\n  \r\n  useEffect(e => {\r\n\r\n    if(user_id === ''){\r\n      alert('로그인부터 해주세요.');\r\n      window.location.replace('http://ims.yksteel.co.kr:90');\r\n      // window.location.replace('http://localhost:4000');\r\n      return;\r\n    }\r\n\r\n    const MASK_REDUCER = (nowState, action) => {\r\n      if(action.reducer !== 'MASK_REDUCER') {\r\n        return {\r\n          MASK     : nowState === undefined ? false : nowState.MASK,\r\n          ON_ACTIVE: nowState === undefined ? {\r\n            active : true,\r\n            time   : new Date() \r\n          } : nowState.ON_ACTIVE,\r\n        };\r\n      }\r\n      \r\n      if(action.type === 'ON_ACTIVE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ON_ACTIVE : {\r\n            active: action.active,\r\n            time  : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'MASK'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MASK : action.MASK\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('MASK_REDUCER', MASK_REDUCER);\r\n    document.onvisibilitychange = e => onActiveWindow(e);\r\n\r\n    //#region 윈도우 리듀서 생성\r\n    gfs_WINDOWFRAME_REDUCER();\r\n    //#endregion\r\n\r\n    defaultData(user_id);\r\n\r\n\r\n    // return() => {\r\n    //   setSessionCookie('login', '');\r\n    //   console.log('Tmy')\r\n    // }\r\n  }, [])\r\n\r\n  const leftWindow = useSelector((e) => e.SIDEBARMENU_REDUCER.State, (p, n) => {\r\n    return p.open === n.open;\r\n  });\r\n\r\n  const MASK = useSelector((e) => {\r\n    if(e.MASK_REDUCER !== undefined){\r\n      return e.MASK_REDUCER.MASK;\r\n    }else{\r\n      return false;\r\n    }\r\n  }, (p, n) => {\r\n    return p === n;\r\n  });\r\n\r\n  const windowState = useSelector((e) => {\r\n    if(e.WINDOWFRAME_REDUCER === undefined) {\r\n      return null;\r\n    }else{\r\n      return e.WINDOWFRAME_REDUCER.windowState\r\n    }\r\n  }, (p, n) => {\r\n    return (p === null ? 0 : p.length) === (n === null ? 0 : n.length)\r\n  });\r\n\r\n  // const SideBarMenuState = useSelector((e) => e.SIDEBARMENU_REDUCER.State, (p, n) => {\r\n  //   return JSON.stringify(p) === JSON.stringify(n);\r\n  // });\r\n\r\n  // const width = SideBarMenuState[0].width;\r\n\r\n  let width = 343; \r\n  if(leftWindow.open) width = 90;\r\n\r\n  return (\r\n    \r\n    <LoadingOverlay\r\n      active={MASK}\r\n      spinner={<GifPlayer height='100' width='100' gif={require('../src/Image/waitImage.gif').default} autoplay={MASK ? true : false}/>}\r\n      styles={{\r\n        overlay: (base) => ({\r\n          ...base,\r\n          background: 'transparent'\r\n        })\r\n      }}\r\n    >\r\n      <div style={{display:'inline-block', height:'100%'}} >\r\n        <SideBarMenuMain />\r\n      </div>\r\n      \r\n      <div style={{display:'inline-block', paddingRight:'17px', transition:'all 0.2s ease-in-out', position:'absolute', left:width, right:0, height:'100%'}}>\r\n        <div style={{display:'flex', flexDirection:'column', height:'100vh'}}>\r\n          <div style={{height:80}}>\r\n            <TabList />\r\n          </div>\r\n          <div style={{flex:1, display:'flex'}}> \r\n            <div style={{float:'left', width:'100%', position:'relative', zIndex:0, overflow:'hidden'}}>\r\n              {windowState != null &&\r\n                windowState.map(e => \r\n                  <WindowFrame key={e.programId} programId={e.programId} programNam={e.programNam}/>\r\n                )\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n        \r\n    </LoadingOverlay>\r\n  );\r\n};\r\n\r\nexport default Home;","D:\\Project\\01.YK\\react\\src\\Login.js",[],"D:\\Project\\01.YK\\react\\src\\Cookies.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\WindowFrame.js",["643","644","645"],"import React, { useMemo, useState, useEffect } from 'react';\r\nimport { Rnd } from 'react-rnd';\r\nimport { useSelector } from 'react-redux';\r\nimport { gfs_getStoreValue, gfs_dispatch } from '../Method/Store';\r\nimport PropTypes from 'prop-types';\r\nimport './WindowFrame.css';\r\nimport { jsonMaxValue, jsonRtn } from '../JSON/jsonControl';\r\nimport { getDynamicSql_Oracle } from '../db/Oracle/Oracle';\r\nimport { gfc_set_oracle_column } from '../Method/Comm';\r\n\r\n//#region 이벤트 정의\r\nconst onWindowClick = (programId, programNam) => {\r\n  \r\n  gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n    ({\r\n      windowZindex: 0,\r\n      activeWindow: {programId,\r\n                     programNam\r\n                    }\r\n    })\r\n  );\r\n};\r\n\r\nconst onWindowCloseClick = (programId) => {\r\n  gfs_dispatch('WINDOWFRAME_REDUCER', 'CLOSEWINDOW', \r\n    ({\r\n      activeWindow: {programId\r\n                    }\r\n    })\r\n  );\r\n\r\n  gfs_dispatch(programId, 'DELPGM'\r\n  );\r\n\r\n  let maxZindex = jsonMaxValue(gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState'), 'windowZindex');\r\n  let selJson = jsonRtn(gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState'), 'windowZindex', maxZindex);\r\n  \r\n  if(selJson !== undefined){\r\n    gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n      ({\r\n        windowZindex: 0,\r\n        activeWindow: {programId : selJson[0]['programId'],\r\n                       programNam: selJson[0]['programNam']\r\n                      }\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\nconst onResizeClick = (type, programId, programNam) => {\r\n  gfs_dispatch('WINDOWFRAME_REDUCER', type, \r\n    ({\r\n      windowZindex: 0,\r\n      activeWindow: {programId,\r\n                     programNam\r\n                    }\r\n    })\r\n  );\r\n};\r\n\r\nconst onResize = (programId, programNam) => {\r\n  gfs_dispatch('WINDOWFRAME_REDUCER', 'RESIZESTART', \r\n    ({\r\n      windowZindex: 0,\r\n      activeWindow: {programId,\r\n                     programNam\r\n                    },\r\n      resizing    : true\r\n    })\r\n  );\r\n};\r\n\r\nconst onResizeStop = (width, height, x, y, programId, programNam) => {\r\n  gfs_dispatch('WINDOWFRAME_REDUCER', 'RESIZEWINDOW', \r\n    ({\r\n      windowZindex: 0,\r\n      activeWindow: {programId,\r\n                     programNam\r\n                    },\r\n      width       : width,\r\n      height      : height,\r\n      X           : x,\r\n      Y           : y,\r\n      resizing    : false\r\n    })\r\n  );\r\n};\r\n\r\nconst onDrag = (programId, programNam, width) => {\r\n  if(width !== '100%'){  \r\n    gfs_dispatch('WINDOWFRAME_REDUCER', 'DRAGSTART', \r\n      ({\r\n        windowZindex: 0,\r\n        activeWindow: {programId,\r\n                      programNam\r\n                      },\r\n        dragging    : true\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\nconst onDragStop = (x, y, width, programId, programNam) => {\r\n  if(width !== '100%'){\r\n    gfs_dispatch('WINDOWFRAME_REDUCER', 'DRAGWINDOW', \r\n      ({\r\n        windowZindex: 0,\r\n        activeWindow: {programId,\r\n                       programNam\r\n                      },\r\n        X           : x,\r\n        Y           : y,\r\n        dragging    : false\r\n      })\r\n    );\r\n  }\r\n};\r\n//#endregion\r\n\r\nconst getMenu = async(programId, programNam) => {\r\n  \r\n}\r\n\r\nconst applyWindow = async (programId, programNam) => {\r\n  // if(programId === 'ED000') return <PgmTest pgm={programId} nam={programNam}/>\r\n  // else if (programId === 'ED010') return <PgmTest2 pgm={programId} nam={programNam}/>\r\n  // else if (programId === 'ED050') return <Menu pgm={programId} nam={programNam}/>\r\n\r\n  let result = await getDynamicSql_Oracle(\r\n    'Common/Common',\r\n    'MENU_AUTH',\r\n    [{programId}]\r\n  ); \r\n\r\n  let data = gfc_set_oracle_column(result);\r\n  if(data.length > 0){\r\n    const pgm = require(`../Program/${data[0].PGM_ROOT}`);\r\n    return <pgm.default pgm={programId} nam={programNam} />\r\n  }else{\r\n    return null;\r\n  }\r\n  \r\n\r\n  // if(programId === 'COMM'){\r\n  //   const pgm = require(`../Program/COMM/${programId}/${programId}.js`);\r\n  //   return <pgm.default pgm={programId} nam={programNam} />\r\n  // }else if(programId === 'MENU'){\r\n  //   const pgm = require(`../Program/COMM/${programId}/${programId}.js`);\r\n  //   return <pgm.default pgm={programId} nam={programNam} />\r\n  // }else if(programId === 'AUTH'){\r\n  //   const pgm = require(`../Program/COMM/${programId}/${programId}.js`);\r\n  //   return <pgm.default pgm={programId} nam={programNam} />\r\n  // }else if(programId === 'USER'){\r\n  //   const pgm = require(`../Program/COMM/${programId}/${programId}.js`);\r\n  //   return <pgm.default pgm={programId} nam={programNam} />\r\n  // }else{\r\n  //   const pgm = require(`../Program/IMS/${programId}/${programId}.js`);\r\n  \r\n  //   return <pgm.default pgm={programId} nam={programNam} />\r\n  // }\r\n}\r\n\r\nconst WindowFrame = (props) => {\r\n  const [window, setWindow] = useState(null);\r\n  // const window = useMemo(() => applyWindow(props.programId, props.programNam), [props.programId, props.programNam])\r\n\r\n  useEffect(() => {\r\n    applyWindow(props.programId, props.programNam).then(e => {\r\n      setWindow(e);\r\n    })\r\n  }, [props.programId, props.programNam])\r\n\r\n  if(window !== null){\r\n    \r\n  }\r\n  const windowState = useSelector((e) => e.WINDOWFRAME_REDUCER.windowState, (p, n) => {\r\n    // return JSON.stringify(p) === JSON.stringify(n);\r\n    const before = jsonRtn(n, 'programId', props.programId);\r\n    const after = jsonRtn(p, 'programId', props.programId);\r\n    \r\n    let result = true;\r\n\r\n    if(before[0].programId !== after[0].programId) result = false;\r\n    else if(before[0].windowZindex !== after[0].windowZindex) result = false;\r\n    else if(before[0].windowWidth !== after[0].windowWidth) result = false;\r\n    else if(before[0].windowHeight !== after[0].windowHeight) result = false;\r\n    else if(before[0].X !== after[0].X) result = false;\r\n    else if(before[0].Y !== after[0].Y) result = false;\r\n    else if(before[0].resizing !== after[0].resizing) result = false;\r\n    else if(before[0].dragging !== after[0].dragging) result = false;\r\n\r\n    return result\r\n  });\r\n\r\n  const activeWindow = useSelector((e) => e.WINDOWFRAME_REDUCER.activeWindow, (p, n) => {\r\n    return p.programId === n.programId;\r\n  });\r\n  \r\n  const thisValue = jsonRtn(windowState, 'programId', props.programId);\r\n\r\n  if(thisValue !== undefined && window !== null){\r\n    const windowWidth  = thisValue[0]['windowWidth'];\r\n    const windowHeight = thisValue[0]['windowHeight'];\r\n    const x  = thisValue[0]['X'];\r\n    const y = thisValue[0]['Y'];\r\n    const isWindow = (activeWindow['programId'] === props.programId) ? true : false;\r\n    const resizing = thisValue[0]['resizing'];\r\n    const dragging = thisValue[0]['dragging'];\r\n\r\n    \r\n    return (\r\n      <Rnd\r\n        default={{\r\n          x: 0,\r\n          y: 0,\r\n          width: '100%',\r\n          height: '100%'\r\n        }}\r\n        size={{\r\n          width: windowWidth,\r\n          height: windowHeight\r\n        }}\r\n        position={{\r\n          x: x,\r\n          y: y\r\n        }}\r\n        style={{zIndex: thisValue[0]['windowZindex']}}\r\n        minWidth={60}\r\n        minHeight={60}\r\n        bounds='parent'\r\n        // enableResizing= {windowWidth === '100%' ? false : true}\r\n        enableResizing={false}\r\n        dragHandleClassName='win_header'\r\n        onResize={() => onResize(props.programId, props.programNam)}\r\n        onResizeStop= {(e, dir, ref, delta, position) => onResizeStop(delta.width, delta.height, position.x, position.y, props.programId, props.programNam)}\r\n        onDrag={() => onDrag(props.programId, props.programNam, windowWidth)}\r\n        onDragStop= {(e, data) => onDragStop(data.x, data.y, windowWidth, props.programId, props.programNam) }>\r\n \r\n        <div style={{width:'100%', boxShadow: isWindow && '0px 1px 5px 1px gray',\r\n                     borderStyle: ((resizing || dragging) && windowWidth !== '100%') && 'dotted', \r\n                     borderColor: ((resizing || dragging) && windowWidth !== '100%') && 'gray'}} \r\n             className='content'\r\n             onMouseUp={(e) => onWindowClick(props.programId, props.programNam)}>\r\n        \r\n          <div className='win_header' style={{cursor:'move'}}\r\n              //  onDoubleClick={(e) => onResizeClick(windowWidth === '100%' ? 'MINIMIZEWINDOW' : 'MAXIMIZEWINDOW', props.programId, props.programNam)}\r\n               >\r\n            <h4>[{props.programId}] {props.programNam}</h4>\r\n            \r\n            <div className='win_controller'>\r\n              {/* <button type='button' className='min'\r\n                      onMouseDown={e => e.stopPropagation()}>\r\n              </button>\r\n              \r\n              <button type='button' className='max'\r\n                      onClick={() => onResizeClick(windowWidth === '100%' ? 'MINIMIZEWINDOW' : 'MAXIMIZEWINDOW', props.programId, props.programNam)}  \r\n                      onMouseDown={e => e.stopPropagation()}>\r\n              </button> */}\r\n\r\n              <button type='button' className='close' \r\n                      onClick={() => onWindowCloseClick(props.programId)}\r\n                      onMouseDown={e => e.stopPropagation()} >\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* <div className='win_body' style={{position:'relative', display: ((resizing || dragging) && windowWidth !== '100%') && 'none'}}> */}\r\n          <div className='win_body' style={{display: ((resizing || dragging) && windowWidth !== '100%') && 'none'}}>\r\n            {/* <PgmTest pgm={props.programId} nam={props.programNam}/> */}\r\n            {window !== null && window}\r\n          </div>\r\n        </div>\r\n        \r\n      </Rnd>\r\n    );\r\n  }else{\r\n    return null;\r\n  }\r\n};\r\n\r\nWindowFrame.propTypes = {\r\n  programId: PropTypes.string.isRequired\r\n};\r\n\r\nWindowFrame.defaultProps = {\r\n\r\n};\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps) (WindowFrame);\r\n//커넥트 사용시 RND가 적용되지 않아서 커넥트 없이 리덕스 사용.\r\nexport default WindowFrame;","D:\\Project\\01.YK\\react\\src\\WebReq\\WebReq.js",[],"D:\\Project\\01.YK\\react\\src\\Method\\Store.js",[],"D:\\Project\\01.YK\\react\\src\\Method\\Component.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\Input.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Menu\\tabMenu\\TabList.js",["646"],"import React, { useState, useRef } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport TabListItem from './TabListItem';\r\nimport { gfc_sleep, gfc_set_oracle_column } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue } from '../../../Method/Store';\r\nimport { getDynamicSql_Oracle } from '../../../db/Oracle/Oracle';\r\n\r\nasync function onClick(flag, e){\r\n  if(e.target.parentNode.disabled) return;\r\n\r\n  // 1. Retrieve\r\n  // 2. Insert\r\n  // 3. Delete\r\n  // 4. Save\r\n  // 5. Init\r\n  // 6. Print\r\n  // 7. DtlInsert\r\n  // 8. DtlDelete\r\n  if(gfs_getStoreValue('WINDOWFRAME_REDUCER') === undefined) return;\r\n\r\n  // const pgm = store.getState().WINDOWFRAME_REDUCER.activeWindow['programId'];\r\n  // const window = store.getState().WINDOWFRAME_REDUCER.windowState.filter(e => e.programId === pgm)\r\n  const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER').activeWindow['programId'];\r\n  const window = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === pgm)\r\n\r\n  if(window.length === 0){\r\n    return;\r\n  }\r\n  \r\n  if(flag !== 1 && flag !== 5 && flag !== 3 && flag !== 7){\r\n    gfs_getStoreValue(pgm, 'Grid').map(e => \r\n      e.Grid.finishEditing()\r\n    );\r\n\r\n    await gfc_sleep(50);\r\n  }\r\n\r\n  if(flag === 1){\r\n    if(window[0].Retrieve !== undefined){\r\n      window[0].Retrieve();\r\n    }\r\n  }else if(flag === 2){\r\n    if(window[0].Insert !== undefined){\r\n      window[0].Insert();\r\n    }\r\n  }else if(flag === 3){\r\n    if(window[0].Delete !== undefined){\r\n      window[0].Delete();\r\n    }\r\n  }else if(flag === 4){\r\n    if(window[0].Save !== undefined){\r\n      window[0].Save();\r\n    }\r\n  }else if(flag === 5){\r\n    if(window[0].Init !== undefined){\r\n      window[0].Init();\r\n    }\r\n  }else if(flag === 6){\r\n    if(window[0].Print !== undefined){\r\n      window[0].Print();\r\n    }\r\n  }else if(flag === 7){\r\n    if(window[0].DtlInsert !== undefined){\r\n      window[0].DtlInsert();\r\n    }\r\n  }else{\r\n    if(window[0].DtlDelete !== undefined){\r\n      window[0].DtlDelete();\r\n    }\r\n  }\r\n}\r\n\r\nconst TabList = (props) => {\r\n  const insRef = useRef();\r\n  const dtlInsRef = useRef();\r\n  const dtlDelRef = useRef();\r\n  const savRef = useRef();\r\n  const delRef = useRef();\r\n  const retRef = useRef();\r\n\r\n  const windowState = useSelector((e) => {\r\n    if(e.WINDOWFRAME_REDUCER === undefined) {\r\n      return null\r\n    }else{\r\n      return e.WINDOWFRAME_REDUCER.windowState\r\n    }\r\n  }, (p, n) => {\r\n    return (p === null ? 0 : p.length) === (n === null ? 0 : n.length)\r\n  });\r\n\r\n  const activeWindow = useSelector((e) => {\r\n    if(e.WINDOWFRAME_REDUCER === undefined) {\r\n      return null\r\n    }else{\r\n      return e.WINDOWFRAME_REDUCER.activeWindow\r\n    }\r\n  }, (p, n) => {\r\n    return ((p === null || p === undefined) ? 0 : p.programId) === ((n === null || n === undefined) ? 0 : n.programId)\r\n  });\r\n\r\n  const authSelect = async(programId) => {\r\n    if(programId === undefined){\r\n      insRef.current.disabled = false;\r\n      dtlInsRef.current.disabled = false;\r\n      delRef.current.disabled = false;\r\n      dtlDelRef.current.disabled = false;\r\n      savRef.current.disabled = false;\r\n      retRef.current.disabled = false;\r\n\r\n      return;\r\n    }\r\n\r\n    let result = await getDynamicSql_Oracle(\r\n      'Common/Common',\r\n      'MENU_AUTH',\r\n      [{programId}]\r\n    ); \r\n\r\n    let data = gfc_set_oracle_column(result);\r\n    let auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n\r\n    if(auth.length !== undefined){\r\n      if(data[0].INSAUT_YN === 'Y'){\r\n        const eachAuth = auth.find(e => e.MENU_ID === programId);\r\n        if(eachAuth !== null){\r\n          if(eachAuth.INSAUT_YN === 'Y'){\r\n            insRef.current.disabled = false;\r\n            dtlInsRef.current.disabled = false;\r\n          }else{\r\n            insRef.current.disabled = true;\r\n            dtlInsRef.current.disabled = true;\r\n          }\r\n        }\r\n      }else{\r\n        insRef.current.disabled = true;\r\n        dtlInsRef.current.disabled = true;\r\n      }\r\n\r\n      if(data[0].DELAUT_YN === 'Y'){\r\n        const eachAuth = auth.find(e => e.MENU_ID === programId);\r\n        if(eachAuth !== null){\r\n          if(eachAuth.DELAUT_YN === 'Y'){\r\n            delRef.current.disabled = false;\r\n            dtlDelRef.current.disabled = false;\r\n          }else{\r\n            delRef.current.disabled = true;\r\n            dtlDelRef.current.disabled = true;\r\n          }\r\n        }\r\n      }else{\r\n        delRef.current.disabled = true;\r\n        dtlDelRef.current.disabled = true;\r\n      }\r\n\r\n      if(data[0].SAVAUT_YN === 'Y'){\r\n        const eachAuth = auth.find(e => e.MENU_ID === programId);\r\n        if(eachAuth !== null){\r\n          if(eachAuth.SAVAUT_YN === 'Y'){\r\n            savRef.current.disabled = false;\r\n          }else{\r\n            savRef.current.disabled = true;\r\n          }\r\n        }\r\n      }else{\r\n        savRef.current.disabled = true;\r\n      }\r\n\r\n      if(data[0].RETAUT_YN === 'Y'){\r\n        const eachAuth = auth.find(e => e.MENU_ID === programId);\r\n        if(eachAuth !== null){\r\n          if(eachAuth.RETAUT_YN === 'Y'){\r\n            retRef.current.disabled = false;\r\n          }else{\r\n            retRef.current.disabled = true;\r\n          }\r\n        }\r\n      }else{\r\n        retRef.current.disabled = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  if(activeWindow !== null){\r\n    authSelect(activeWindow.programId);\r\n  }\r\n\r\n  return (\r\n    <div className='content'>\r\n      <div className='header'>\r\n        <div className='tabs'>\r\n          <ul className='list'>\r\n            {windowState !== null &&\r\n              windowState.sort((a, b) => {\r\n                if (a.makeDttm.valueOf() >= b.makeDttm.valueOf()) {\r\n                  return 1;\r\n                }else{\r\n                  return -1;\r\n                }\r\n              }).map((e) => \r\n                <TabListItem key={e.programId}\r\n                             programId={e.programId}\r\n                             programNam={e.programNam}/>\r\n              )\r\n            }\r\n          </ul>\r\n        </div>\r\n        <div className='common_btns'>\r\n          <button ref={insRef}    type='button' className='save'  onClick={(e) => onClick(2, e)} ><span>추가</span></button>\r\n          <button ref={dtlInsRef} type='button' className='save'  onClick={(e) => onClick(7, e)} ><span>상세추가</span></button>\r\n          <button ref={dtlDelRef} type='button' className='save'  onClick={(e) => onClick(8, e)} ><span>상세삭제</span></button>\r\n          <button ref={savRef}    type='button' className='save' onClick={(e) => onClick(4, e)} ><span>저장</span></button>\r\n          <button ref={delRef}    type='button' className='del'   onClick={(e) => onClick(3, e)} ><span>삭제</span></button>\r\n          <button ref={retRef}    type='button' className='search' onClick={(e) => onClick(1, e)} ><span>조회</span></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TabList; ","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuMain.js",["647"],"import React, { useEffect, useState } from 'react';\r\nimport '../Menu.css';\r\nimport { useSelector } from 'react-redux';\r\nimport { gfs_dispatch, gfs_injectAsyncReducer } from '../../../Method/Store';\r\nimport { gfc_set_oracle_column } from '../../../Method/Comm';\r\nimport { getDynamicSql_Oracle } from '../../../db/Oracle/Oracle';\r\nimport Li from './SideBarMainView';\r\nimport Title from './SideBarMenuTitle';\r\nimport SideBarMainList from './SideBarMainList';\r\nimport SideBarUserName from './SideBarUserName';\r\n\r\n//#region 리듀서 생성\r\nconst sidebarmenuReducer = (nowState, action) => {\r\n\r\n  if(action.reducer !== 'SIDEBARMENU_REDUCER') {\r\n    return {\r\n      State: nowState === undefined ? {open: true, index: '', MENU_ID:'', nam: ''} : nowState.State\r\n    };\r\n  }\r\n\r\n  if(action.type === 'INIT'){\r\n    return Object.assign({}, nowState, {\r\n      State : {'open'   : action.open,\r\n               'index'  : action.index,\r\n               'MENU_ID': action.MENU_ID,\r\n               'nam'    : action.nam\r\n              }\r\n    })\r\n  }else if(action.type === 'MENUOPEN'){\r\n    const menuOpen = action.open === undefined ? (nowState.State.open ? false : true) : action.open;\r\n\r\n    return Object.assign({}, nowState, {\r\n      State : {'open'   : menuOpen,\r\n               'index'  : nowState.State.index,\r\n               'MENU_ID': nowState.State.MENU_ID,\r\n               'nam'    : nowState.State.nam\r\n              }\r\n    })\r\n  }else if(action.type === 'MENUCLICK'){\r\n    return Object.assign({}, nowState, {\r\n      State : {'open'   : nowState.State.open,\r\n               'index'  : action.index,\r\n               'MENU_ID': action.MENU_ID,\r\n               'nam'    : action.nam\r\n              }\r\n    })\r\n  }\r\n};\r\n//#endregion\r\ngfs_injectAsyncReducer('SIDEBARMENU_REDUCER', sidebarmenuReducer);\r\n\r\n//#region 이벤트\r\n\r\nconst onClick = (e) => {\r\n  gfs_dispatch('SIDEBARMENU_REDUCER', 'MENUOPEN');\r\n  e.target.blur();\r\n};\r\n\r\n//#endregion\r\n\r\nconst SideBarMenu = (props) => {\r\n  const [mainMenu, setMainMenu] = useState([]);\r\n  const [commMenu, setCommMenu] = useState([]);\r\n\r\n  const SideBarMenuState = useSelector((e) => e.SIDEBARMENU_REDUCER.State, (p, n) => {\r\n    return p.open === n.open;\r\n  });\r\n\r\n  const user_nam = useSelector((e) => {\r\n    if(e['USER_REDUCER'] === undefined){\r\n      return '';\r\n    }else{\r\n      return e['USER_REDUCER'].USER_NAM;\r\n    }\r\n  }, (p, n) => {\r\n    return p.USER_NAM === n.USER_NAM;\r\n  });\r\n\r\n  const menuOpen = SideBarMenuState.open;\r\n\r\n  const MENU_1 = async() => {\r\n    let result = await getDynamicSql_Oracle(\r\n      'Common/Common',\r\n      'MENU_1',\r\n      [{}]\r\n    ); \r\n\r\n    let menu = [];\r\n    let commMenu = [];\r\n    let data = gfc_set_oracle_column(result);\r\n\r\n    for(let i = 0; i < data.length; i++){\r\n      if(data[i].COMM_DTL_CD === 'COMM'){\r\n        commMenu.push(\r\n          <Li key={data[i].COMM_DTL_CD} MENU_ID={data[i].COMM_DTL_CD} index={data[i].SORT_SEQ} nam={data[i].COMM_DTL_NAM} />\r\n        )\r\n      }else{\r\n        menu.push(\r\n          <Li key={data[i].COMM_DTL_CD} MENU_ID={data[i].COMM_DTL_CD} index={data[i].SORT_SEQ - 1} nam={data[i].COMM_DTL_NAM} />\r\n        )\r\n      }\r\n    }\r\n\r\n    setMainMenu(menu);\r\n    setCommMenu(commMenu);\r\n  }\r\n\r\n  useEffect(() => {\r\n    MENU_1();\r\n  }, [])\r\n\r\n  return (\r\n    <div className={menuOpen? 'sidebarmenu open' : 'sidebarmenu'} id='moveOpen'>\r\n      <div className='left_menu'>\r\n        <div className='fixed_menu'>\r\n          <h1><img src={require('../../../Image/yk_08@2x.png').default} alt='로고'/></h1>\r\n          <button htmlFor='menuIcon' type='button' className='hmenu' onClick={(e) => onClick(e)}/>\r\n          <ul>\r\n            { mainMenu }\r\n            {/* <Li MENU_ID='INSP' index='1' nam='검수'></Li>\r\n            <Li MENU_ID='DISP' index='2' nam='출차'></Li>\r\n            <Li MENU_ID='ENTR' index='3' nam='입차'></Li>\r\n            <Li MENU_ID='CFRM' index='4' nam='확정'></Li> */}\r\n          </ul>\r\n          <div className='footer_menu'>\r\n            <SideBarUserName />\r\n            <ul>\r\n              {/* <Li MENU_ID='COMM' index='5' nam='설정'></Li> */}\r\n              { commMenu }\r\n            </ul>\r\n            {/* <div className='setting'><span onClick={e => {\r\n\r\n              gfs_PGM_REDUCER('CAMR_SETTING');\r\n              gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n              ({\r\n                windowZindex: 0,\r\n                activeWindow: {programId: 'CAMR_SETTING',\r\n                                programNam: '카메라정보'\r\n                              }\r\n              }));\r\n            }}>옵션</span></div> */}\r\n          </div>\r\n        </div>\r\n        <div className='move_menu'>\r\n          <Title />\r\n\r\n          <div className='search_box'>\r\n            <input type='text' placeholder='메뉴명을 입력하세요' />\r\n          </div>\r\n\r\n          <div className='sub_menu'>\r\n            <SideBarMainList />\r\n          </div>\r\n        </div>\r\n      </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default SideBarMenu;","D:\\Project\\01.YK\\react\\src\\db\\Mysql\\Mysql.js",[],"D:\\Project\\01.YK\\react\\src\\db\\Mysql\\MysqlServer.js",[],"D:\\Project\\01.YK\\react\\src\\JSON\\jsonControl.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Menu\\tabMenu\\TabListItem.js",[],"D:\\Project\\01.YK\\react\\src\\Method\\Comm.js",["648"],"D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainView.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainList.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuTitle.js",[],"D:\\Project\\01.YK\\react\\src\\Method\\Grid.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\Combobox.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Image.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Input.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Combobox.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Grid.js",["649","650","651","652"],"//#region Import\r\nimport './CSS/Grid.css';\r\n// import './CSS/Date.css';\r\n// import './CSS/Time.css';\r\n// import 'tui-grid/dist/tui-grid.css';\r\nimport Draggable from 'react-draggable';\r\n\r\n// import Grid from 'tui-grid';\r\nimport Grid from '@toast-ui/react-grid';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { useEffect, useRef } from 'react';\r\nimport { gfs_getStoreValue, gfs_dispatch } from '../../Method/Store';\r\nimport { useResizeDetector } from 'react-resize-detector';\r\n\r\nimport { gfc_getMultiLang, gfc_getAtt, gfc_sleep } from '../../Method/Comm';\r\nimport { gfg_getGrid } from '../../Method/Grid';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { getCallSP_Mysql } from '../../db/Mysql/Mysql';\r\n//#endregion\r\n\r\nconst RtnGrid = (props) => {\r\n\r\n  let   frozenCount = props.frozenCount;\r\n  const columns = props.columns;\r\n\r\n  const setFrozenCount = (cnt) => {\r\n    frozenCount = cnt;\r\n  }\r\n\r\n  const onResize = (width, height) => {\r\n    const grid = gfg_getGrid(props.pgm, props.id);\r\n\r\n    if(grid){\r\n      try{\r\n        if(Object.keys(grid).length > 0){\r\n          // window.dispatchEvent(new Event('resize'));\r\n          grid.setWidth(width);\r\n          grid.setHeight(height);\r\n        }\r\n      }catch(err){\r\n        console.log(err)\r\n      }\r\n    }\r\n  };\r\n\r\n  //#region 헤더 설정\r\n  const setHeader = (columnId, columnNam, width, parent) => {\r\n    let elementResizeDetectorMaker = require('element-resize-detector');\r\n    let erd = elementResizeDetectorMaker();\r\n\r\n    const divMain = document.createElement('div');\r\n    divMain.style = `width: ${width}; height: 100%; top: 0; cursor:move; position: absolute; background: transparent;`;\r\n    parent.appendChild(divMain);\r\n\r\n    erd.listenTo(parent, function(element) {\r\n      let width = element.clientWidth;\r\n      divMain.style.width = width;\r\n    });\r\n\r\n    const divLeft = document.createElement('div');\r\n    divLeft.style = `width: 50%; height: 100%; float:left; top: 0; background: transparent;`;\r\n    divMain.appendChild(divLeft);\r\n\r\n    const divRight = document.createElement('div');\r\n    divRight.style = `width: 50%; height: 100%; float:left; top: 0; background: transparent;`;\r\n    divMain.appendChild(divRight);\r\n\r\n    ReactDOM.render(crtDraggable(columnId, 'LEFT', columnNam), divLeft);\r\n    ReactDOM.render(crtDraggable(columnId, 'RIGHT', columnNam), divRight);\r\n  }\r\n\r\n  const setHeaderEach = async (columnId, columnNam, width) => {\r\n    await gfc_sleep(200);        \r\n    \r\n    const header = gridRef.current.gridInst.el.querySelectorAll('div.tui-grid-header-area');   \r\n\r\n    header.forEach(e => {\r\n      const each = e.querySelectorAll('th.tui-grid-cell.tui-grid-cell-header');\r\n      each.forEach(e => {\r\n        if(e.dataset.columnName === columnId){\r\n          setHeader(columnId, columnNam, width, e);\r\n          return;\r\n        }\r\n      })\r\n    })\r\n  }\r\n  //#endregion\r\n\r\n  //#region 컬럼헤더 드래그\r\n  const crtDraggable = (columnId, LR, columnNam) => {\r\n    \r\n    let drg = <Draggable axis='x'\r\n                         handle={'.handle_' + LR}\r\n                         position={{x:0, y:0}}\r\n                         scale={1}\r\n                              \r\n                         onStop={(e1, e2) => {\r\n                           const fromId = e2.node.dataset.id;\r\n                           const toId = e1.target.dataset.id;\r\n                           const lr = e1.target.dataset.lr;\r\n\r\n                           if(fromId !== undefined){\r\n                             if(toId !== undefined){\r\n                               \r\n                               if(fromId !== toId){\r\n                                 const fromIndex = columns.findIndex(e => e.name === fromId);\r\n                                 let toIndex = columns.findIndex(e => e.name === toId);\r\n                                 if(lr === 'RIGHT') {\r\n                                   toIndex = toIndex + 1;\r\n                                 }\r\n      \r\n                                 const from = columns[fromIndex];\r\n                                 columns.splice(toIndex, 0, from);\r\n\r\n                                 if(fromIndex < toIndex){\r\n                                   for(let i = 0; i < columns.length; i++){\r\n                                     if(columns[i].name === from.name){\r\n                                       columns.splice(i, 1);\r\n                                       break;\r\n                                     }\r\n                                   }\r\n                                 }else{\r\n                                  for(let i = columns.length - 1; i >= 0; i--){\r\n                                    if(columns[i].name === from.name){\r\n                                      columns.splice(i, 1);\r\n                                      break;\r\n                                    }\r\n                                  }\r\n                                 }\r\n                                 \r\n                                 gridRef.current.getInstance().setColumns(columns);\r\n                               }\r\n                             }\r\n                          }\r\n                    }}\r\n                  >\r\n                  <div data-id={columnId} data-nam={columnNam} data-lr={LR} className={'handle_' + LR} style={{width:'99%', height:'100%'}} />\r\n                </Draggable>;\r\n    return drg;\r\n  }\r\n  //#endregion\r\n\r\n  //#region 컬럼 틀고정(해제)\r\n  const fixedFrame = (id, parent) => {\r\n    if(id === '_number') return;\r\n\r\n    let index = columns.findIndex(e => e.name === id);\r\n    \r\n    let nam = '틀고정';\r\n    if(frozenCount > 0){\r\n      if(frozenCount > index) nam = '틀고정해제';\r\n    }\r\n\r\n    const contextFixedUl = document.createElement('li');\r\n    contextFixedUl.innerHTML = gfc_getAtt(nam);\r\n    contextFixedUl.style = 'margin-top: 5px;';\r\n    contextFixedUl.onclick = e => {\r\n      //틀고정 해제인경우\r\n      if(frozenCount > index){\r\n        //1. 해당컬럼 확인\r\n        const from = columns[index];\r\n\r\n        //1-1. 기존컬럼삭제\r\n        columns.splice(index, 1); \r\n\r\n        //2. 틀고정 설정을 한다.\r\n        setFrozenCount(frozenCount - 1);\r\n        gridRef.current.getInstance().setFrozenColumnCount(frozenCount);\r\n\r\n        //2-1. 컬럼이동\r\n        columns.splice(frozenCount, 0, from);\r\n        gridRef.current.getInstance().setColumns(columns);\r\n        \r\n        setHeaderEach(from.name, from.header, from.width);\r\n      }else{\r\n        //1. 해당컬럼 확인\r\n        const from = columns[index];\r\n\r\n        //1-1. 기존컬럼삭제\r\n        columns.splice(index, 1);\r\n\r\n        //2. 틀고정 설정을 한다.\r\n        setFrozenCount(frozenCount + 1);\r\n        gridRef.current.getInstance().setFrozenColumnCount(frozenCount);\r\n\r\n        //2-1. 컬럼이동\r\n        columns.splice(frozenCount - 1, 0, from);\r\n        gridRef.current.getInstance().setColumns(columns);\r\n      }\r\n    }\r\n    \r\n    parent.appendChild(contextFixedUl);\r\n  }\r\n  //#endregion\r\n\r\n  //#region 컬럼숨김(해제)\r\n  const columnVisible = (id, parent) => {\r\n    if(id === '_number') return;\r\n    \r\n    const contextVisible = document.createElement('li');\r\n    contextVisible.innerHTML = gfc_getAtt('숨기기');\r\n    contextVisible.style = 'margin-top: 5px;';\r\n    contextVisible.onclick = () => {\r\n      const index = columns.findIndex(e => e.name === id);\r\n\r\n      //컬럼순서 때문에 숨김처리시 제일뒤로 보낸다.\r\n      const from = columns[index];\r\n\r\n      columns.splice(index, 1);\r\n      columns.splice(columns.length, 0, from);\r\n\r\n      gridRef.current.getInstance().hideColumn(id);\r\n      from.hidden = true;\r\n      gridRef.current.getInstance().setColumns(columns);\r\n\r\n      if(frozenCount > index){\r\n        setFrozenCount(frozenCount - 1);\r\n        gridRef.current.getInstance().setFrozenColumnCount(frozenCount);\r\n      }\r\n    }\r\n\r\n    parent.appendChild(contextVisible);\r\n\r\n    const hide = columns.filter(e => e.hidden);\r\n\r\n    if(hide.length > 0){\r\n\r\n      const contextShow = document.createElement('li');\r\n      contextShow.innerHTML = gfc_getAtt('숨기기 취소');\r\n      contextShow.style = 'margin-top: 5px;';\r\n\r\n      const contextShowUl = document.createElement('ul');\r\n      contextShowUl.style = 'margin-top: 5px;';\r\n      contextShow.appendChild(contextShowUl);\r\n\r\n      const onShow = (id, parentId) => {\r\n        \r\n        const index = columns.findIndex(e => e.name === id);\r\n        const parentIndex = columns.findIndex(e => e.name === parentId);\r\n        const from = columns[index];\r\n\r\n        columns.splice(index, 1);\r\n        columns.splice(frozenCount === 0 ? parentIndex + 1 : frozenCount, 0, from);\r\n\r\n        gridRef.current.getInstance().showColumn(id);\r\n        from.hidden = false;\r\n        gridRef.current.getInstance().setColumns(columns);\r\n\r\n        gridRef.current.getInstance().setFrozenColumnCount(frozenCount);\r\n        setHeaderEach(from.name, from.header, from.width);\r\n      }\r\n\r\n      for(let idx in hide){\r\n\r\n        const contextShowUlLi = document.createElement('li');\r\n        contextShowUlLi.innerHTML = gfc_getAtt(hide[idx].header);\r\n        contextShowUlLi.style = 'margin-top: 5px;';\r\n        contextShowUlLi.onclick = (e) => onShow(hide[idx].name, id);\r\n        contextShowUl.appendChild(contextShowUlLi);\r\n        \r\n        parent.appendChild(contextShow);\r\n      }\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region 그리드초기화\r\n  const resetGrid = (parent) => {\r\n\r\n    const contextInit = document.createElement('li');\r\n    contextInit.innerHTML = gfc_getAtt('설정초기화');\r\n    contextInit.onclick = () =>{\r\n\r\n      const CRTCHR_NO = gfs_getStoreValue('USER_REDUCER', 'USER_ID');\r\n      const PGM_ID    = props.pgm;\r\n      const GRID_ID   = props.id;\r\n\r\n      getCallSP_Mysql(\r\n        [{SP           : 'SP_PGM_GRID',\r\n          ROWSTATUS    : 'D',\r\n          PGM_ID,\r\n          GRID_ID,\r\n          GRID_COL_NAM : '',\r\n          HIDE_YN      : '',\r\n          LOCK_YN      : '',\r\n          WIDTH        : 0,\r\n          SEQ          : 0,\r\n          CRTCHR_NO\r\n        }]\r\n      ).then(\r\n        e => {\r\n          gridRef.current.getInstance().setColumns(props.columns);\r\n          gridRef.current.getInstance().setFrozenColumnCount(props.frozenCount);\r\n\r\n          if(e.data.result){\r\n  \r\n          }else{\r\n            if(e.data.MSG_CODE !== 'NO')\r\n              gfc_getMultiLang('dup', '그리드 설정시 오류가 발생했습니다. > ' + props.pgm + ', ' + props.id);\r\n          }\r\n        }\r\n      )\r\n    };\r\n\r\n    parent.appendChild(contextInit);\r\n  }\r\n  //#endregion\r\n\r\n  //#region 그리드 설정저장\r\n  const saveGrid = (parent) => {\r\n\r\n    const contextSave = document.createElement('li');\r\n    contextSave.innerHTML = gfc_getAtt('설정저장');\r\n    contextSave.style = 'margin-top: 5px;';\r\n\r\n    contextSave.onclick = () =>{\r\n\r\n      const CRTCHR_NO = gfs_getStoreValue('USER_REDUCER', 'USER_ID');\r\n      const PGM_ID    = props.pgm;\r\n      const GRID_ID   = props.id;\r\n      \r\n      let seq = 1;\r\n      const param = [];\r\n      columns.forEach(e => {\r\n        const GRID_COL_NAM = e.name;\r\n        const HIDE_YN      = e.hidden ? 'Y' : 'N';\r\n        const LOCK_YN      = frozenCount >= seq ? 'Y' : 'N';\r\n        const WIDTH        = e.width;\r\n        \r\n        param[seq - 1] = {SP           : 'SP_PGM_GRID',\r\n                          ROWSTATUS    : 'I',\r\n                          PGM_ID,\r\n                          GRID_ID,\r\n                          GRID_COL_NAM,\r\n                          HIDE_YN,\r\n                          LOCK_YN,\r\n                          WIDTH,\r\n                          SEQ          : seq,\r\n                          CRTCHR_NO\r\n                        }\r\n\r\n        seq = seq + 1;\r\n      })\r\n\r\n      getCallSP_Mysql(\r\n        param\r\n      ).then(\r\n        e => {\r\n          // console.log(e)\r\n          // gridRef.current.getInstance().setColumns(props.columns);\r\n          // gridRef.current.getInstance().setFrozenColumnCount(props.frozenCount);\r\n\r\n          if(e.data.result){\r\n            gfc_getMultiLang('OK', '저장되었습니다. > ' + props.pgm + ', ' + props.id);\r\n          }else{\r\n            gfc_getMultiLang('dup', '그리드 설정시 오류가 발생했습니다. > ' + props.pgm + ', ' + props.id);\r\n          }\r\n        }\r\n      )\r\n    };\r\n\r\n    parent.appendChild(contextSave);\r\n  }\r\n  //#endregion\r\n\r\n  const gridRef = useRef(null);\r\n  // eslint-disable-next-line no-unused-vars\r\n  const { width, height, ref } = useResizeDetector({onResize});\r\n\r\n  // const setFocusChange = () => {\r\n  //   gridRef.current.getInstance().on('focusChange', (e) => {\r\n  //     if(e.rowKey === e.prevRowKey){\r\n  //       return false;\r\n  //     }else{\r\n  //       // gridRef.current.getInstance().setSelectionRange({\r\n  //       //   start: [e.rowKey, 0],\r\n  //       //   end: [e.rowKey, gridRef.current.getInstance().getColumns().length - 1]\r\n  //       // });\r\n\r\n  //       if(props.selectionChange !== undefined)\r\n  //         props.selectionChange(gridRef.current.getInstance().getRow(e.rowKey));\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n  useEffect(() => {\r\n    if(gfg_getGrid(props.pgm, props.id) !== undefined){\r\n      gfc_getMultiLang('dup', '그리드 아이디 중복입니다. > ' + props.pgm + ', ' + props.id);\r\n      return \r\n    }\r\n\r\n    gridRef.current.getInstance().on('focusChange', (e) => {\r\n      if(e.rowKey === e.prevRowKey){\r\n        return false;\r\n      }else{\r\n        // gridRef.current.getInstance().setSelectionRange({\r\n        //   start: [e.rowKey, 0],\r\n        //   end: [e.rowKey, gridRef.current.getInstance().getColumns().length - 1]\r\n        // });\r\n\r\n        if(props.selectionChange !== undefined)\r\n          props.selectionChange(gridRef.current.getInstance().getRow(e.rowKey));\r\n      }\r\n    })\r\n\r\n    gridRef.current.getInstance().on('click', (e) => {\r\n      if(e.targetType === 'columnHeader'){\r\n        if(props.headerClick !== undefined){\r\n          props.headerClick(e);\r\n        }\r\n      }\r\n    })\r\n\r\n    gridRef.current.getInstance().on('afterChange', (e) => {\r\n      if(props.afterChange !== undefined)\r\n        props.afterChange(e.changes[0]);\r\n    })\r\n\r\n    gridRef.current.getInstance().on('dblclick', (e) => {\r\n      if(props.dblclick !== undefined){\r\n        if(e.targetType !== 'etc'){\r\n          props.dblclick(e.columnName);\r\n        }\r\n      }\r\n    })\r\n        \r\n    gfs_dispatch(props.pgm, 'INITGRID', \r\n      ({\r\n        Grid:{id  : props.id,\r\n              Grid: gridRef.current.getInstance(),\r\n              // focusEvent: setFocusChange\r\n        }\r\n      })\r\n    );\r\n\r\n    return() => {\r\n      gfs_dispatch(props.pgm, 'CLEARGRID', \r\n        ({\r\n          id: props.id\r\n        })\r\n      );\r\n    }\r\n\r\n    // const CRTCHR_NO = gfs_getStoreValue('USER_REDUCER', 'USER_ID');\r\n    // const PGM_ID    = props.pgm;\r\n    // const GRID_ID   = props.id;\r\n\r\n    // getCallSP_Mysql(\r\n    //   [{SP           : 'SP_PGM_GRID',\r\n    //     ROWSTATUS    : 'R',\r\n    //     PGM_ID,\r\n    //     GRID_ID,\r\n    //     GRID_COL_NAM : '',\r\n    //     HIDE_YN      : '',\r\n    //     LOCK_YN      : '',\r\n    //     WIDTH        : 0,\r\n    //     SEQ          : 0,\r\n    //     CRTCHR_NO\r\n    //   }]\r\n    // ).then(\r\n    //   e => {\r\n       \r\n    //     const header = gridRef.current.gridInst.el.querySelectorAll('div.tui-grid-header-area');   \r\n    \r\n    //     for(let idx = 0; idx < header.length; idx++){\r\n    //       header[idx].addEventListener('contextmenu', e => {\r\n    //         let id = e.target.dataset.id;\r\n    //         let nam = e.target.dataset.nam;\r\n    \r\n    //         if(id === undefined){\r\n    //           id = e.target.dataset.columnName;\r\n    //         }\r\n    \r\n    //         if(nam === undefined){\r\n    //           nam = columns.find(e => e.name === id);\r\n    //           if(nam !== undefined){\r\n    //             nam = nam.header;\r\n    //           }\r\n    //         }\r\n    \r\n    //         if(nam === undefined) return;\r\n    \r\n    //         e.preventDefault()\r\n            \r\n    //         const contextDiv = document.createElement('div');\r\n    //         contextDiv.id = props.pgm + '_' + props.id + '_contextmenu';\r\n    //         contextDiv.style = 'position:fixed;width:150px; background: #fff;box-shadow:1px 1px 5px 0 rgba(0, 0, 0, 0.54)';\r\n    \r\n    //         const fDiv = document.getElementById(contextDiv.id);\r\n    //         if(fDiv !== null){\r\n    //           document.body.removeChild(fDiv);\r\n    //         }\r\n    \r\n    //         document.addEventListener('click', () => {\r\n    //           const fDiv = document.getElementById(contextDiv.id);\r\n    //           if(fDiv !== null){\r\n    //             document.body.removeChild(fDiv);\r\n    //           }\r\n    //         }); \r\n    //         document.body.appendChild(contextDiv);\r\n            \r\n    //         const contextChild = document.createElement('input');\r\n    //         contextChild.style = 'width:148px; height:30; text-align:center; margin: 1 0 0 1';\r\n    //         contextChild.value = nam;\r\n    //         contextDiv.appendChild(contextChild);\r\n    \r\n    //         const contextUl = document.createElement('ul');\r\n    //         contextUl.style = 'width:148px; font-size:13;margin-top: 3px;';\r\n    //         contextDiv.appendChild(contextUl); \r\n    \r\n    //         //설정 초기화\r\n    //         resetGrid(contextUl);\r\n    \r\n    //         //설정 저장\r\n    //         saveGrid(contextUl);\r\n    \r\n    //         //틀고정\r\n    //         fixedFrame(id, contextUl);\r\n    \r\n    //         //숨김\r\n    //         columnVisible(id, contextUl);\r\n            \r\n    //         if(e.which === 3){\r\n    //           let x = e.pageX + 'px'; // 현재 마우스의 X좌표\r\n    //           let y = e.pageY + 'px'; // 현재 마우스의 Y좌표\r\n    //           contextDiv.style.left = x;\r\n    //           contextDiv.style.top = y;\r\n    //         }\r\n    //       });\r\n          \r\n    //       const each = header[idx].querySelectorAll('th.tui-grid-cell.tui-grid-cell-header');\r\n          \r\n    //       for(let j = 0; j < each.length; j++){\r\n    //         const columnId  = each[j].dataset.columnName;\r\n    //         const columnNam = each[j].innerText;\r\n    //         setHeader(columnId, columnNam, each[j].clientWidth, each[j]);\r\n    //       }\r\n    //     }\r\n\r\n    //     if(e.data.length > 0){\r\n    //       let frozen = 0;\r\n\r\n    //       e.data.forEach(e => {\r\n    //         const index = columns.findIndex(e1 => e1.name === e.GRID_COL_NAM);\r\n    //         const from = columns[index];\r\n\r\n    //         from.width  = e.WIDTH * 1;\r\n    //         from.hidden = e.HIDE_YN === 'N' ? false : true;\r\n\r\n    //         if(e.SEQ - 1 !== index){\r\n              \r\n    //           columns.splice(index, 1);\r\n    //           columns.splice(e.SEQ - 1, 0, from);\r\n    //           gridRef.current.getInstance().setColumns(columns);\r\n    //         }\r\n\r\n    //         if(e.LOCK_YN === 'Y') {\r\n    //           frozen = frozen + 1;\r\n    //         }\r\n    //       })\r\n\r\n    //       gridRef.current.getInstance().setFrozenColumnCount(frozen);\r\n    //       setFrozenCount(frozen);\r\n    //     }\r\n\r\n    //     if(e.data.result){\r\n\r\n    //     }else{\r\n    //       if(e.data.MSG_CODE !== 'NO')\r\n    //         gfc_getMultiLang('dup', '그리드 설정시 오류가 발생했습니다. > ' + props.pgm + ', ' + props.id);\r\n    //     }\r\n    //   }\r\n    // )    \r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return (\r\n    <> \r\n      <div ref={ref} style={{marginLeft: '8px', width:'calc(100% - 17px)', height: 'calc(100% - 10px)'}}>\r\n      {/* <div ref={ref} style={{width:'calc(100% - 10px)', height: 'calc(100% - 10px)', marginLeft: '5px', marginTop: '5px'}}> */}\r\n        \r\n        <Grid header        = {props.colHeader}\r\n              selectionUnit = 'row'\r\n              minRowHeight  = {props.rowHeight < 34 ? 34 : props.rowHeight}\r\n              rowHeight     = {props.rowHeight < 34 ? 34 : props.rowHeight}\r\n              bodyHeight    = 'fitToParent'\r\n              rowHeaders    = {props.rowHeaders !== null ? props.rowHeaders : undefined}\r\n              scrollX       = {true}\r\n\r\n              columns       = {props.columns}\r\n              columnOptions = {{\r\n                frozenCount: props.frozenCount\r\n              }}\r\n\r\n              ref           = {gridRef}\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nRtnGrid.propTypes = {\r\n  pgm        : PropTypes.string.isRequired,\r\n  id         : PropTypes.string.isRequired,\r\n  columns    : PropTypes.array.isRequired,\r\n  colHeader  : PropTypes.object,\r\n  rowHeight  : PropTypes.number,\r\n  rowHeader  : PropTypes.array,\r\n  frozenCount: PropTypes.number\r\n};\r\n\r\nRtnGrid.defaultProps = {\r\n  colHeader  :{\r\n    height:32\r\n  },\r\n  rowHeight  :34,\r\n  rowHeaders : [{ type: 'rowNum', width: 50 }],\r\n  frozenCount: 0\r\n};\r\n\r\nexport default RtnGrid;","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\TextArea.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\DetailDiv.js",[],["653","654"],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\SearchDiv.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\DateTime.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Number.js",[],"D:\\Project\\01.YK\\react\\src\\Method\\Popup.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\DateTime.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\Number.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetail.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Layout\\Layout.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetailComponent.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Popup\\PopupFrame.js",["655"],"D:\\Project\\01.YK\\react\\src\\Program\\POPUP\\PopupTest.js",["656"],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\TextArea.js",[],"D:\\Project\\01.YK\\react\\src\\db\\Oracle\\Oracle.js",[],"D:\\Project\\01.YK\\react\\src\\db\\Oracle\\OracleServer.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Checkbox.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Detailspan.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Mainspan.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Botspan.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\TabList.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\CAMR_SETTING\\CAMR_SETTING.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\Chit.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\ChitMemo.js",["657"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport TextArea from '../../../../Component/Control/TextArea';\r\nimport { gfs_dispatch } from '../../../../Method/Store';\r\nimport { gfo_getTextarea } from '../../../../Method/Component';\r\n\r\nfunction ChitMemo(props) {\r\n  const [focus, setFocus] = useState(false);\r\n  const textAreaRef = useRef();\r\n  const canvasRef = useRef();\r\n  \r\n  const value = useSelector((e) => {\r\n    return e[props.reducer].DETAIL_SCALE;\r\n  }, (p, n) => {\r\n    return p === n;\r\n  });\r\n\r\n  useEffect(e => {\r\n    // if(props.reducer !== 'INSP_PROC_MAIN') return;\r\n\r\n    // if(value.chit === 'N'){\r\n      gfo_getTextarea(props.pgm, 'chit_memo').setValue('');\r\n      let ctx = canvasRef.current.getContext(\"2d\");\r\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n      ctx.beginPath();\r\n    // }\r\n  }, [props.pgm, value])\r\n\r\n  const changeMemo = (e) => {\r\n    gfs_dispatch(props.reducer, 'CHIT_MEMO', {CHIT_MEMO: e.target.value});\r\n    drawTextBox(e.target.value, 4, 10, 305, 1.3)\r\n  }\r\n\r\n  const limitLine = (e) => {\r\n    const maxRows = textAreaRef.current.props.rows;\r\n    const spaces = textAreaRef.current.props.cols;\r\n    let lines = e.target.value.split('\\n');\r\n    for (var i = 0; i < lines.length; i++) \r\n    {\r\n      if (lines[i].length <= spaces) continue;\r\n\r\n      var j = 0;\r\n\r\n      var space = spaces;\r\n\r\n      while (j++ <= spaces) \r\n      {\r\n        if (lines[i].charAt(j) === \" \") space = j;  \r\n      }\r\n      \r\n      lines[i + 1] = lines[i].substring(space + 1) + (lines[i + 1] || \"\");\r\n      lines[i] = lines[i].substring(0, space);\r\n    }\r\n\r\n    if(lines.length > maxRows){\r\n      e.target.style.color = 'black';\r\n      setTimeout(function(){\r\n        e.target.style.color = 'red';\r\n      },200);\r\n    }    \r\n\r\n    e.target.value = lines.slice(0, maxRows).join(\"\\n\");\r\n    drawTextBox(e.target.value, 4, 10, 305, 1.2)\r\n  }\r\n  \r\n  function drawTextBox(text, x, y, fieldWidth, spacing) {\r\n    let ctx = canvasRef.current.getContext(\"2d\");\r\n    ctx.fillStyle = \"red\";  //<======= here\r\n    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n    ctx.beginPath();\r\n    ctx.font = '17px sans serif';\r\n    var line = \"\";\r\n    var currentY = y;\r\n    ctx.textBaseline = \"top\";\r\n    for(var i=0; i<text.length; i++) {\r\n      var tempLine = line + text[i];\r\n      var tempWidth = ctx.measureText(tempLine).width;\r\n   \r\n      if (tempWidth < fieldWidth && text[i] !== '\\n') {\r\n        line = tempLine;\r\n      }\r\n      else {\r\n        ctx.fillText(line, x, currentY);\r\n        if(text[i] !== '\\n') line = text[i];\r\n        else line = \"\";\r\n        currentY += 17 * spacing;\r\n      }\r\n    }\r\n    ctx.fillText(line, x, currentY);\r\n    // ctx.rect(x, y, fieldWidth, currentY-y+fontSize*spacing);\r\n    ctx.stroke();\r\n  }\r\n\r\n  return (\r\n    <>\r\n        <TextArea \r\n          ref={textAreaRef}\r\n          pgm={props.pgm} \r\n          id={props.id} \r\n          style={{display: focus === true ? 'block' : 'none', color:'red', fontSize:'18px'}}\r\n          rows={5} \r\n          cols={30}\r\n          wrap='soft' \r\n          defaultValue='' \r\n          onChange={e => changeMemo(e)} \r\n          // onKeyUp={e => limitLine(e)}\r\n          onBlur={e => {\r\n            setFocus(false)\r\n          }}\r\n        >\r\n        </TextArea> \r\n        <canvas \r\n          ref={canvasRef}\r\n          style={{width:'100%', height: '156px', display: focus === true ? 'none' : 'block'}}\r\n          onClick={e => setFocus(true)}>\r\n        </canvas> \r\n    </>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default ChitMemo;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\DISP_PROC\\CompleteBtn.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\DISP_PROC\\TabList.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\ENTR_PROC\\ENTR_PROC.js",["658","659","660"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_sleep } from '../../../Method/Comm';\r\nimport { gfs_injectAsyncReducer, gfs_dispatch, gfs_getStoreValue } from '../../../Method/Store';\r\nimport { gfg_getGrid, gfg_setSelectRow, gfg_appendRow } from '../../../Method/Grid';\r\nimport { gfo_getCombo, gfo_getInput } from '../../../Method/Component';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Combobox as columnCombobox }  from '../../../Component/Grid/Column/Combobox';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\nimport Botspan from '../Common/Botspan';\r\n\r\nimport { YK_WEB_REQ } from '../../../WebReq/WebReq';\r\n//#endregion\r\n\r\nclass ENTR_PROC extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const ENTR_PROC_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'ENTR_PROC_MAIN') {\r\n        return {\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n        };\r\n      }\r\n\r\n      if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('ENTR_PROC_MAIN', ENTR_PROC_MAIN);\r\n    //#endregion\r\n  }\r\n\r\n  \r\n  mainGrid = () => {\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n\r\n    YK_WEB_REQ(`tally_mstr_drive.jsp`).then(e => {\r\n      const main = e.data.dataSend;\r\n\r\n      if(main){\r\n        const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n        const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n    \r\n        const data = main.filter(e => {\r\n          if(search_tp !== null && search_tp !== ''){\r\n            //계근번호\r\n            if(search_tp === '1'){\r\n              if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //차량번호\r\n            else if(search_tp === '2'){\r\n              if(e.carNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //사전등급\r\n            else if(search_tp === '3'){\r\n              if(e.itemGrade.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //업체\r\n            else if(search_tp === '4'){\r\n              if(e.vendor.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n          }else{\r\n            return true;\r\n          }\r\n        })\r\n\r\n        if(data.length > 0){\r\n          \r\n          //기존 그리드에서 dispatchNumb기준으로 데이터가 없으면 추가한다.\r\n          for(let i = 0; i < data.length; i++){\r\n            const dispatchNumb = data[i].dispatchNumb;\r\n\r\n            const oldData = grid.getData().find(e => e.dispatchNumb === dispatchNumb);\r\n            if(!oldData){\r\n              gfg_appendRow(grid, grid.getRowCount(), {\r\n                dispatchNumb,\r\n                carNumb: data[i].carNumb,\r\n                preItemGrade: data[i].preItemGrade,\r\n                itemGrade: data[i].itemGrade,\r\n                itemFlag: data[i].itemFlag,\r\n                vendor: data[i].vendor,\r\n                loadaddr: data[i].loadaddr,\r\n                addr: data[i].addr\r\n              }, 'scaleNumb', false);\r\n\r\n              grid.resetOriginData()\r\n              grid.restore();\r\n            }\r\n          }\r\n\r\n          //새로운 정보 기준으로 데이터가 지워졌으면 삭제한다.\r\n          for(let i = 0; i < grid.getData().length; i++){\r\n            const dispatchNumb =  grid.getData()[i].dispatchNumb;\r\n\r\n            const newData = data.find(e => e.dispatchNumb === dispatchNumb)\r\n            if(!newData){\r\n              grid.removeRow(i);\r\n            }\r\n          }\r\n\r\n          if(gfs_getStoreValue('ENTR_PROC_MAIN', 'BOT_TOTAL') !== data.length)\r\n            gfs_dispatch('ENTR_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n        }else{\r\n          grid.clear();\r\n          if(gfs_getStoreValue('ENTR_PROC_MAIN', 'BOT_TOTAL') !== 0)\r\n            gfs_dispatch('ENTR_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n        }\r\n      }else{\r\n        grid.clear();\r\n        if(gfs_getStoreValue('ENTR_PROC_MAIN', 'BOT_TOTAL') !== 0)\r\n          gfs_dispatch('ENTR_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      }\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n    // this.Retrieve();\r\n    \r\n    this.mainGridInterval = setInterval(e => {\r\n      this.mainGrid();\r\n    }, 2000)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.mainGridInterval);\r\n  }\r\n\r\n  Retrieve = async () => {\r\n\r\n    gfc_showMask();\r\n    gfs_dispatch('ENTR_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n\r\n    const mainData = await YK_WEB_REQ(`tally_mstr_drive.jsp`);\r\n    const main = mainData.data.dataSend;\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    grid.clear();\r\n    \r\n    if(!main) {\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n\r\n    const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n    const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n\r\n    const data = main.filter(e => {\r\n      if(search_tp !== null && search_tp !== ''){\r\n        //계근번호\r\n        if(search_tp === '1'){\r\n          if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n            return true;\r\n          }else{\r\n            return false;\r\n          }\r\n        }\r\n        //차량번호\r\n        else if(search_tp === '2'){\r\n          if(e.carNumb.indexOf(search_txt) >= 0){\r\n            return true;\r\n          }else{\r\n            return false;\r\n          }\r\n        }\r\n        //사전등급\r\n        else if(search_tp === '3'){\r\n          if(e.itemGrade.indexOf(search_txt) >= 0){\r\n            return true;\r\n          }else{\r\n            return false;\r\n          }\r\n        }\r\n        //업체\r\n        else if(search_tp === '4'){\r\n          if(e.vendor.indexOf(search_txt) >= 0){\r\n            return true;\r\n          }else{\r\n            return false;\r\n          }\r\n        }\r\n        \r\n      }else{\r\n        return true;\r\n      }\r\n    })\r\n\r\n    if(data.length > 0){\r\n\r\n      grid.resetData(data);\r\n      gfs_dispatch('ENTR_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n      \r\n      await gfc_sleep(100);\r\n\r\n      gfg_setSelectRow(grid);\r\n    }else{\r\n      gfs_dispatch('ENTR_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n    }\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager type3' >\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '배차번호'\r\n                            },{\r\n                              code: '2',\r\n                              name: '차량번호'\r\n                            },{\r\n                              code: '3',\r\n                              name: '사전등급'\r\n                            },{\r\n                              code: '4',\r\n                              name: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       onKeyDown   = {(e) => {\r\n                        if(e.keyCode === 13){\r\n                          this.Retrieve()\r\n                        }\r\n                       }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        rowHeight={41}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        columns={[\r\n                          columnInput({\r\n                            name: 'dispatchNumb',\r\n                            header: '배차번호',\r\n                            width : 160,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center',\r\n                            fontSize: '18'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'carNumb',\r\n                            header: '차량번호',\r\n                            width : 160,\r\n                            readOnly: true,\r\n                            align : 'center',\r\n                            fontSize: '18'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'preItemGrade',\r\n                            header: '사전등급',\r\n                            width : 130,\r\n                            readOnly: true,\r\n                            align : 'left',\r\n                            fontSize: '18'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'vendor',\r\n                            header: '업체명',\r\n                            width : 300,\r\n                            readOnly: true,\r\n                            align : 'left',\r\n                            fontSize: '18'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'loadaddr',\r\n                            header: '상차주소',\r\n                            width : 420,\r\n                            readOnly: true,\r\n                            align : 'left',\r\n                            fontSize: '18'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'addr',\r\n                            header: '주소',\r\n                            width : 200,\r\n                            readOnly: true,\r\n                            align : 'left',\r\n                            fontSize: '18'\r\n                          }),\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>전체차량</span><Botspan reducer='ENTR_PROC_MAIN' />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ENTR_PROC;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\CompleteBtn.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\DISP_PROC\\DISP_PROC.js",["661","662","663"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\nimport Checkbox from '../../../Component/Control/Checkbox';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_chit_yn_YK_Tally, gfc_sleep } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue, gfs_injectAsyncReducer, gfs_dispatch, gfs_subscribe } from '../../../Method/Store';\r\nimport { gfo_getCombo, gfo_getInput, gfo_getCheckbox } from '../../../Method/Component';\r\nimport { gfg_getGrid, gfg_setSelectRow, gfg_appendRow } from '../../../Method/Grid';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { TextArea as columnTextArea } from '../../../Component/Grid/Column/TextArea';\r\nimport { DateTime as columnDateTime } from '../../../Component/Grid/Column/DateTime';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\nimport Detailspan from '../Common/Detailspan';\r\nimport Botspan from '../Common/Botspan';\r\nimport Chit from '../Common/Chit/Chit';\r\nimport CompleteBtn from './CompleteBtn';\r\nimport TabList from './TabList';\r\nimport RecImage from '../Common/RecImage';\r\n\r\nimport { YK_WEB_REQ } from '../../../WebReq/WebReq';\r\n//#endregion\r\n\r\nclass DISP_PROC extends Component {\r\n\r\n  state = {\r\n    wait_list: [],\r\n    scaleNumb: '',\r\n    detail_grade2: YK_WEB_REQ('tally_process_pop.jsp?division=P005', {})\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#endregion\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const DISP_PROC_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'DISP_PROC_MAIN') {\r\n        return {\r\n          MAIN_WAIT    : nowState === undefined ? 0 : nowState.MAIN_WAIT,\r\n          MAIN_TOTAL   : nowState === undefined ? 0 : nowState.MAIN_TOTAL,\r\n          MAIN_WEIGHT  : nowState === undefined ? 0 : nowState.MAIN_WEIGHT,\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n          PROC_WAIT    : nowState === undefined ? 0 : nowState.PROC_WAIT,\r\n          DEPT_WAIT    : nowState === undefined ? 0 : nowState.DEPT_WAIT,\r\n          ENTR_WAIT    : nowState === undefined ? 0 : nowState.ENTR_WAIT,\r\n \r\n          DETAIL_SCALE : nowState === undefined ? '' : nowState.DETAIL_SCALE,\r\n          DETAIL_CARNO : nowState === undefined ? '' : nowState.DETAIL_CARNO,\r\n          DETAIL_WEIGHT: nowState === undefined ? '' : nowState.DETAIL_WEIGHT,\r\n          DETAIL_DATE  : nowState === undefined ? '' : nowState.DETAIL_DATE,\r\n\r\n          GRID_SCALE   : nowState === undefined ? '' : nowState.GRID_SCALE,\r\n\r\n          STD_CAM_IMG  : nowState === undefined ? null : nowState.STD_CAM_IMG,\r\n          DUM_CAM_IMG  : nowState === undefined ? null : nowState.DUM_CAM_IMG,\r\n\r\n          STD_CAM_OPEN : nowState === undefined ? false : nowState.STD_CAM_OPEN,\r\n          DUM_CAM_OPEN : nowState === undefined ? false : nowState.DUM_CAM_OPEN,\r\n\r\n          STD_CAM_FOCUS: nowState === undefined ? false : nowState.STD_CAM_FOCUS,\r\n          DUM_CAM_FOCUS: nowState === undefined ? false : nowState.DUM_CAM_FOCUS,\r\n\r\n          STD_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.STD_CAM_REC,\r\n          DUM_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.DUM_CAM_REC,\r\n\r\n          CHIT_MEMO    : nowState === undefined ? '' : nowState.CHIT_MEMO,\r\n          \r\n          CHIT_INFO    : nowState === undefined ? {\r\n                                                    date     : '',\r\n                                                    scaleNumb: '',\r\n                                                    carNumb  : '',\r\n                                                    vender   : '',\r\n                                                    itemFlag : '',\r\n                                                    Wgt      : '',\r\n                                                    loc      : '',\r\n                                                    user     : '',\r\n                                                    chit     : 'N',\r\n                                                  } : nowState.CHIT_INFO\r\n        };\r\n      }\r\n\r\n      if(action.type === 'MAIN_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WAIT : action.MAIN_WAIT\r\n        })\r\n      }else if(action.type === 'MAIN_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_TOTAL : action.MAIN_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WEIGHT : action.MAIN_WEIGHT\r\n        })\r\n      }else if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }else if(action.type === 'PROC_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          PROC_WAIT : action.PROC_WAIT\r\n        })\r\n      }else if(action.type === 'DEPT_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEPT_WAIT : action.DEPT_WAIT\r\n        })\r\n      }else if(action.type === 'ENTR_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ENTR_WAIT : action.ENTR_WAIT\r\n        })\r\n      }else if(action.type === 'DETAIL_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_SCALE : action.DETAIL_SCALE\r\n        })\r\n      }else if(action.type === 'GRID_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          GRID_SCALE : action.GRID_SCALE\r\n        })\r\n      }else if(action.type === 'DETAIL_CARNO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_CARNO : action.DETAIL_CARNO\r\n        })\r\n      }else if(action.type === 'DETAIL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_WEIGHT : action.DETAIL_WEIGHT\r\n        })\r\n      }else if(action.type === 'DETAIL_DATE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_DATE : action.DETAIL_DATE\r\n        })\r\n      }else if(action.type === 'STD_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_IMG : action.STD_CAM_IMG\r\n        })\r\n      }else if(action.type === 'DUM_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_IMG : action.DUM_CAM_IMG\r\n        })\r\n      }else if(action.type === 'STD_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_OPEN : action.STD_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'DUM_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_OPEN : action.DUM_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'STD_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_FOCUS : action.STD_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'DUM_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_FOCUS : action.DUM_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.STD_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.DUM_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec     : nowState.STD_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec     : nowState.DUM_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO_ITEM_FLAG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     :  nowState.CHIT_INFO.date,\r\n            scaleNumb:  nowState.CHIT_INFO.scaleNumb,\r\n            carNumb  :  nowState.CHIT_INFO.carNumb,\r\n            vender   :  nowState.CHIT_INFO.vender,\r\n            itemFlag :  action.itemFlag,\r\n            Wgt      :  nowState.CHIT_INFO.Wgt,\r\n            loc      :  nowState.CHIT_INFO.loc,\r\n            user     :  nowState.CHIT_INFO.user,\r\n            chit     :  nowState.CHIT_INFO.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     : action.date,\r\n            scaleNumb: action.scaleNumb,\r\n            carNumb  : action.carNumb,\r\n            vender   : action.vender,\r\n            itemFlag : action.itemFlag,\r\n            Wgt      : action.Wgt,\r\n            loc      : action.loc,\r\n            user     : action.user,\r\n            chit     : action.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_MEMO'){\r\n        return Object.assign({}, nowState, {\r\n          CHIT_MEMO : action.CHIT_MEMO\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('DISP_PROC_MAIN', DISP_PROC_MAIN);\r\n    //#endregion\r\n  }\r\n\r\n  \r\n  mainGrid = () => {\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n\r\n    YK_WEB_REQ('tally_mstr_pass.jsp').then(e => {\r\n      const main = e.data.dataSend;\r\n\r\n      if(main){\r\n\r\n        const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n        const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n    \r\n        const data = main.filter(e => {\r\n          if(search_tp !== null && search_tp !== ''){\r\n            //계근번호\r\n            if(search_tp === '1'){\r\n              if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //차량번호\r\n            else if(search_tp === '2'){\r\n              if(e.carNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //사전등급\r\n            else if(search_tp === '3'){\r\n              if(e.itemGrade.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //업체\r\n            else if(search_tp === '4'){\r\n              if(e.vendor.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            \r\n          }else{\r\n            return true;\r\n          }\r\n        })\r\n    \r\n        if(data.length > 0){\r\n          \r\n          //기존 그리드에서 scaleNumb기준으로 데이터가 없으면 추가한다.\r\n          for(let i = 0; i < data.length; i++){\r\n            const scaleNumb = data[i].scaleNumb;\r\n\r\n            const oldData = grid.getData().find(e => e.scaleNumb === scaleNumb);\r\n            if(!oldData){\r\n              gfg_appendRow(grid, grid.getRowCount(), {\r\n                scaleNumb,\r\n                carNumb: data[i].carNumb,\r\n                preItemGrade: data[i].preItemGrade,\r\n                itemGrade: data[i].itemGrade,\r\n                date: data[i].date,\r\n                lastDate: data[i].lastDate,\r\n                vendor: data[i].vendor\r\n              }, 'scaleNumb', false);\r\n\r\n              grid.resetOriginData();\r\n              grid.restore();\r\n            }\r\n          }\r\n\r\n          //새로운 정보 기준으로 데이터가 지워졌으면 삭제한다.\r\n          for(let i = 0; i < grid.getData().length; i++){\r\n            const scaleNumb =  grid.getData()[i].scaleNumb;\r\n\r\n            const newData = data.find(e => e.scaleNumb === scaleNumb)\r\n            if(!newData){\r\n              grid.removeRow(i);\r\n\r\n              //지워진 데이터가 기존에 선택된 데이터 이면 초기화 한다.\r\n              const selectScaleNumb = gfs_getStoreValue('DISP_PROC_MAIN', 'DETAIL_SCALE');\r\n              if(scaleNumb === selectScaleNumb){\r\n                gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n                gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n                gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: '0'});\r\n                gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n              }\r\n            }\r\n          }\r\n          \r\n          if(gfs_getStoreValue('DISP_PROC_MAIN', 'BOT_TOTAL') !== data.length)\r\n            gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n        }else{\r\n          grid.clear();\r\n          if(gfs_getStoreValue('DISP_PROC_MAIN', 'BOT_TOTAL') !== 0)\r\n            gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n        }\r\n      }else{\r\n        grid.clear();\r\n        if(gfs_getStoreValue('DISP_PROC_MAIN', 'BOT_TOTAL') !== 0)\r\n          gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      }\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n\r\n    //김경현\r\n    // this.mainGridInterval = setInterval(e => {\r\n    //   this.mainGrid();\r\n    // }, 2000)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.mainGridInterval);\r\n  }\r\n\r\n  Retrieve = async () => {\r\n\r\n    gfc_showMask();\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(''); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue('');      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: ''});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n\r\n    gfs_dispatch('DISP_PROC_MAIN', 'CHIT_INFO', {\r\n      itemFlag : '',\r\n      chit     : 'N',\r\n      scaleNumb: ''\r\n    });\r\n\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    const data = [{\r\n      scaleNumb: '202110070001',\r\n      carNumb  : '68무6308',\r\n      preItemGrade: '사전등급',\r\n      itemGrade   : '검수등급',\r\n      date        : new Date(),\r\n      lastDate    : new Date(),\r\n      vendor      : '벤더'\r\n    },{\r\n      scaleNumb: '202110070002',\r\n      carNumb  : '68무6308',\r\n      preItemGrade: '사전등급',\r\n      itemGrade   : '검수등급',\r\n      date        : new Date(),\r\n      lastDate    : new Date(),\r\n      vendor      : '벤더'\r\n    }]\r\n\r\n    if(data.length > 0){\r\n      grid.resetData(data);\r\n      gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n      \r\n      await gfc_sleep(100);\r\n\r\n      gfg_setSelectRow(grid);\r\n    }else{\r\n      gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n    }\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n  // Retrieve = async () => {\r\n\r\n  //   gfc_showMask();\r\n\r\n  //   gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(''); //사전등급\r\n  //   gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n  //   gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n  //   gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n  //   gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n  //   gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n  //   gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n  //   gfo_getCombo(this.props.pgm, 'detail_car').setValue('');      //차종구분\r\n  //   gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n  //   gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n  //   gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n  //   gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n  //   gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n  //   gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: ''});\r\n  //   gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n\r\n  //   gfs_dispatch('DISP_PROC_MAIN', 'CHIT_INFO', {\r\n  //     itemFlag : '',\r\n  //     chit     : 'N',\r\n  //     scaleNumb: ''\r\n  //   });\r\n\r\n  //   const mainData = await YK_WEB_REQ('tally_mstr_pass.jsp');\r\n  //   const main = mainData.data.dataSend;\r\n  //   const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n  //   grid.clear();\r\n    \r\n  //   if(!main) {\r\n  //     gfc_hideMask();\r\n  //     return;\r\n  //   }\r\n\r\n  //   const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n  //   const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n\r\n  //   const data = main.filter(e => {\r\n  //     if(search_tp !== null && search_tp !== ''){\r\n  //       //계근번호\r\n  //       if(search_tp === '1'){\r\n  //         if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n  //           return true;\r\n  //         }else{\r\n  //           return false;\r\n  //         }\r\n  //       }\r\n  //       //차량번호\r\n  //       else if(search_tp === '2'){\r\n  //         if(e.carNumb.indexOf(search_txt) >= 0){\r\n  //           return true;\r\n  //         }else{\r\n  //           return false;\r\n  //         }\r\n  //       }\r\n  //       //사전등급\r\n  //       else if(search_tp === '3'){\r\n  //         if(e.itemGrade.indexOf(search_txt) >= 0){\r\n  //           return true;\r\n  //         }else{\r\n  //           return false;\r\n  //         }\r\n  //       }\r\n  //       //업체\r\n  //       else if(search_tp === '4'){\r\n  //         if(e.vendor.indexOf(search_txt) >= 0){\r\n  //           return true;\r\n  //         }else{\r\n  //           return false;\r\n  //         }\r\n  //       }\r\n        \r\n  //     }else{\r\n  //       return true;\r\n  //     }\r\n  //   })\r\n\r\n  //   if(data.length > 0){\r\n  //     grid.resetData(data);\r\n  //     gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n      \r\n  //     await gfc_sleep(100);\r\n\r\n  //     gfg_setSelectRow(grid);\r\n  //   }else{\r\n  //     gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n  //   }\r\n\r\n  //   gfc_hideMask();\r\n  // }\r\n\r\n\r\n  onSelectChange = async (e) => {\r\n    if(e === null) return;\r\n\r\n    gfs_dispatch('DISP_PROC_MAIN', 'GRID_SCALE', {GRID_SCALE: e.scaleNumb});\r\n\r\n    //계량증명서 정보여부\r\n    const chitInfoYn = await YK_WEB_REQ(`tally_chit.jsp?scaleNumb=${e.scaleNumb}`);\r\n    if(!chitInfoYn.data.dataSend){\r\n      alert('계량증명서 정보가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    //기존 등록된 정보\r\n    const dtlInfo = await YK_WEB_REQ(`tally_process_f_sel.jsp?scaleNumb=${e.scaleNumb}`);\r\n    if(!dtlInfo.data.dataSend){\r\n      alert('검수정보를 불러올수 없습니다.');\r\n      return;\r\n    }\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(e.preItemGrade); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue(dtlInfo.data.dataSend[0].IRON_GRADE);   //고철등급\r\n    const detail_grade2 = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n    await detail_grade2.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${dtlInfo.data.dataSend[0].IRON_GRADE}`, {})});\r\n    detail_grade2.setValue(dtlInfo.data.dataSend[0].IRON_GRADE_ITEM);   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue(dtlInfo.data.dataSend[0].REDUCE_WGT);     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(dtlInfo.data.dataSend[0].REDUCE_WGT_REASON_CODE); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue(dtlInfo.data.dataSend[0].DISCOUNT_CODE);     //감가내역\r\n    // gfo_getCombo(this.props.pgm, 'detail_depr2').setValue(dtlInfo.data.dataSend[0].DISCOUNT_CODE);    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue(dtlInfo.data.dataSend[0].CAR_TYPE);      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue(dtlInfo.data.dataSend[0].RETURN_CODE);      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue(dtlInfo.data.dataSend[0].RETURN_GUBUN);     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue(dtlInfo.data.dataSend[0].WARNING);  //경고\r\n\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: e.scaleNumb});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: e.carNumb});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: e.totalWgt});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: e.date});\r\n\r\n    //계량증명서 여부 확인.\r\n    gfs_dispatch('DISP_PROC_MAIN', 'CHIT_INFO', {\r\n      date     : chitInfoYn.data.dataSend[0].date,\r\n      scaleNumb: chitInfoYn.data.dataSend[0].scaleNumb,\r\n      carNumb  : chitInfoYn.data.dataSend[0].carNumb,\r\n      vender   : chitInfoYn.data.dataSend[0].vendor,\r\n      itemFlag : e.preItemGrade,\r\n      Wgt      : chitInfoYn.data.dataSend[0].totalWgt,\r\n      loc      : chitInfoYn.data.dataSend[0].area,\r\n      user     : gfs_getStoreValue('USER_REDUCER', 'USER_NAM')\r\n    });\r\n    return;\r\n    // if(chitYn.data === 'N'){\r\n    //   gfs_dispatch('DISP_PROC_MAIN', 'CHIT_INFO', {\r\n    //     date     : chitInfoYn.data.dataSend[0].date,\r\n    //     scaleNumb: chitInfoYn.data.dataSend[0].scaleNumb,\r\n    //     carNumb  : chitInfoYn.data.dataSend[0].carNumb,\r\n    //     vender   : chitInfoYn.data.dataSend[0].vendor,\r\n    //     itemFlag : e.preItemGrade,\r\n    //     Wgt      : chitInfoYn.data.dataSend[0].totalWgt,\r\n    //     loc      : chitInfoYn.data.dataSend[0].area,\r\n    //     user     : gfs_getStoreValue('USER_REDUCER', 'USER_NAM'),\r\n    //     chit     : 'N'\r\n    //   });\r\n    // }else{\r\n    //   gfs_dispatch('DISP_PROC_MAIN', 'CHIT_INFO', {\r\n    //     itemFlag : e.preItemGrade,\r\n    //     chit     : chitYn.data,\r\n    //     scaleNumb: chitInfoYn.data.dataSend[0].scaleNumb\r\n    //   });\r\n    // }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager' >\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '계근번호'\r\n                            },{\r\n                              code: '2',\r\n                              name: '차량번호'\r\n                            },{\r\n                              code: '3',\r\n                              name: '사전등급'\r\n                            },{\r\n                              code: '4',\r\n                              name: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       onKeyDown   = {(e) => {\r\n                        if(e.keyCode === 13){\r\n                          this.Retrieve()\r\n                        }\r\n                       }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        selectionChange={(e) => this.onSelectChange(e)}\r\n                        rowHeight={46}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        columns={[\r\n                          columnInput({\r\n                            name: 'scaleNumb',\r\n                            header: '계근번호',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'carNumb',\r\n                            header: '차량번호',\r\n                            width : 110,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'preItemGrade',\r\n                            header: '사전등급',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),     \r\n                          columnInput({\r\n                            name: 'itemGrade',\r\n                            header: '판정등급',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }), \r\n                          columnDateTime({\r\n                            name  : 'date',\r\n                            header: '입차시간',\r\n                            width : 80,\r\n                            height: 38,\r\n                            // paddingTop: ''\r\n                            readOnly: true,\r\n                            valign:'middle',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                            time  : 'HH:mm:ss'\r\n                          }),\r\n                          columnTextArea({\r\n                            name  : 'lastDate',\r\n                            header: '검수시간',\r\n                            width : 80,\r\n                            height: 38,\r\n                            // paddingTop: ''\r\n                            readOnly: true,\r\n                            valign:'middle',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                            time  : 'HH:mm'\r\n                          }),\r\n                          columnTextArea({\r\n                            name: 'vendor',\r\n                            header: 'Vendor',\r\n                            width : 200,\r\n                            height: 38,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          })\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>전체차량</span><Botspan reducer='DISP_PROC_MAIN' />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div id={`car_info_${this.props.pgm}`} className='car_info'>\r\n            <div className='title'><span>계근번호</span><Detailspan flag={1}  reducer='DISP_PROC_MAIN'/></div>\r\n\r\n\r\n\r\n            <TabList pgm={this.props.pgm} id={this.props.id} reducer='DISP_PROC_MAIN'/>\r\n\r\n\r\n            <div className='tab_content' id='tabMain'>\r\n              <div className='input_list on' id={`content1_${this.props.pgm}`}>\r\n                <ul>\r\n                  <li>\r\n                    <h5>사전등급</h5>\r\n                      <Input pgm     = {this.props.pgm}\r\n                             id      = 'detail_pre_grade'\r\n                             width   = '100%'\r\n                             disabled\r\n                      />\r\n                  </li>\r\n                  <li>\r\n                    <h5>등급책정</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                                id      = 'detail_grade1'\r\n                                value   = 'itemCode'\r\n                                display = 'item'\r\n                                placeholder = '고철등급 검색'\r\n                                height  = {42}\r\n                                etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P005', {})}\r\n                                onChange = {async (e) => {\r\n                                  const combo = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n                                  combo.setValue(null);\r\n\r\n                                  if(e !== undefined && e.value !== ''){\r\n                                    await combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                                    combo.setDisabled(false);\r\n                                  }else{\r\n                                    combo.setDisabled(true);\r\n                                  }\r\n                                }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_grade2'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>감량중량</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_subt'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감량중량 검색(KG)'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P535', {})}\r\n                            onChange = {async (e) => {\r\n                              if(e === undefined) return;\r\n\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_subt_leg');\r\n                              combo.setValue(null);\r\n\r\n                              if(e.value === '0'){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                await combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                                combo.setDisabled(false);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_subt_leg'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '감량사유 검색'\r\n                          etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P620', {})}\r\n                          isDisabled\r\n                    /> \r\n                  </li>\r\n                  <li>\r\n                    <h5>감가내역</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_depr'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감가내역 검색'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P130', {})}\r\n                            emptyRow\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_depr2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e !== undefined && e.value !== ''){\r\n                                combo.setDisabled(false);\r\n                              }else{\r\n                                combo.setDisabled(true);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm = {this.props.pgm}\r\n                          id      = 'detail_depr2'\r\n                          value   = 'code'\r\n                          display = 'name'\r\n                          placeholder = '감가비율'\r\n                          isDisabled\r\n                          data    = {[{\r\n                            'code': '10',\r\n                            'name': '10%'\r\n                          },{\r\n                            'code': '20',\r\n                            'name': '20%'\r\n                          },{\r\n                            'code': '30',\r\n                            'name': '30%'\r\n                          },{\r\n                            'code': '40',\r\n                            'name': '40%'\r\n                          },{\r\n                            'code': '50',\r\n                            'name': '50%'\r\n                          },{\r\n                            'code': '60',\r\n                            'name': '60%'\r\n                          },{\r\n                            'code': '70',\r\n                            'name': '70%'\r\n                          },{\r\n                            'code': '80',\r\n                            'name': '80%'\r\n                          },{\r\n                            'code': '90',\r\n                            'name': '90%'\r\n                          },{\r\n                            'code': '100',\r\n                            'name': '100%'\r\n                          }]}\r\n                          // emptyRow\r\n                    />\r\n                  </li>\r\n                  {/* <li>\r\n                    <h5>하차구역</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_out'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '하차구역 검색(SECTOR)'\r\n                          data    = ''\r\n                          onFocus = {ComboCreate => {\r\n                            YK_WEB_REQ('tally_process_pop.jsp?division=P530', {})\r\n                              .then(res => {\r\n                                ComboCreate({data   : res.data.dataSend,\r\n                                            value  : 'itemCode',\r\n                                            display: 'item'});\r\n                              })\r\n                          }}\r\n                  />\r\n                  </li> */}\r\n                  <li>\r\n                    <h5>차종구분</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_car'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '차종선택'\r\n                          etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P700', {})}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>반품구분</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '일부,전량 선택'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P110', {})}\r\n                            emptyRow\r\n                            onChange = {e => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_rtn2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value === ''){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                combo.setDisabled(false);\r\n                              }\r\n                              // combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                            }}\r\n                    />\r\n                  </div>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn2'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P120', {})}\r\n                            isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>경고</h5>\r\n                    <Checkbox pgm   = {this.props.pgm}\r\n                              id    = 'detail_warning'\r\n                              width = '30px'\r\n                              height= '30px'\r\n\r\n                    />\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              \r\n              <Chit pgm={this.props.pgm} id={'chit_memo'} reducer='DISP_PROC_MAIN'/>\r\n              \r\n\r\n\r\n              \r\n            </div>\r\n            <CompleteBtn pgm={this.props.pgm}/>\r\n\r\n\r\n\r\n\r\n          </div>\r\n            <div className='cctv_viewer'>\r\n              <h4>녹화영상</h4>\r\n              <div className='cctv_list'>\r\n                  <RecImage \r\n                    seq     = {1}\r\n                    reducer = 'DISP_PROC_MAIN'\r\n                    cam     = 'STD_CAM_OPEN' \r\n                    focus   = 'STD_CAM_FOCUS' \r\n                    rec     = 'STD_CAM_REC' \r\n                    image   = 'STD_CAM_IMG'/> \r\n                  <RecImage \r\n                    seq     = {2}\r\n                    reducer = 'DISP_PROC_MAIN'\r\n                    cam     = 'DUM_CAM_OPEN' \r\n                    focus   = 'DUM_CAM_FOCUS' \r\n                    rec     = 'DUM_CAM_REC' \r\n                    image   = 'DUM_CAM_IMG'/> \r\n              </div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DISP_PROC;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_HIST\\CompleteBtn.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_HIST\\INSP_HIST.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\DispImg.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\DispInfo.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\CompleteBtn.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\Botspan.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RecImage.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RecTimer.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\INSP_PROC.js",["664","665","666","667"],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\SHIP_PROC\\CompleteBtn.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\SHIP_PROC\\SHIP_PROC.js",["668"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_sleep } from '../../../Method/Comm';\r\nimport { gfs_injectAsyncReducer, gfs_dispatch, gfs_getStoreValue } from '../../../Method/Store';\r\nimport { gfo_getCombo, gfo_getInput } from '../../../Method/Component';\r\nimport { gfg_getGrid, gfg_setSelectRow, gfg_setValue, gfg_appendRow } from '../../../Method/Grid';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Number as columnNumber } from '../../../Component/Grid/Column/Number';\r\nimport { Checkbox as columnCheckbox } from '../../../Component/Grid/Column/Checkbox';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\nimport Detailspan from '../Common/Detailspan';\r\nimport Botspan from '../Common/Botspan';\r\nimport CompleteBtn from './CompleteBtn';\r\n\r\nimport { YK_WEB_REQ } from '../../../WebReq/WebReq';\r\n//#endregion\r\n\r\nclass SHIP_PROC extends Component {\r\n\r\n  state = {\r\n    wait_list: [],\r\n    device: []\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const SHIP_PROC_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'SHIP_PROC_MAIN') {\r\n        return {\r\n          MAIN_WAIT    : nowState === undefined ? 0 : nowState.MAIN_WAIT,\r\n          MAIN_TOTAL   : nowState === undefined ? 0 : nowState.MAIN_TOTAL,\r\n          MAIN_WEIGHT  : nowState === undefined ? 0 : nowState.MAIN_WEIGHT,\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n          PROC_WAIT    : nowState === undefined ? 0 : nowState.PROC_WAIT,\r\n          DEPT_WAIT    : nowState === undefined ? 0 : nowState.DEPT_WAIT,\r\n          ENTR_WAIT    : nowState === undefined ? 0 : nowState.ENTR_WAIT,\r\n \r\n          DETAIL_SCALE : nowState === undefined ? '' : nowState.DETAIL_SCALE,\r\n          DETAIL_CARNO : nowState === undefined ? '' : nowState.DETAIL_CARNO,\r\n          DETAIL_WEIGHT: nowState === undefined ? '' : nowState.DETAIL_WEIGHT,\r\n          DETAIL_DATE  : nowState === undefined ? '' : nowState.DETAIL_DATE,\r\n\r\n          GRID_SCALE   : nowState === undefined ? '' : nowState.GRID_SCALE,\r\n\r\n          STD_CAM_IMG  : nowState === undefined ? null : nowState.STD_CAM_IMG,\r\n          DUM_CAM_IMG  : nowState === undefined ? null : nowState.DUM_CAM_IMG,\r\n\r\n          STD_CAM_OPEN : nowState === undefined ? false : nowState.STD_CAM_OPEN,\r\n          DUM_CAM_OPEN : nowState === undefined ? false : nowState.DUM_CAM_OPEN,\r\n\r\n          STD_CAM_FOCUS: nowState === undefined ? false : nowState.STD_CAM_FOCUS,\r\n          DUM_CAM_FOCUS: nowState === undefined ? false : nowState.DUM_CAM_FOCUS,\r\n\r\n          STD_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.STD_CAM_REC,\r\n          DUM_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.DUM_CAM_REC,\r\n\r\n          CHIT_MEMO    : nowState === undefined ? '' : nowState.CHIT_MEMO,\r\n          \r\n          CHIT_INFO    : nowState === undefined ? {\r\n                                                    date     : '',\r\n                                                    scaleNumb: '',\r\n                                                    carNumb  : '',\r\n                                                    vender   : '',\r\n                                                    itemFlag : '',\r\n                                                    Wgt      : '',\r\n                                                    loc      : '',\r\n                                                    user     : '',\r\n                                                    chit     : 'N',\r\n                                                  } : nowState.CHIT_INFO\r\n        };\r\n      }\r\n\r\n      if(action.type === 'MAIN_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WAIT : action.MAIN_WAIT\r\n        })\r\n      }else if(action.type === 'MAIN_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_TOTAL : action.MAIN_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WEIGHT : action.MAIN_WEIGHT\r\n        })\r\n      }else if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }else if(action.type === 'PROC_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          PROC_WAIT : action.PROC_WAIT\r\n        })\r\n      }else if(action.type === 'DEPT_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEPT_WAIT : action.DEPT_WAIT\r\n        })\r\n      }else if(action.type === 'ENTR_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ENTR_WAIT : action.ENTR_WAIT\r\n        })\r\n      }else if(action.type === 'DETAIL_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_SCALE : action.DETAIL_SCALE\r\n        })\r\n      }else if(action.type === 'GRID_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          GRID_SCALE : action.GRID_SCALE\r\n        })\r\n      }else if(action.type === 'DETAIL_CARNO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_CARNO : action.DETAIL_CARNO\r\n        })\r\n      }else if(action.type === 'DETAIL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_WEIGHT : action.DETAIL_WEIGHT\r\n        })\r\n      }else if(action.type === 'DETAIL_DATE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_DATE : action.DETAIL_DATE\r\n        })\r\n      }else if(action.type === 'STD_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_IMG : action.STD_CAM_IMG\r\n        })\r\n      }else if(action.type === 'DUM_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_IMG : action.DUM_CAM_IMG\r\n        })\r\n      }else if(action.type === 'STD_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_OPEN : action.STD_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'DUM_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_OPEN : action.DUM_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'STD_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_FOCUS : action.STD_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'DUM_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_FOCUS : action.DUM_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.STD_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.DUM_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec     : nowState.STD_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec     : nowState.DUM_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO_ITEM_FLAG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     :  nowState.CHIT_INFO.date,\r\n            scaleNumb:  nowState.CHIT_INFO.scaleNumb,\r\n            carNumb  :  nowState.CHIT_INFO.carNumb,\r\n            vender   :  nowState.CHIT_INFO.vender,\r\n            itemFlag :  action.itemFlag,\r\n            Wgt      :  nowState.CHIT_INFO.Wgt,\r\n            loc      :  nowState.CHIT_INFO.loc,\r\n            user     :  nowState.CHIT_INFO.user,\r\n            chit     :  nowState.CHIT_INFO.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     : action.date,\r\n            scaleNumb: action.scaleNumb,\r\n            carNumb  : action.carNumb,\r\n            vender   : action.vender,\r\n            itemFlag : action.itemFlag,\r\n            Wgt      : action.Wgt,\r\n            loc      : action.loc,\r\n            user     : action.user,\r\n            chit     : action.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_MEMO'){\r\n        return Object.assign({}, nowState, {\r\n          CHIT_MEMO : action.CHIT_MEMO\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('SHIP_PROC_MAIN', SHIP_PROC_MAIN);\r\n    //#endregion\r\n  }\r\n\r\n  mainGrid = () => {\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    YK_WEB_REQ(`tally_ship_wait.jsp`).then(e => {\r\n      const main = e.data.dataSend;\r\n      if(main){\r\n\r\n        const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n        const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n    \r\n        const data = main.filter(e => {\r\n          if(search_tp !== null && search_tp !== ''){\r\n            //계근번호\r\n            if(search_tp === '1'){\r\n              if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //차량번호\r\n            else if(search_tp === '2'){\r\n              if(e.cars_no.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //업체\r\n            else if(search_tp === '3'){\r\n              if(e.vendorname.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            \r\n          }else{\r\n            return true;\r\n          }\r\n        })\r\n    \r\n        if(data.length > 0){\r\n          \r\n          //기존 그리드에서 scaleNumb기준으로 데이터가 없으면 추가한다.\r\n          for(let i = 0; i < data.length; i++){\r\n            const scaleNumb = data[i].scaleNumb;\r\n\r\n            const oldData = grid.getData().find(e => e.scaleNumb === scaleNumb);\r\n            if(!oldData){\r\n              gfg_appendRow(grid, grid.getRowCount(), {\r\n                scaleNumb,\r\n                vendorname: data[i].vendorname,\r\n                cars_no: data[i].cars_no,\r\n                netweight: data[i].netweight,\r\n                deliverydate: data[i].deliverydate,\r\n                empty_time: data[i].empty_time,\r\n                empty_wgt: data[i].empty_wgt,\r\n                iron_grade: data[i].iron_grade,\r\n                inspect_user: data[i].inspect_user\r\n              }, 'scaleNumb', false);\r\n            }else{\r\n              grid.setValue(oldData.rowKey, 'iron_grade', data[i].iron_grade);\r\n            }\r\n\r\n            grid.resetOriginData();\r\n            grid.restore();\r\n          }\r\n\r\n          //새로운 정보 기준으로 데이터가 지워졌으면 삭제한다.\r\n          for(let i = 0; i < grid.getData().length; i++){\r\n            const scaleNumb =  grid.getData()[i].scaleNumb;\r\n\r\n            const newData = data.find(e => e.scaleNumb === scaleNumb)\r\n            if(!newData){\r\n              grid.removeRow(i);\r\n\r\n              //지워진 데이터가 기존에 선택된 데이터 이면 초기화 한다.\r\n              const selectScaleNumb = gfs_getStoreValue('SHIP_PROC_MAIN', 'DETAIL_SCALE');\r\n              if(scaleNumb === selectScaleNumb){\r\n                gfs_dispatch('SHIP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n                gfs_dispatch('SHIP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n                gfs_dispatch('SHIP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: '0'});\r\n                gfs_dispatch('SHIP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n              }\r\n            }\r\n          }\r\n\r\n          gfs_dispatch('SHIP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n        }else{\r\n          grid.clear();\r\n          gfs_dispatch('SHIP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n        }\r\n      }else{\r\n        grid.clear();\r\n        gfs_dispatch('SHIP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      }\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n    // this.Retrieve();\r\n    \r\n    this.mainGridInterval = setInterval(e => {\r\n      this.mainGrid();\r\n    }, 2000)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.mainGridInterval);\r\n  }\r\n\r\n  Retrieve = async () => {\r\n\r\n    gfc_showMask();\r\n\r\n    const mainData = await YK_WEB_REQ(`tally_ship_wait.jsp`);\r\n    const main = mainData.data.dataSend;\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    grid.clear();\r\n    \r\n    if(main){\r\n      \r\n      grid.resetData(main);\r\n      gfs_dispatch('SHIP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: main.length});\r\n      \r\n      await gfc_sleep(100);\r\n\r\n      gfg_setSelectRow(grid);\r\n    }else{\r\n      gfs_dispatch('SHIP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n    }\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n\r\n  onSelectChange = async (e) => {\r\n    if(e === null) return;\r\n\r\n    gfs_dispatch('SHIP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: e.scaleNumb});\r\n    gfs_dispatch('SHIP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: e.vendorname});\r\n    gfs_dispatch('SHIP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: e.netweight});\r\n    gfs_dispatch('SHIP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: e.deliverydate});\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager type2' >\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '계근번호'\r\n                            },{\r\n                              code: '2',\r\n                              name: '차량번호'\r\n                            },{\r\n                              code: '3',\r\n                              name: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        selectionChange={(e) => this.onSelectChange(e)}\r\n                        headerClick={(e) => {\r\n                          if(e.columnName === 'chk'){\r\n                            const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n                            if(grid.gridEl.dataset.checked === undefined){\r\n                              grid.gridEl.dataset.checked = 'Y';\r\n                            }else if(grid.gridEl.dataset.checked === 'Y'){\r\n                              grid.gridEl.dataset.checked = 'N';\r\n                            }else{\r\n                              grid.gridEl.dataset.checked = 'Y';\r\n                            }\r\n    \r\n                            for(let i = 0; i < grid.getRowCount(); i++){\r\n                              gfg_setValue(grid, 'chk', grid.gridEl.dataset.checked, i);\r\n                            }\r\n                          }\r\n                        }}\r\n                        rowHeight={41}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        columns={[\r\n                          columnCheckbox({\r\n                            name: 'chk',\r\n                            header: '선택',\r\n                            width : 50,\r\n                            readOnly: true,\r\n                            align : 'center',\r\n                            type: 'checkbox'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'scaleNumb',\r\n                            header: '계근번호',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'vendorname',\r\n                            header: '업체명',\r\n                            width : 250,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'cars_no',\r\n                            header: '차량번호',\r\n                            width : 150,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnNumber({\r\n                            name    : 'netweight', \r\n                            header  : '무게(KG)', \r\n                            width   : 130, \r\n                            readOnly: false\r\n                          }),\r\n                          columnInput({\r\n                            name: 'deliverydate',\r\n                            header: '입차일자',\r\n                            width : 180,\r\n                            readOnly: true,\r\n                            align : 'center',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT')\r\n                          }),\r\n                          columnInput({\r\n                            name: 'empty_time',\r\n                            header: '공차계량시간',\r\n                            width : 180,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),\r\n                          columnNumber({\r\n                            name    : 'empty_wgt', \r\n                            header  : '공차계량값', \r\n                            width   : 130, \r\n                            readOnly: false\r\n                          }),\r\n                          columnInput({\r\n                            name: 'iron_grade',\r\n                            header: '판정등급',\r\n                            width : 180,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'inspect_user',\r\n                            header: '판정(검수)',\r\n                            width : 180,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          })\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>전체차량</span><Botspan reducer='SHIP_PROC_MAIN' />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div style={{paddingBottom:'90px', paddingTop:'60px'}} className='car_info'>\r\n            <div className='title'><span>계근번호</span><Detailspan flag={1}  reducer='SHIP_PROC_MAIN'/></div>\r\n\r\n            <div className='tab_content' id='tabMain'>\r\n              <div className='input_list on' id={`content1_${this.props.pgm}`}>\r\n                <ul>\r\n                  <li>\r\n                    <h5>등급책정</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                                id      = 'detail_grade1'\r\n                                value   = 'itemCode'\r\n                                display = 'item'\r\n                                placeholder = '고철등급 검색'\r\n                                height  = {42}\r\n                                etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P005', {})}\r\n                                onChange = {async (e) => {\r\n                                  const combo = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n                                  combo.setValue(null);\r\n\r\n                                  if(e !== undefined && e.value !== ''){\r\n                                    await combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                                    combo.setDisabled(false);\r\n                                  }else{\r\n                                    combo.setDisabled(true);\r\n                                  }\r\n                                }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_grade2'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>감량중량</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_subt'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감량중량 검색(KG)'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P535', {})}\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_subt_leg');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value === '0'){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                await combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                                combo.setDisabled(false);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_subt_leg'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '감량사유 검색'\r\n                          etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P620', {})}\r\n                          isDisabled\r\n                    /> \r\n                  </li>\r\n                  <li>\r\n                    <h5>감가내역</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_depr'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감가내역 검색'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P130', {})}\r\n                            emptyRow\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_depr2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e !== undefined && e.value !== ''){\r\n                                combo.setDisabled(false);\r\n                              }else{\r\n                                combo.setDisabled(true);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm = {this.props.pgm}\r\n                          id      = 'detail_depr2'\r\n                          value   = 'code'\r\n                          display = 'name'\r\n                          placeholder = '감가비율'\r\n                          isDisabled\r\n                          data    = {[{\r\n                            'code': '10',\r\n                            'name': '10%'\r\n                          },{\r\n                            'code': '20',\r\n                            'name': '20%'\r\n                          },{\r\n                            'code': '30',\r\n                            'name': '30%'\r\n                          },{\r\n                            'code': '40',\r\n                            'name': '40%'\r\n                          },{\r\n                            'code': '50',\r\n                            'name': '50%'\r\n                          },{\r\n                            'code': '60',\r\n                            'name': '60%'\r\n                          },{\r\n                            'code': '70',\r\n                            'name': '70%'\r\n                          },{\r\n                            'code': '80',\r\n                            'name': '80%'\r\n                          },{\r\n                            'code': '90',\r\n                            'name': '90%'\r\n                          },{\r\n                            'code': '100',\r\n                            'name': '100%'\r\n                          }]}\r\n                          // emptyRow\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>하차구역</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_out'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '하차구역 검색(SECTOR)'\r\n                          etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P530', {})}\r\n                          // data    = ''\r\n                          // onFocus = {ComboCreate => {\r\n                          //   YK_WEB_REQ('tally_process_pop.jsp?division=P530', {})\r\n                          //     .then(res => {\r\n                          //       ComboCreate({data   : res.data.dataSend,\r\n                          //                   value  : 'itemCode',\r\n                          //                   display: 'item'});\r\n                          //     })\r\n                          // }}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>차종구분</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_car'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '차종선택'\r\n                          etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P700', {})}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>반품구분</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '일부,전량 선택'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P110', {})}\r\n                            emptyRow\r\n                            onChange = {e => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_rtn2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value === ''){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                combo.setDisabled(false);\r\n                              }\r\n                              // combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                            }}\r\n                    />\r\n                  </div>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn2'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P120', {})}\r\n                            isDisabled\r\n                    />\r\n                  </li>\r\n                  {/* <li>\r\n                    <h5>경고</h5>\r\n                    <Combobox pgm = {this.props.pgm}\r\n                          id      = 'detail_warning'\r\n                          value   = 'code'\r\n                          display = 'name'\r\n                          placeholder = '경고'\r\n                          data    = {[{\r\n                            'code': 'Y',\r\n                            'name': '경고'\r\n                          }]}\r\n                          emptyRow\r\n                    />\r\n                  </li> */}\r\n                </ul>\r\n              </div>\r\n\r\n\r\n              \r\n            </div>\r\n            \r\n            <CompleteBtn pgm={this.props.pgm}/>\r\n\r\n\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SHIP_PROC;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\INSP_CFRM.js",["669","670","671","672"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\nimport Checkbox from '../../../Component/Control/Checkbox';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_chit_yn_YK, gfc_sleep } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue, gfs_injectAsyncReducer, gfs_dispatch, gfs_subscribe } from '../../../Method/Store';\r\nimport { gfo_getCombo, gfo_getInput, gfo_getCheckbox } from '../../../Method/Component';\r\nimport { gfg_getGrid, gfg_setSelectRow, gfg_setValue, gfg_appendRow } from '../../../Method/Grid';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { TextArea as columnTextArea } from '../../../Component/Grid/Column/TextArea';\r\nimport { Checkbox as columnCheckbox } from '../../../Component/Grid/Column/Checkbox';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\nimport Detailspan from '../Common/Detailspan';\r\nimport Botspan from '../Common/Botspan';\r\nimport Chit from './Chit';\r\nimport TabList from './TabList';\r\nimport RecImage from '../Common/RecImage';\r\nimport CompleteBtn from './CompleteBtn';\r\nimport CompleteBtnModify from './CompleteBtnModify';\r\n\r\nimport { YK_WEB_REQ } from '../../../WebReq/WebReq';\r\n//#endregion\r\n\r\nclass INSP_CFRM extends Component {\r\n\r\n  state = {\r\n    wait_list: [],\r\n    scaleNumb: ''\r\n  }\r\n\r\n  onTabChg = async() => {\r\n\r\n  }\r\n\r\n  //#region onActiveWindow 스토어 subscribe로 실행됨.\r\n  onActiveWindow = () => {\r\n    const activeWindow = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'activeWindow');\r\n    if(activeWindow.programId === 'INSP_CFRM'){\r\n      this.onTabChg();\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#endregion\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const INSP_CFRM_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'INSP_CFRM_MAIN') {\r\n        return {\r\n          MAIN_WAIT    : nowState === undefined ? 0 : nowState.MAIN_WAIT,\r\n          MAIN_TOTAL   : nowState === undefined ? 0 : nowState.MAIN_TOTAL,\r\n          MAIN_WEIGHT  : nowState === undefined ? 0 : nowState.MAIN_WEIGHT,\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n          PROC_WAIT    : nowState === undefined ? 0 : nowState.PROC_WAIT,\r\n          DEPT_WAIT    : nowState === undefined ? 0 : nowState.DEPT_WAIT,\r\n          ENTR_WAIT    : nowState === undefined ? 0 : nowState.ENTR_WAIT,\r\n \r\n          DETAIL_SCALE : nowState === undefined ? '' : nowState.DETAIL_SCALE,\r\n          DETAIL_CARNO : nowState === undefined ? '' : nowState.DETAIL_CARNO,\r\n          DETAIL_WEIGHT: nowState === undefined ? '' : nowState.DETAIL_WEIGHT,\r\n          DETAIL_DATE  : nowState === undefined ? '' : nowState.DETAIL_DATE,\r\n\r\n          GRID_SCALE   : nowState === undefined ? '' : nowState.GRID_SCALE,\r\n\r\n          STD_CAM_IMG  : nowState === undefined ? null : nowState.STD_CAM_IMG,\r\n          DUM_CAM_IMG  : nowState === undefined ? null : nowState.DUM_CAM_IMG,\r\n\r\n          STD_CAM_OPEN : nowState === undefined ? false : nowState.STD_CAM_OPEN,\r\n          DUM_CAM_OPEN : nowState === undefined ? false : nowState.DUM_CAM_OPEN,\r\n\r\n          STD_CAM_FOCUS: nowState === undefined ? false : nowState.STD_CAM_FOCUS,\r\n          DUM_CAM_FOCUS: nowState === undefined ? false : nowState.DUM_CAM_FOCUS,\r\n\r\n          STD_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.STD_CAM_REC,\r\n          DUM_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.DUM_CAM_REC,\r\n\r\n          CHIT_MEMO    : nowState === undefined ? '' : nowState.CHIT_MEMO,\r\n          \r\n          CHIT_INFO    : nowState === undefined ? {\r\n                                                    date     : '',\r\n                                                    scaleNumb: '',\r\n                                                    carNumb  : '',\r\n                                                    vender   : '',\r\n                                                    itemFlag : '',\r\n                                                    Wgt      : '',\r\n                                                    loc      : '',\r\n                                                    user     : '',\r\n                                                    chit     : 'N',\r\n                                                  } : nowState.CHIT_INFO\r\n        };\r\n      }\r\n\r\n      if(action.type === 'MAIN_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WAIT : action.MAIN_WAIT\r\n        })\r\n      }else if(action.type === 'MAIN_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_TOTAL : action.MAIN_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WEIGHT : action.MAIN_WEIGHT\r\n        })\r\n      }else if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }else if(action.type === 'PROC_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          PROC_WAIT : action.PROC_WAIT\r\n        })\r\n      }else if(action.type === 'DEPT_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEPT_WAIT : action.DEPT_WAIT\r\n        })\r\n      }else if(action.type === 'ENTR_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ENTR_WAIT : action.ENTR_WAIT\r\n        })\r\n      }else if(action.type === 'DETAIL_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_SCALE : action.DETAIL_SCALE\r\n        })\r\n      }else if(action.type === 'GRID_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          GRID_SCALE : action.GRID_SCALE\r\n        })\r\n      }else if(action.type === 'DETAIL_CARNO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_CARNO : action.DETAIL_CARNO\r\n        })\r\n      }else if(action.type === 'DETAIL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_WEIGHT : action.DETAIL_WEIGHT\r\n        })\r\n      }else if(action.type === 'DETAIL_DATE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_DATE : action.DETAIL_DATE\r\n        })\r\n      }else if(action.type === 'STD_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_IMG : action.STD_CAM_IMG\r\n        })\r\n      }else if(action.type === 'DUM_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_IMG : action.DUM_CAM_IMG\r\n        })\r\n      }else if(action.type === 'STD_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_OPEN : action.STD_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'DUM_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_OPEN : action.DUM_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'STD_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_FOCUS : action.STD_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'DUM_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_FOCUS : action.DUM_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.STD_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.DUM_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec     : nowState.STD_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec     : nowState.DUM_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO_ITEM_FLAG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     :  nowState.CHIT_INFO.date,\r\n            scaleNumb:  nowState.CHIT_INFO.scaleNumb,\r\n            carNumb  :  nowState.CHIT_INFO.carNumb,\r\n            vender   :  nowState.CHIT_INFO.vender,\r\n            itemFlag :  action.itemFlag,\r\n            Wgt      :  nowState.CHIT_INFO.Wgt,\r\n            loc      :  nowState.CHIT_INFO.loc,\r\n            user     :  nowState.CHIT_INFO.user,\r\n            chit     :  nowState.CHIT_INFO.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     : action.date,\r\n            scaleNumb: action.scaleNumb,\r\n            carNumb  : action.carNumb,\r\n            vender   : action.vender,\r\n            itemFlag : action.itemFlag,\r\n            Wgt      : action.Wgt,\r\n            loc      : action.loc,\r\n            user     : action.user,\r\n            chit     : action.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_MEMO'){\r\n        return Object.assign({}, nowState, {\r\n          CHIT_MEMO : action.CHIT_MEMO\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('INSP_CFRM_MAIN', INSP_CFRM_MAIN);\r\n    gfs_subscribe(this.onActiveWindow);\r\n    //#endregion\r\n  }\r\n\r\n  mainGrid = () => {\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n\r\n    YK_WEB_REQ('tally_approve_wait.jsp').then(e => {\r\n      const main = e.data.dataSend;\r\n\r\n      if(main){\r\n\r\n        const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n        const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n    \r\n        const data = main.filter(e => {\r\n          if(search_tp !== null && search_tp !== ''){\r\n            //계근번호\r\n            if(search_tp === '1'){\r\n              if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //차량번호\r\n            else if(search_tp === '2'){\r\n              if(e.carNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //사전등급\r\n            else if(search_tp === '3'){\r\n              if(e.itemGrade.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //업체\r\n            else if(search_tp === '4'){\r\n              if(e.vendor.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            \r\n          }else{\r\n            return true;\r\n          }\r\n        })\r\n    \r\n        if(data.length > 0){\r\n          \r\n          //기존 그리드에서 scaleNumb기준으로 데이터가 없으면 추가한다.\r\n          for(let i = 0; i < data.length; i++){\r\n            const scaleNumb = data[i].scaleNumb;\r\n\r\n            const oldData = grid.getData().find(e => e.scaleNumb === scaleNumb);\r\n            if(!oldData){\r\n              gfg_appendRow(grid, grid.getRowCount(), {\r\n                scaleNumb,\r\n                vehicle_no: data[i].vehicle_no,\r\n                pre_item_grade: data[i].pre_item_grade,\r\n                itemGrade: data[i].itemGrade,\r\n                iron_grade: data[i].iron_grade,\r\n                iron_grade_item_name\t: data[i].iron_grade_item_name,\r\n                reduce_name: data[i].reduce_name,\r\n                reduce_wgt: data[i].reduce_wgt,\r\n                return_gubun_name: data[i].return_gubun_name,\r\n                inspector: data[i].inspector,\r\n                delivery_date: data[i].delivery_date,\r\n                vendor_name: data[i].vendor_name\r\n              }, 'scaleNumb', false);\r\n\r\n              grid.resetOriginData();\r\n              grid.restore();\r\n            }\r\n          }\r\n\r\n          //새로운 정보 기준으로 데이터가 지워졌으면 삭제한다.\r\n          for(let i = 0; i < grid.getData().length; i++){\r\n            const scaleNumb =  grid.getData()[i].scaleNumb;\r\n\r\n            const newData = data.find(e => e.scaleNumb === scaleNumb)\r\n            if(!newData){\r\n              grid.removeRow(i);\r\n\r\n              //지워진 데이터가 기존에 선택된 데이터 이면 초기화 한다.\r\n              const selectScaleNumb = gfs_getStoreValue('INSP_CFRM_MAIN', 'DETAIL_SCALE');\r\n              if(scaleNumb === selectScaleNumb){\r\n                gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n                gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n                gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: '0'});\r\n                gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n              }\r\n            }\r\n          }\r\n\r\n          gfs_dispatch('INSP_CFRM_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n        }else{\r\n          grid.clear();\r\n          gfs_dispatch('INSP_CFRM_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n        }\r\n      }else{\r\n        grid.clear();\r\n        gfs_dispatch('INSP_CFRM_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      }\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n    // this.Retrieve();\r\n    \r\n    this.mainGridInterval = setInterval(e => {\r\n      this.mainGrid();\r\n    }, 2000)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.mainGridInterval);\r\n  }\r\n\r\n  Retrieve = async () => {\r\n\r\n    gfc_showMask();\r\n\r\n    const mainData = await YK_WEB_REQ('tally_approve_wait.jsp');\r\n    const main = mainData.data.dataSend;\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    grid.clear();\r\n    \r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(''); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue('');      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: ''});\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'GRID_SCALE', {GRID_SCALE: ''});\r\n\r\n    //계량증명서 여부 확인.\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'CHIT_INFO', {\r\n      scaleNumb: ''\r\n    });\r\n\r\n    if(main){\r\n      grid.resetData(main);\r\n      gfs_dispatch('INSP_CFRM_MAIN', 'BOT_TOTAL', {BOT_TOTAL: main.length});\r\n      \r\n      await gfc_sleep(100);\r\n\r\n      gfg_setSelectRow(grid);\r\n    }else{\r\n      gfs_dispatch('INSP_CFRM_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n    }\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n\r\n  onSelectChange = async (e) => {\r\n    if(e === null) return;\r\n    \r\n    //기존 등록된 정보\r\n    const dtlInfo = await YK_WEB_REQ(`tally_process_f_sel.jsp?scaleNumb=${e.scaleNumb}`);\r\n    if(!dtlInfo.data.dataSend){\r\n      alert('검수정보를 불러올수 없습니다.');\r\n      return;\r\n    }\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(e.pre_item_grade); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue(dtlInfo.data.dataSend[0].IRON_GRADE);   //고철등급\r\n    const detail_grade2 = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n    await detail_grade2.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${dtlInfo.data.dataSend[0].IRON_GRADE}`, {})});\r\n    detail_grade2.setValue(dtlInfo.data.dataSend[0].IRON_GRADE_ITEM);   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue(dtlInfo.data.dataSend[0].REDUCE_WGT);     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(dtlInfo.data.dataSend[0].REDUCE_WGT_REASON_CODE); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue(dtlInfo.data.dataSend[0].DISCOUNT_CODE);     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue(dtlInfo.data.dataSend[0].DISCOUNT_RATE);    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue(dtlInfo.data.dataSend[0].CAR_TYPE);      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue(dtlInfo.data.dataSend[0].RETURN_CODE);      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue(dtlInfo.data.dataSend[0].RETURN_GUBUN);     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue(dtlInfo.data.dataSend[0].WARNING);  //경고\r\n\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: e.scaleNumb});\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: e.vehicle_no});\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: e.net_weight});\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_DATE', {DETAIL_DATE: e.delivery_date});\r\n\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'GRID_SCALE', {GRID_SCALE: e.scaleNumb});\r\n\r\n    //계량증명서 여부 확인.\r\n    // const chitYn = await gfc_chit_yn_YK(e.scaleNumb);\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'CHIT_INFO', {\r\n      scaleNumb: e.scaleNumb\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager type4' >\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '계근번호'\r\n                            },{\r\n                              code: '2',\r\n                              name: '차량번호'\r\n                            },{\r\n                              code: '3',\r\n                              name: '등급'\r\n                            },{\r\n                              code: '4',\r\n                              name: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       readOnly\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        selectionChange={(e) => this.onSelectChange(e)}\r\n                        rowHeight={46}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        headerClick={(e) => {\r\n                          if(e.columnName === 'chk'){\r\n                            const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n                            if(grid.gridEl.dataset.checked === undefined){\r\n                              grid.gridEl.dataset.checked = true;\r\n                            }else if(grid.gridEl.dataset.checked === 'true'){\r\n                              grid.gridEl.dataset.checked = false;\r\n                            }else{\r\n                              grid.gridEl.dataset.checked = true;\r\n                            }\r\n    \r\n                            for(let i = 0; i < grid.getRowCount(); i++){\r\n                              gfg_setValue(grid, 'chk', grid.gridEl.dataset.checked, i);\r\n                            }\r\n                          }\r\n                        }}\r\n                        columns={[\r\n                          columnCheckbox({\r\n                            name: 'chk',\r\n                            header: '선택',\r\n                            width : 50,\r\n                            readOnly: true,\r\n                            align : 'center',\r\n                            type: 'checkbox'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'scaleNumb',\r\n                            header: '계근번호',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'vehicle_no',\r\n                            header: '차량번호',\r\n                            width : 110,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'pre_item_grade',\r\n                            header: '사전등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'iron_grade',\r\n                            header: '등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),    \r\n                          columnInput({\r\n                            name: 'iron_grade_item_name',\r\n                            header: '상세등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'reduce_name',\r\n                            header: '감량사유',\r\n                            width : 180,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'reduce_wgt',\r\n                            header: '감량',\r\n                            width : 80,\r\n                            readOnly: true,\r\n                            align : 'right'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'return_gubun_name',\r\n                            header: '반품내용',\r\n                            width : 200,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'inspector',\r\n                            header: '검수자',\r\n                            width : 100,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),  \r\n                          columnTextArea({\r\n                            name  : 'delivery_date',\r\n                            header: '출차시간',\r\n                            width : 80,\r\n                            height: 38,\r\n                            // paddingTop: ''\r\n                            readOnly: true,\r\n                            valign:'middle',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                            time  : 'HH:mm'\r\n                          }),\r\n                          columnTextArea({\r\n                            name: 'vendor_name',\r\n                            header: 'Vendor',\r\n                            width : 200,\r\n                            height: 38,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          })\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>전체차량</span><Botspan reducer='INSP_CFRM_MAIN' />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='car_info'>\r\n            <div className='title'><span>계근번호</span><Detailspan flag={1}  reducer='INSP_CFRM_MAIN'/></div>\r\n              <div className='input_list on' id={`content1_${this.props.pgm}`}>\r\n                <ul>\r\n                  <li>\r\n                    <h5>사전등급</h5>\r\n                      <Input pgm     = {this.props.pgm}\r\n                             id      = 'detail_pre_grade'\r\n                             width   = '100%'\r\n                             disabled\r\n                      />\r\n                  </li>\r\n                  <li>\r\n                    <h5>등급책정</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                                id      = 'detail_grade1'\r\n                                value   = 'itemCode'\r\n                                display = 'item'\r\n                                placeholder = '고철등급 검색'\r\n                                height  = {42}\r\n                                etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P005', {})}\r\n                                onChange = {async (e) => {\r\n                                  const combo = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n                                  combo.setValue(null);\r\n\r\n                                  if(e !== undefined && e.value !== ''){\r\n                                    await combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                                    combo.setDisabled(false);\r\n                                  }else{\r\n                                    combo.setDisabled(true);\r\n                                  }\r\n                                }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_grade2'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>감량중량</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_subt'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감량중량 검색(KG)'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P535', {})}\r\n                            onChange = {async (e) => {\r\n                              if(e === undefined) return;\r\n\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_subt_leg');\r\n                              \r\n                              if(e.value === '0'){\r\n                                combo.setValue(null);\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                // await combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                                combo.setDisabled(false);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_subt_leg'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '감량사유 검색'\r\n                          etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P620', {})}\r\n                          isDisabled\r\n                    /> \r\n                  </li>\r\n                  <li>\r\n                    <h5>감가내역</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_depr'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감가내역 검색'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P130', {})}\r\n                            emptyRow\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_depr2');\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e !== undefined && e.value !== ''){\r\n                                combo.setValue(null);\r\n                                combo.setDisabled(false);\r\n                              }else{\r\n                                combo.setDisabled(true);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm = {this.props.pgm}\r\n                          id      = 'detail_depr2'\r\n                          value   = 'code'\r\n                          display = 'name'\r\n                          placeholder = '감가비율'\r\n                          isDisabled\r\n                          data    = {[{\r\n                            'code': '10',\r\n                            'name': '10%'\r\n                          },{\r\n                            'code': '20',\r\n                            'name': '20%'\r\n                          },{\r\n                            'code': '30',\r\n                            'name': '30%'\r\n                          },{\r\n                            'code': '40',\r\n                            'name': '40%'\r\n                          },{\r\n                            'code': '50',\r\n                            'name': '50%'\r\n                          },{\r\n                            'code': '60',\r\n                            'name': '60%'\r\n                          },{\r\n                            'code': '70',\r\n                            'name': '70%'\r\n                          },{\r\n                            'code': '80',\r\n                            'name': '80%'\r\n                          },{\r\n                            'code': '90',\r\n                            'name': '90%'\r\n                          },{\r\n                            'code': '100',\r\n                            'name': '100%'\r\n                          }]}\r\n                          // emptyRow\r\n                    />\r\n                  </li>\r\n                  {/* <li>\r\n                    <h5>하차구역</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_out'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '하차구역 검색(SECTOR)'\r\n                          data    = ''\r\n                          onFocus = {ComboCreate => {\r\n                            YK_WEB_REQ('tally_process_pop.jsp?division=P530', {})\r\n                              .then(res => {\r\n                                ComboCreate({data   : res.data.dataSend,\r\n                                            value  : 'itemCode',\r\n                                            display: 'item'});\r\n                              })\r\n                          }}\r\n                  />\r\n                  </li> */}\r\n                  <li>\r\n                    <h5>차종구분</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_car'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '차종선택'\r\n                          etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P700', {})}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>반품구분</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '일부,전량 선택'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P110', {})}\r\n                            emptyRow\r\n                            onChange = {e => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_rtn2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value === ''){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                combo.setDisabled(false);\r\n                              }\r\n                              // combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                            }}\r\n                    />\r\n                  </div>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn2'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P120', {})}\r\n                            isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>경고</h5>\r\n                    <Checkbox pgm   = {this.props.pgm}\r\n                              id    = 'detail_warning'\r\n                              width = '30px'\r\n                              height= '30px'\r\n\r\n                    />\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <CompleteBtnModify pgm='INSP_CFRM' />\r\n          </div>\r\n\r\n          <div className='car_info'>\r\n            <div className=\"top_btns\">\r\n              <button \r\n                type=\"button\" \r\n                className=\"record\"\r\n                onClick={e => {\r\n                  const scaleNumb = gfs_getStoreValue('INSP_CFRM_MAIN', 'DETAIL_SCALE');\r\n                  \r\n                  if(scaleNumb === '' || scaleNumb === null){\r\n                    alert('선택된 계근번호가 없습니다.');\r\n                    return;\r\n                  }\r\n\r\n                  window.open(`HLSViewer?scaleNumb=${scaleNumb}`, `Snapshot`, 'width=1024, height=768, toolbar=no, menubar=no, scrollbars=no, resizable=yes' ); \r\n                }}><span>녹화영상</span></button>\r\n              <button \r\n                type=\"button\" \r\n                className=\"shot\"\r\n                onClick={e => {\r\n                  const scaleNumb = gfs_getStoreValue('INSP_CFRM_MAIN', 'DETAIL_SCALE');\r\n                  \r\n                  if(scaleNumb === '' || scaleNumb === null){\r\n                    alert('선택된 계근번호가 없습니다.');\r\n                    return;\r\n                  }\r\n\r\n                  window.open(`SnapShot?scaleNumb=${scaleNumb}`, `Snapshot`, 'width=1024, height=768, toolbar=no, menubar=no, scrollbars=no, resizable=yes' ); \r\n                }}\r\n              ><span>스냅샷</span></button>\r\n            </div>\r\n            <Chit pgm={this.props.pgm} id={'chit_memo'} reducer='INSP_CFRM_MAIN'/>\r\n              \r\n            <CompleteBtn pgm='INSP_CFRM' />\r\n          </div>\r\n            {/* <div className='cctv_viewer'>\r\n              <h4>녹화영상</h4>\r\n              <div className='cctv_list'>\r\n                <RecImage \r\n                  seq   = {1}\r\n                  reducer = 'INSP_CFRM_MAIN'\r\n                  cam   = 'STD_CAM_OPEN' \r\n                  focus = 'STD_CAM_FOCUS' \r\n                  rec   = 'STD_CAM_REC' \r\n                  image = 'STD_CAM_IMG'/> \r\n                <RecImage\r\n                  seq   = {2}\r\n                  reducer = 'INSP_CFRM_MAIN'\r\n                  cam   = 'DUM_CAM_OPEN' \r\n                  focus = 'DUM_CAM_FOCUS' \r\n                  rec   = 'DUM_CAM_REC' \r\n                  image = 'DUM_CAM_IMG'/> \r\n              </div>\r\n            </div> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default INSP_CFRM;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\TabList.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\Checkbox.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\CompleteBtn.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\RecImage.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\RecImageDtl.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\TabList.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\INSP_CANC.js",["673","674","675","676","677"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\nimport Checkbox from '../../../Component/Control/Checkbox';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_chit_yn_YK, gfc_sleep } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue, gfs_injectAsyncReducer, gfs_dispatch, gfs_subscribe } from '../../../Method/Store';\r\nimport { gfo_getCombo, gfo_getInput, gfo_getCheckbox } from '../../../Method/Component';\r\nimport { gfg_getGrid, gfg_setSelectRow, gfg_setValue, gfg_appendRow } from '../../../Method/Grid';\r\nimport { getDynamicSql_Oracle } from '../../../db/Oracle/Oracle';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { TextArea as columnTextArea } from '../../../Component/Grid/Column/TextArea';\r\nimport { Checkbox as columnCheckbox } from '../../../Component/Grid/Column/Checkbox';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\nimport Detailspan from '../Common/Detailspan';\r\nimport Botspan from '../Common/Botspan';\r\nimport Chit from './Chit';\r\nimport TabList from './TabList';\r\nimport RecImage from './RecImage';\r\nimport CompleteBtn from './CompleteBtn';\r\nimport CompleteBtnModify from './CompleteBtnModify';\r\n\r\nimport { YK_WEB_REQ } from '../../../WebReq/WebReq';\r\n//#endregion\r\n\r\nclass INSP_CANC extends Component {\r\n\r\n  state = {\r\n    wait_list: [],\r\n    scaleNumb: ''\r\n  }\r\n\r\n  onTabChg = async() => {\r\n\r\n  }\r\n\r\n  //#region onActiveWindow 스토어 subscribe로 실행됨.\r\n  onActiveWindow = () => {\r\n    const activeWindow = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'activeWindow');\r\n    if(activeWindow.programId === 'INSP_CANC'){\r\n      this.onTabChg();\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#endregion\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const INSP_CANC_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'INSP_CANC_MAIN') {\r\n        return {\r\n          MAIN_WAIT    : nowState === undefined ? 0 : nowState.MAIN_WAIT,\r\n          MAIN_TOTAL   : nowState === undefined ? 0 : nowState.MAIN_TOTAL,\r\n          MAIN_WEIGHT  : nowState === undefined ? 0 : nowState.MAIN_WEIGHT,\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n          PROC_WAIT    : nowState === undefined ? 0 : nowState.PROC_WAIT,\r\n          DEPT_WAIT    : nowState === undefined ? 0 : nowState.DEPT_WAIT,\r\n          ENTR_WAIT    : nowState === undefined ? 0 : nowState.ENTR_WAIT,\r\n \r\n          DETAIL_SCALE : nowState === undefined ? '' : nowState.DETAIL_SCALE,\r\n          DETAIL_CARNO : nowState === undefined ? '' : nowState.DETAIL_CARNO,\r\n          DETAIL_WEIGHT: nowState === undefined ? '' : nowState.DETAIL_WEIGHT,\r\n          DETAIL_DATE  : nowState === undefined ? '' : nowState.DETAIL_DATE,\r\n\r\n          GRID_SCALE   : nowState === undefined ? '' : nowState.GRID_SCALE,\r\n\r\n          STD_CAM_IMG  : nowState === undefined ? null : nowState.STD_CAM_IMG,\r\n          DUM_CAM_IMG  : nowState === undefined ? null : nowState.DUM_CAM_IMG,\r\n\r\n          STD_CAM_OPEN : nowState === undefined ? false : nowState.STD_CAM_OPEN,\r\n          DUM_CAM_OPEN : nowState === undefined ? false : nowState.DUM_CAM_OPEN,\r\n\r\n          STD_CAM_FOCUS: nowState === undefined ? false : nowState.STD_CAM_FOCUS,\r\n          DUM_CAM_FOCUS: nowState === undefined ? false : nowState.DUM_CAM_FOCUS,\r\n\r\n          STD_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.STD_CAM_REC,\r\n          DUM_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.DUM_CAM_REC,\r\n\r\n          CHIT_MEMO    : nowState === undefined ? '' : nowState.CHIT_MEMO,\r\n          \r\n          CHIT_INFO    : nowState === undefined ? {\r\n                                                    date     : '',\r\n                                                    scaleNumb: '',\r\n                                                    carNumb  : '',\r\n                                                    vender   : '',\r\n                                                    itemFlag : '',\r\n                                                    Wgt      : '',\r\n                                                    loc      : '',\r\n                                                    user     : '',\r\n                                                    chit     : 'N',\r\n                                                  } : nowState.CHIT_INFO\r\n        };\r\n      }\r\n\r\n      if(action.type === 'MAIN_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WAIT : action.MAIN_WAIT\r\n        })\r\n      }else if(action.type === 'MAIN_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_TOTAL : action.MAIN_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WEIGHT : action.MAIN_WEIGHT\r\n        })\r\n      }else if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }else if(action.type === 'PROC_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          PROC_WAIT : action.PROC_WAIT\r\n        })\r\n      }else if(action.type === 'DEPT_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEPT_WAIT : action.DEPT_WAIT\r\n        })\r\n      }else if(action.type === 'ENTR_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ENTR_WAIT : action.ENTR_WAIT\r\n        })\r\n      }else if(action.type === 'DETAIL_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_SCALE : action.DETAIL_SCALE\r\n        })\r\n      }else if(action.type === 'GRID_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          GRID_SCALE : action.GRID_SCALE\r\n        })\r\n      }else if(action.type === 'DETAIL_CARNO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_CARNO : action.DETAIL_CARNO\r\n        })\r\n      }else if(action.type === 'DETAIL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_WEIGHT : action.DETAIL_WEIGHT\r\n        })\r\n      }else if(action.type === 'DETAIL_DATE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_DATE : action.DETAIL_DATE\r\n        })\r\n      }else if(action.type === 'STD_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_IMG : action.STD_CAM_IMG\r\n        })\r\n      }else if(action.type === 'DUM_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_IMG : action.DUM_CAM_IMG\r\n        })\r\n      }else if(action.type === 'STD_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_OPEN : action.STD_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'DUM_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_OPEN : action.DUM_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'STD_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_FOCUS : action.STD_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'DUM_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_FOCUS : action.DUM_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.STD_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.DUM_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec     : nowState.STD_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec     : nowState.DUM_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO_ITEM_FLAG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     :  nowState.CHIT_INFO.date,\r\n            scaleNumb:  nowState.CHIT_INFO.scaleNumb,\r\n            carNumb  :  nowState.CHIT_INFO.carNumb,\r\n            vender   :  nowState.CHIT_INFO.vender,\r\n            itemFlag :  action.itemFlag,\r\n            Wgt      :  nowState.CHIT_INFO.Wgt,\r\n            loc      :  nowState.CHIT_INFO.loc,\r\n            user     :  nowState.CHIT_INFO.user,\r\n            chit     :  nowState.CHIT_INFO.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     : action.date,\r\n            scaleNumb: action.scaleNumb,\r\n            carNumb  : action.carNumb,\r\n            vender   : action.vender,\r\n            itemFlag : action.itemFlag,\r\n            Wgt      : action.Wgt,\r\n            loc      : action.loc,\r\n            user     : action.user,\r\n            chit     : action.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_MEMO'){\r\n        return Object.assign({}, nowState, {\r\n          CHIT_MEMO : action.CHIT_MEMO\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('INSP_CANC_MAIN', INSP_CANC_MAIN);\r\n    gfs_subscribe(this.onActiveWindow);\r\n    //#endregion\r\n  }\r\n  \r\n  mainGrid = () => {\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    \r\n    YK_WEB_REQ('tally_approve_cancel.jsp').then(e => {\r\n      const main = e.data.dataSend;\r\n\r\n      if(main){\r\n\r\n        const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n        const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n    \r\n        const data = main.filter(e => {\r\n          if(search_tp !== null && search_tp !== ''){\r\n            //계근번호\r\n            if(search_tp === '1'){\r\n              if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //차량번호\r\n            else if(search_tp === '2'){\r\n              if(e.carNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //사전등급\r\n            else if(search_tp === '3'){\r\n              if(e.itemGrade.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //업체\r\n            else if(search_tp === '4'){\r\n              if(e.vendor.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            \r\n          }else{\r\n            return true;\r\n          }\r\n        })\r\n    \r\n        if(data.length > 0){\r\n          \r\n          //기존 그리드에서 scaleNumb기준으로 데이터가 없으면 추가한다.\r\n          for(let i = 0; i < data.length; i++){\r\n            const scaleNumb = data[i].scaleNumb;\r\n\r\n            const oldData = grid.getData().find(e => e.scaleNumb === scaleNumb);\r\n            if(!oldData){\r\n              gfg_appendRow(grid, grid.getRowCount(), {\r\n                scaleNumb,\r\n                vehicle_no: data[i].vehicle_no,\r\n                pre_item_grade: data[i].pre_item_grade,\r\n                iron_grade_item_name: data[i].iron_grade_item_name,\r\n                reduce_name: data[i].reduce_name,\r\n                reduce_wgt: data[i].reduce_wgt,\r\n                return_gubun_name: data[i].return_gubun_name,\r\n                inspector: data[i].inspector,\r\n                delivery_date: data[i].delivery_date,\r\n                vendor_name: data[i].vendor_name\r\n              }, 'scaleNumb', false);\r\n\r\n              grid.resetOriginData();\r\n              grid.restore();\r\n            }\r\n          }\r\n\r\n          //새로운 정보 기준으로 데이터가 지워졌으면 삭제한다.\r\n          for(let i = 0; i < grid.getData().length; i++){\r\n            const scaleNumb =  grid.getData()[i].scaleNumb;\r\n\r\n            const newData = data.find(e => e.scaleNumb === scaleNumb)\r\n            if(!newData){\r\n              grid.removeRow(i);\r\n\r\n              //지워진 데이터가 기존에 선택된 데이터 이면 초기화 한다.\r\n              const selectScaleNumb = gfs_getStoreValue('INSP_CANC_MAIN', 'DETAIL_SCALE');\r\n              if(scaleNumb === selectScaleNumb){\r\n                gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n                gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n                gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: '0'});\r\n                gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n              }\r\n            }\r\n          }\r\n\r\n          gfs_dispatch('INSP_CANC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n        }else{\r\n          grid.clear();\r\n          gfs_dispatch('INSP_CANC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n        }\r\n      }else{\r\n        grid.clear();\r\n        gfs_dispatch('INSP_CANC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      }\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n    // this.Retrieve();\r\n    \r\n    this.mainGridInterval = setInterval(e => {\r\n      this.mainGrid();\r\n    }, 2000)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.mainGridInterval);\r\n  }\r\n\r\n  Retrieve = async () => {\r\n\r\n    gfc_showMask();\r\n\r\n    const mainData = await YK_WEB_REQ('tally_approve_cancle.jsp');\r\n    const main = mainData.data.dataSend;\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    grid.clear();\r\n    \r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(''); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue('');      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: ''});\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n\r\n    gfs_dispatch('INSP_CANC_MAIN', 'GRID_SCALE', {GRID_SCALE: ''});\r\n\r\n    //계량증명서 여부 확인.\r\n    gfs_dispatch('INSP_CANC_MAIN', 'CHIT_INFO', {\r\n      scaleNumb: ''\r\n    });\r\n\r\n    if(main){\r\n      grid.resetData(main);\r\n      gfs_dispatch('INSP_CANC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: main.length});\r\n      \r\n      await gfc_sleep(100);\r\n\r\n      gfg_setSelectRow(grid);\r\n    }else{\r\n      gfs_dispatch('INSP_CANC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n    }\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n\r\n  onSelectChange = async (e) => {\r\n    if(e === null) return;\r\n    \r\n    //기존 등록된 정보\r\n    const dtlInfo = await YK_WEB_REQ(`tally_process_f_sel.jsp?scaleNumb=${e.scaleNumb}`);\r\n    if(!dtlInfo.data.dataSend){\r\n      alert('검수정보를 불러올수 없습니다.');\r\n      return;\r\n    }\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(e.pre_item_grade); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue(dtlInfo.data.dataSend[0].IRON_GRADE);   //고철등급\r\n    const detail_grade2 = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n    await detail_grade2.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${dtlInfo.data.dataSend[0].IRON_GRADE}`, {})});\r\n    detail_grade2.setValue(dtlInfo.data.dataSend[0].IRON_GRADE_ITEM);   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue(dtlInfo.data.dataSend[0].REDUCE_WGT);     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(dtlInfo.data.dataSend[0].REDUCE_WGT_REASON_CODE); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue(dtlInfo.data.dataSend[0].DISCOUNT_CODE);     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue(dtlInfo.data.dataSend[0].DISCOUNT_RATE);    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue(dtlInfo.data.dataSend[0].CAR_TYPE);      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue(dtlInfo.data.dataSend[0].RETURN_CODE);      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue(dtlInfo.data.dataSend[0].RETURN_GUBUN);     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue(dtlInfo.data.dataSend[0].WARNING);  //경고\r\n\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: e.scaleNumb});\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: e.vehicle_no});\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: e.net_weight});\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: e.delivery_date});\r\n\r\n    gfs_dispatch('INSP_CANC_MAIN', 'GRID_SCALE', {GRID_SCALE: e.scaleNumb});\r\n\r\n    //계량증명서 여부 확인.\r\n    // const chitYn = await gfc_chit_yn_YK(e.scaleNumb);\r\n    gfs_dispatch('INSP_CANC_MAIN', 'CHIT_INFO', {\r\n      scaleNumb: e.scaleNumb\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager type4' >\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '계근번호'\r\n                            },{\r\n                              code: '2',\r\n                              name: '차량번호'\r\n                            },{\r\n                              code: '3',\r\n                              name: '등급'\r\n                            },{\r\n                              code: '4',\r\n                              name: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       readOnly\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        selectionChange={(e) => this.onSelectChange(e)}\r\n                        rowHeight={46}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        headerClick={(e) => {\r\n                          if(e.columnName === 'chk'){\r\n                            const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n                            if(grid.gridEl.dataset.checked === undefined){\r\n                              grid.gridEl.dataset.checked = true;\r\n                            }else if(grid.gridEl.dataset.checked === 'true'){\r\n                              grid.gridEl.dataset.checked = false;\r\n                            }else{\r\n                              grid.gridEl.dataset.checked = true;\r\n                            }\r\n    \r\n                            for(let i = 0; i < grid.getRowCount(); i++){\r\n                              gfg_setValue(grid, 'chk', grid.gridEl.dataset.checked, i);\r\n                            }\r\n                          }\r\n                        }}\r\n                        columns={[\r\n                          columnCheckbox({\r\n                            name: 'chk',\r\n                            header: '선택',\r\n                            width : 50,\r\n                            readOnly: true,\r\n                            align : 'center',\r\n                            type: 'checkbox'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'scaleNumb',\r\n                            header: '계근번호',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'vehicle_no',\r\n                            header: '차량번호',\r\n                            width : 110,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'pre_item_grade',\r\n                            header: '사전등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'iron_grade',\r\n                            header: '등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),    \r\n                          columnInput({\r\n                            name: 'iron_grade_item_name',\r\n                            header: '상세등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'reduce_name',\r\n                            header: '감량사유',\r\n                            width : 180,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'reduce_wgt',\r\n                            header: '감량',\r\n                            width : 80,\r\n                            readOnly: true,\r\n                            align : 'right'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'return_gubun_name',\r\n                            header: '반품내용',\r\n                            width : 200,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'inspector',\r\n                            header: '검수자',\r\n                            width : 100,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),  \r\n                          columnTextArea({\r\n                            name  : 'delivery_date',\r\n                            header: '출차시간',\r\n                            width : 80,\r\n                            height: 38,\r\n                            // paddingTop: ''\r\n                            readOnly: true,\r\n                            valign:'middle',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                            time  : 'HH:mm'\r\n                          }),\r\n                          columnTextArea({\r\n                            name: 'vendor_name',\r\n                            header: 'Vendor',\r\n                            width : 200,\r\n                            height: 38,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          })\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>전체차량</span><Botspan reducer='INSP_CANC_MAIN' />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='car_info'>\r\n            <div className='title'><span>계근번호</span><Detailspan flag={1}  reducer='INSP_CANC_MAIN'/></div>\r\n\r\n            <div className='input_list on' id={`content1_${this.props.pgm}`}>\r\n                <ul>\r\n                  <li>\r\n                    <h5>사전등급</h5>\r\n                      <Input pgm     = {this.props.pgm}\r\n                             id      = 'detail_pre_grade'\r\n                             width   = '100%'\r\n                             disabled\r\n                      />\r\n                  </li>\r\n                  <li>\r\n                    <h5>등급책정</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                                id      = 'detail_grade1'\r\n                                value   = 'itemCode'\r\n                                display = 'item'\r\n                                placeholder = '고철등급 검색'\r\n                                height  = {42}\r\n                                etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P005', {})}\r\n                                onChange = {async (e) => {\r\n                                  const combo = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n                                  combo.setValue(null);\r\n\r\n                                  if(e !== undefined && e.value !== ''){\r\n                                    await combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                                    combo.setDisabled(false);\r\n                                  }else{\r\n                                    combo.setDisabled(true);\r\n                                  }\r\n                                }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_grade2'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>감량중량</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_subt'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감량중량 검색(KG)'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P535', {})}\r\n                            onChange = {async (e) => {\r\n                              if(e === undefined) return;\r\n\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_subt_leg');\r\n                              \r\n                              if(e.value === '0'){\r\n                                combo.setValue(null);\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                // await combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                                combo.setDisabled(false);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_subt_leg'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '감량사유 검색'\r\n                          etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P620', {})}\r\n                          isDisabled\r\n                    /> \r\n                  </li>\r\n                  <li>\r\n                    <h5>감가내역</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_depr'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감가내역 검색'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P130', {})}\r\n                            emptyRow\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_depr2');\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e !== undefined && e.value !== ''){\r\n                                combo.setValue(null);\r\n                                combo.setDisabled(false);\r\n                              }else{\r\n                                combo.setDisabled(true);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm = {this.props.pgm}\r\n                          id      = 'detail_depr2'\r\n                          value   = 'code'\r\n                          display = 'name'\r\n                          placeholder = '감가비율'\r\n                          isDisabled\r\n                          data    = {[{\r\n                            'code': '10',\r\n                            'name': '10%'\r\n                          },{\r\n                            'code': '20',\r\n                            'name': '20%'\r\n                          },{\r\n                            'code': '30',\r\n                            'name': '30%'\r\n                          },{\r\n                            'code': '40',\r\n                            'name': '40%'\r\n                          },{\r\n                            'code': '50',\r\n                            'name': '50%'\r\n                          },{\r\n                            'code': '60',\r\n                            'name': '60%'\r\n                          },{\r\n                            'code': '70',\r\n                            'name': '70%'\r\n                          },{\r\n                            'code': '80',\r\n                            'name': '80%'\r\n                          },{\r\n                            'code': '90',\r\n                            'name': '90%'\r\n                          },{\r\n                            'code': '100',\r\n                            'name': '100%'\r\n                          }]}\r\n                          // emptyRow\r\n                    />\r\n                  </li>\r\n                  {/* <li>\r\n                    <h5>하차구역</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_out'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '하차구역 검색(SECTOR)'\r\n                          data    = ''\r\n                          onFocus = {ComboCreate => {\r\n                            YK_WEB_REQ('tally_process_pop.jsp?division=P530', {})\r\n                              .then(res => {\r\n                                ComboCreate({data   : res.data.dataSend,\r\n                                            value  : 'itemCode',\r\n                                            display: 'item'});\r\n                              })\r\n                          }}\r\n                  />\r\n                  </li> */}\r\n                  <li>\r\n                    <h5>차종구분</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_car'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '차종선택'\r\n                          etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P700', {})}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>반품구분</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '일부,전량 선택'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P110', {})}\r\n                            emptyRow\r\n                            onChange = {e => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_rtn2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value === ''){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                combo.setDisabled(false);\r\n                              }\r\n                              // combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                            }}\r\n                    />\r\n                  </div>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn2'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P120', {})}\r\n                            isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>경고</h5>\r\n                    <Checkbox pgm   = {this.props.pgm}\r\n                              id    = 'detail_warning'\r\n                              width = '30px'\r\n                              height= '30px'\r\n\r\n                    />\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              \r\n              <CompleteBtnModify pgm='INSP_CANC'/>\r\n          </div>\r\n\r\n          <div className='car_info'>\r\n            <div className=\"top_btns\">\r\n              <button \r\n                type=\"button\" \r\n                className=\"record\"\r\n                onClick={e => {\r\n                  const scaleNumb = gfs_getStoreValue('INSP_CANC_MAIN', 'DETAIL_SCALE');\r\n                  \r\n                  if(scaleNumb === '' || scaleNumb === null){\r\n                    alert('선택된 계근번호가 없습니다.');\r\n                    return;\r\n                  }\r\n\r\n                  window.open(`HLSViewer?scaleNumb=${scaleNumb}`, `Snapshot`, 'width=1024, height=768, toolbar=no, menubar=no, scrollbars=no, resizable=yes' ); \r\n                }}><span>녹화영상</span></button>\r\n              <button \r\n                type=\"button\" \r\n                className=\"shot\"\r\n                onClick={e => {\r\n                  const scaleNumb = gfs_getStoreValue('INSP_CANC_MAIN', 'DETAIL_SCALE');\r\n                  \r\n                  if(scaleNumb === '' || scaleNumb === null){\r\n                    alert('선택된 계근번호가 없습니다.');\r\n                    return;\r\n                  }\r\n\r\n                  window.open(`SnapShot?scaleNumb=${scaleNumb}`, `Snapshot`, 'width=1024, height=768, toolbar=no, menubar=no, scrollbars=no, resizable=yes' ); \r\n                }}><span>스냅샷</span></button>\r\n            </div>\r\n            <Chit pgm={this.props.pgm} id={'chit_memo'} reducer='INSP_CANC_MAIN'/>\r\n              \r\n            <CompleteBtn pgm='INSP_CANC'/>\r\n          </div>\r\n            {/* <div className='cctv_viewer'>\r\n              <h4>녹화영상</h4>\r\n              <div className='cctv_list'>\r\n                <RecImage \r\n                  seq   = {1}\r\n                  cam   = 'STD_CAM_OPEN' \r\n                  focus = 'STD_CAM_FOCUS' \r\n                  rec   = 'STD_CAM_REC' \r\n                  image = 'STD_CAM_IMG'/> \r\n                <RecImage\r\n                  seq   = {2}\r\n                  cam   = 'DUM_CAM_OPEN' \r\n                  focus = 'DUM_CAM_FOCUS' \r\n                  rec   = 'DUM_CAM_REC' \r\n                  image = 'DUM_CAM_IMG'/> \r\n              </div>\r\n            </div> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default INSP_CANC;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RecImageDtl.js",["678"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { MILESTONE, RTSP } from '../../../WebReq/WebReq';\r\nimport Modal from 'react-modal';\r\nimport { Rnd } from 'react-rnd';\r\nimport { gfs_dispatch, gfs_getStoreValue, gfs_injectAsyncReducer } from '../../../Method/Store';\r\nimport { gfc_showMask, gfc_sleep, gfc_hideMask, gfc_screenshot_srv_from_milestone } from '../../../Method/Comm';\r\n\r\nconst jsmpeg = require('jsmpeg');\r\n\r\nfunction RecImageDtl(props) {\r\n  const imageRef = useRef();\r\n  const dragRef = useRef();\r\n\r\n  const isOpen = useSelector((e) => {\r\n    return e.INSP_PROC_MAIN[props.cam];\r\n  }, (p, n) => {\r\n    return p === n;\r\n  });\r\n  \r\n  const setModalIsOpen = (open) => {\r\n    \r\n    let obj = {};\r\n    obj[props.cam] = open;\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', props.cam, obj);\r\n  }\r\n\r\n  const start = async() => {\r\n      MILESTONE({reqAddr: 'CONNECT',\r\n                 device : props.device})\r\n  }\r\n\r\n  const style={\r\n    overlay: {\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      zIndex: 1000,\r\n      backgroundColor: 'rgba(255, 255, 255, 0.75)'\r\n    },\r\n    content: {\r\n      position: 'absolute',\r\n      top: '40px',\r\n      left: '40px',\r\n      right: '40px',\r\n      bottom: '40px',\r\n      height:'auto',\r\n      // border: '1px solid #ccc',\r\n      // background: '#fff',\r\n      overflow: 'auto',\r\n      WebkitOverflowScrolling: 'touch',\r\n      borderRadius: '4px',\r\n      outline: 'none',\r\n      // padding: '20px'\r\n    }\r\n  };\r\n\r\n  let client = null;\r\n  let canvas = null;\r\n  const setRtsp = () => {\r\n    client = new WebSocket(`ws://ims.yksteel.co.kr:90/ws/${props.cameraPort}`);\r\n    canvas = imageRef.current;\r\n    new jsmpeg(client, {\r\n      canvas,\r\n      // pauseWhenHidden: false \r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    start();\r\n\r\n    if(props.seq > 2){\r\n      const dragReducer = (nowState, action) => {\r\n        if(action.reducer !== 'INSP_PROC_MAIN_DRAG') {\r\n          return {\r\n            CLICK: nowState === undefined ? false :nowState.CLICK\r\n          }\r\n        }\r\n\r\n        if(action.type === 'ONMOUSEDOWN'){\r\n\r\n          return Object.assign({}, nowState, {\r\n            CLICK : action.CLICK\r\n          })\r\n        }\r\n      }\r\n\r\n      gfs_injectAsyncReducer('INSP_PROC_MAIN_DRAG', dragReducer);\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  useEffect(() => { \r\n\r\n    RTSP({reqAddr: 'RTSPStart',\r\n          device   : props.device, \r\n          // streamUrl: `rtsp://admin:admin@10.10.10.136:554/live/${props.device}`,\r\n          streamUrl: props.rtspAddr,\r\n          port: props.cameraPort,\r\n          width: 1920,\r\n          height: 1080,\r\n          fps: 24\r\n        }).then(e => {\r\n          if(e.data === 'OK'){\r\n            setRtsp();\r\n          }\r\n        })\r\n\r\n    return() => {\r\n      if(client !== null && client !== undefined){\r\n        client.close();\r\n      }\r\n    }\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isOpen, props.rtspAddr])\r\n\r\n  // const debounceOnClick = throttle((e, ptz) => {\r\n  //   TOKEN({}).then(e => {\r\n\r\n  //     MILESTONE({reqAddr: 'PTZ',\r\n  //     device: props.device,\r\n  //     ptz})\r\n  //   })\r\n\r\n  // }, 1000);\r\n\r\n  const debounceOnClick = (e, ptz) => {\r\n    MILESTONE({reqAddr: 'PTZ',\r\n    device: props.device,\r\n    ptz})\r\n\r\n  };\r\n\r\n  const onClick = (e, ptz) => {\r\n    e.stopPropagation();\r\n    debounceOnClick(e, ptz);\r\n  }\r\n\r\n  const img = <>\r\n                {(props.seq < 3 || isOpen === true)?\r\n                  <>\r\n                    <canvas \r\n                      data-seq={props.seq}\r\n                      ref={imageRef} \r\n                      style={{\r\n                        width:'100%', \r\n                        height:'100%'\r\n                      }}\r\n                      onDoubleClick={e => {\r\n                        // setModalIsOpen(true);\r\n                        const areaTp = gfs_getStoreValue('USER_REDUCER', 'AREA_TP');\r\n                        window.open(`RtspFullScreen?areaTp=${areaTp}`, `RTSP`, 'width=1920, height=1080, toolbar=no, menubar=no, scrollbars=no, resizable=yes' ); \r\n                      }}\r\n                    />\r\n                    <div className='picture_save' onClick={e => {\r\n                      const scaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n                      if(scaleNumb === '' || scaleNumb === undefined || scaleNumb === null){\r\n                        alert('선택된 계근번호가 없습니다.');\r\n                        return;\r\n                      }\r\n\r\n                      gfc_showMask();\r\n\r\n                      gfc_screenshot_srv_from_milestone(props.device, scaleNumb).then(\r\n                        e => {\r\n                          gfc_hideMask();\r\n                          if(e.data.Result !== 'OK'){\r\n                            alert('파일저장에 실패 했습니다.');\r\n                          }\r\n                        }\r\n                      )\r\n                    }}>\r\n                    </div>\r\n                    \r\n                    <div className='direction'>\r\n                      <button \r\n                        type='' \r\n                        className='left' \r\n                        onClick={e => {\r\n                          e.stopPropagation();\r\n                          onClick(e, 'left')}}>왼쪽\r\n                      </button>\r\n                      <button \r\n                        type='' \r\n                        className='top' \r\n                        onClick={e => {\r\n                          e.stopPropagation();\r\n                          onClick(e, 'up')}}>위쪽\r\n                      </button>\r\n                      <button \r\n                        type='' \r\n                        className='down' \r\n                        onClick={e => {\r\n                          e.stopPropagation();\r\n                          onClick(e, 'down')}}>아래\r\n                      </button>\r\n                      <button \r\n                        type='' \r\n                        className='right' \r\n                        onClick={e => {\r\n                          e.stopPropagation();\r\n                          onClick(e, 'right')}}>오른쪽\r\n                      </button>\r\n                    </div>\r\n                    <div className={isOpen === true ? 'controller on' : 'controller'}>\r\n                      <button type='' className='plus' onClick={e => {\r\n                        e.stopPropagation();\r\n                        onClick(e, 'zoomin')}}>확대</button>\r\n                      <button type='' className='minus' onClick={e => {\r\n                        e.stopPropagation();\r\n                        onClick(e, 'zoomout')}}>축소</button>\r\n                    </div>\r\n                  </>\r\n\r\n                  :\r\n                  \r\n                  <div\r\n                  >\r\n                    <Rnd\r\n                      ref={dragRef}\r\n                      default={{\r\n                        x: 0,\r\n                        y: 0,\r\n                        width: '100%',\r\n                        height: '100%'\r\n                      }}\r\n                      style={{\r\n                        // zIndex: 100,\r\n                        overflow:'hidden'\r\n                      }}\r\n                      enableResizing={false}\r\n                      onDragStop={(e, data) => {\r\n                        dragRef.current.updatePosition({x:0, y:0});\r\n                      }}\r\n                    >\r\n                      <canvas \r\n                        ref={imageRef} \r\n                        style={{\r\n                          width:'100%', \r\n                          height:'100%',\r\n                          overflow:'hidden'\r\n                        }}\r\n                        onDoubleClick={e => {\r\n                          setModalIsOpen(true);\r\n                        }}\r\n                        data-seq={props.seq}\r\n                        onMouseOver={e => e.stopPropagation()}\r\n                        onMouseDown={async e => {\r\n                          // e.stopPropagation();\r\n                          await gfc_sleep(50);\r\n                          gfs_dispatch('INSP_PROC_MAIN_DRAG', 'ONMOUSEDOWN', {CLICK: false});\r\n                        }}\r\n                        onMouseUp={async e => {\r\n                          // e.stopPropagation();\r\n                          await gfc_sleep(50);\r\n                          gfs_dispatch('INSP_PROC_MAIN_DRAG', 'ONMOUSEDOWN', {CLICK: true});\r\n                        }}\r\n                      />\r\n                    </Rnd>\r\n                  </div>\r\n                }\r\n              </>;\r\n\r\n  return (\r\n    <>\r\n      {isOpen === false ? img : \r\n        <Modal style={style}\r\n              className='cctv'\r\n              isOpen={isOpen} \r\n              onRequestClose={() => setModalIsOpen(false)} \r\n              ariaHideApp={false}>\r\n              {img}\r\n        </Modal>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RecImageDtl;","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\MENU\\Menu.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\COMM\\MENU\\MENU.js",["679","680"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_getAtt } from '../../../Method/Comm';\r\nimport { gfs_injectAsyncReducer, gfs_dispatch, gfs_getStoreValue } from '../../../Method/Store';\r\nimport { gfg_getGrid, gfg_getRow, gfg_appendRow, gfg_getModyfiedRow, gfg_setSelectRow, gfg_getRowCount } from '../../../Method/Grid';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport Layout from '../../../Component/Layout/Layout';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Combobox as columnCombobox }  from '../../../Component/Grid/Column/Combobox';\r\nimport { Number as columnNumber} from '../../../Component/Grid/Column/Number';\r\nimport { Checkbox as columnCheckbox } from '../../../Component/Grid/Column/Checkbox';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\n// import Botspan from '../Common/Botspan';\r\n\r\nimport { getDynamicSql_Oracle } from '../../../db/Oracle/Oracle';\r\nimport { getSp_Oracle } from '../../../db/Oracle/Oracle';\r\nimport { YK_WEB_REQ } from '../../../WebReq/WebReq';\r\n//#endregion\r\n\r\nclass MENU extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const MENU_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'MENU_MAIN') {\r\n        return {\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n        };\r\n      }\r\n\r\n      if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('MENU_MAIN', MENU_MAIN);\r\n    //#endregion\r\n  }\r\n\r\n  componentDidMount(){\r\n    \r\n  }\r\n\r\n  callOracle = async(file, fn, param) => {\r\n    let result = await getDynamicSql_Oracle(\r\n      file,\r\n      fn,\r\n      param\r\n    ); \r\n\r\n    return result;\r\n  }\r\n\r\n  Delete = () => {\r\n    // const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    // const selectRow = gfg_getRow(grid);\r\n    // if(selectRow === null){\r\n    //   alert('선택된건이 없습니다.');\r\n    //   return;\r\n    // }\r\n\r\n    // if(selectRow.phantom){\r\n    //   grid.removeRow(selectRow['rowKey']);\r\n    //   return;\r\n    // }else{\r\n    //   this.callOracle(\r\n    //     'Common/Common',\r\n    //     'ZM_IMS_CAMERA_DELETE',\r\n    //     [{\r\n    //       AREA_TP: selectRow.AREA_TP,\r\n    //       CAMERA_IP: selectRow.CAMERA_IP\r\n    //     }]\r\n    //   )\r\n    // }\r\n    \r\n    // grid.resetOriginData()\r\n    // grid.restore();\r\n\r\n    // this.Retrieve();\r\n  }\r\n\r\n  Save = async() => {\r\n    const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n    const dtlGrid = gfg_getGrid(this.props.pgm, 'detail10');\r\n\r\n    if(gfg_getRowCount(mainGrid) === 0){\r\n      alert('데이터가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    if(gfg_getRowCount(dtlGrid) === 0){\r\n      alert('데이터가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    const dtlMod = gfg_getModyfiedRow(dtlGrid);\r\n    if(dtlMod.length === 0){\r\n      alert('추가되거나 수정된건 이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    let param = [];\r\n\r\n    dtlMod.forEach(e => {\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_MENU_DETAIL10(\r\n                    :p_COP_CD,\r\n                    :p_RowStatus,\r\n                    :p_MENU_GRP,\r\n                    :p_MENU_ID,\r\n                    :p_MENU_NAM,\r\n                    :p_USE_YN,\r\n                    :p_PGM_ID,\r\n                    :p_PGM_ROOT,\r\n                    :p_MENU_SEQ, \r\n                    :p_RETAUT_YN,\r\n                    :p_INSAUT_YN,\r\n                    :p_SAVAUT_YN,\r\n                    :p_DELAUT_YN,\r\n                    :p_USER_ID,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n          p_RowStatus : e.rowStatus,\r\n          p_MENU_GRP  : gfg_getRow(mainGrid).MENU_ID,\r\n          p_MENU_ID   : e.MENU_ID,\r\n          p_MENU_NAM  : e.MENU_NAM,\r\n          p_USE_YN    : e.USE_YN,\r\n          p_PGM_ID    : e.PGM_ID,\r\n          p_PGM_ROOT  : e.PGM_ROOT,\r\n          p_MENU_SEQ  : e.MENU_SEQ,\r\n          p_RETAUT_YN : e.RETAUT_YN,\r\n          p_INSAUT_YN : e.INSAUT_YN,\r\n          p_SAVAUT_YN : e.SAVAUT_YN,\r\n          p_DELAUT_YN : e.DELAUT_YN,\r\n          p_USER_ID   : gfs_getStoreValue('USER_REDUCER', 'USER_ID')\r\n        },\r\n        errSeq: e.rowKey\r\n      })\r\n    })\r\n\r\n    gfc_showMask();\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS !== 'Y'){\r\n      alert(gfc_getAtt(result.data.MSG_CODE));\r\n      gfg_setSelectRow(dtlGrid, result.data.COL_NAM, result.data.SEQ);\r\n      gfc_hideMask();\r\n\r\n      return;\r\n    }else{\r\n      alert(gfc_getAtt(result.data.MSG_CODE));\r\n      \r\n      this.Retrieve();\r\n    }\r\n  }\r\n\r\n\r\n  DtlDelete = async (e) => {\r\n\r\n    const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n    const detailGrid = gfg_getGrid(this.props.pgm, 'detail10');\r\n    const selectRow = gfg_getRow(detailGrid);\r\n    if(selectRow === null){\r\n      alert('선택된건이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    if(selectRow.phantom){\r\n      detailGrid.removeRow(selectRow['rowKey']);\r\n      return;\r\n    }else{\r\n\r\n      if(window.confirm('삭제하시겠습니까?') === false){\r\n        return;\r\n      }\r\n\r\n      gfc_showMask();\r\n\r\n      let param = [];\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_MENU_DETAIL10(\r\n                    :p_COP_CD,\r\n                    :p_RowStatus,\r\n                    :p_MENU_GRP,\r\n                    :p_MENU_ID,\r\n                    :p_MENU_NAM,\r\n                    :p_USE_YN,\r\n                    :p_PGM_ID,\r\n                    :p_PGM_ROOT,\r\n                    :p_MENU_SEQ, \r\n                    :p_RETAUT_YN,\r\n                    :p_INSAUT_YN,\r\n                    :p_SAVAUT_YN,\r\n                    :p_DELAUT_YN,\r\n                    :p_USER_ID,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n          p_RowStatus : 'D',\r\n          p_MENU_GRP  : gfg_getRow(mainGrid).MENU_ID,\r\n          p_MENU_ID   : gfg_getRow(detailGrid).MENU_ID,\r\n          p_MENU_NAM  : '',\r\n          p_USE_YN    : '',\r\n          p_PGM_ID    : '',\r\n          p_PGM_ROOT  : '',\r\n          p_MENU_SEQ  : '',\r\n          p_RETAUT_YN : '',\r\n          p_INSAUT_YN : '',\r\n          p_SAVAUT_YN : '',\r\n          p_DELAUT_YN : '',\r\n          p_USER_ID   : ''\r\n        },\r\n        errSeq: 0\r\n      })\r\n      \r\n      const result = await getSp_Oracle(param);\r\n      if(result.data.SUCCESS !== 'Y'){\r\n        alert(gfc_getAtt(result.data.MSG_CODE));\r\n        gfc_hideMask();\r\n  \r\n        return;\r\n      }\r\n  \r\n      detailGrid.removeRow(selectRow['rowKey']);\r\n      gfc_hideMask();\r\n    }\r\n  }\r\n\r\n  DtlInsert = () => {\r\n    const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n    const dtlGrid = gfg_getGrid(this.props.pgm, 'detail10');\r\n\r\n    const mainRow = gfg_getRow(mainGrid);\r\n    if(mainRow === null){\r\n      alert('선택된건이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    gfg_appendRow(dtlGrid, dtlGrid.getRowCount(), { RETAUT_YN:'Y', INSAUT_YN: 'Y', SAVAUT_YN: 'Y', DELAUT_YN: 'Y'}, 'MENU_ID');\r\n\r\n  }\r\n\r\n  Retrieve = async () => {\r\n    gfc_showMask();\r\n\r\n    const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n    const dtlGrid  = gfg_getGrid(this.props.pgm, 'detail10');\r\n    mainGrid.clear();\r\n    dtlGrid.clear();\r\n\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_MENU_MAIN10(\r\n                  :p_COP_CD,\r\n                  :p_RowStatus,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n        p_RowStatus : 'R'\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS !== 'Y'){\r\n      alert(gfc_getAtt(result.data.MSG_CODE));\r\n      gfc_hideMask();\r\n\r\n      return;\r\n    }\r\n\r\n    mainGrid.clear();\r\n\r\n    mainGrid.resetData(result.data.ROWS);\r\n    mainGrid.resetOriginData()\r\n    mainGrid.restore();\r\n\r\n    gfg_setSelectRow(mainGrid);\r\n    // gfg_setSelectRow(mainGrid);\r\n\r\n    gfc_hideMask();\r\n  }\r\n  \r\n  onSelectChange = async (e) => {\r\n    const dtlGrid  = gfg_getGrid(this.props.pgm, 'detail10');\r\n    dtlGrid.clear();\r\n    \r\n    gfc_showMask();\r\n\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_MENU_DETAIL10(\r\n                  :p_COP_CD,\r\n                  :p_RowStatus,\r\n                  :p_MENU_GRP,\r\n                  :p_MENU_ID,\r\n                  :p_MENU_NAM,\r\n                  :p_USE_YN,\r\n                  :p_PGM_ID,\r\n                  :p_PGM_ROOT,\r\n                  :p_MENU_SEQ, \r\n                  :p_RETAUT_YN,\r\n                  :p_INSAUT_YN,\r\n                  :p_SAVAUT_YN,\r\n                  :p_DELAUT_YN,\r\n                  :p_USER_ID,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n        p_RowStatus : 'R',\r\n        p_MENU_GRP  : e.MENU_ID,\r\n        p_MENU_ID   : '',\r\n        p_MENU_NAM  : '',\r\n        p_USE_YN    : '',\r\n        p_PGM_ID    : '',\r\n        p_PGM_ROOT  : '',\r\n        p_MENU_SEQ  : 0,\r\n        p_RETAUT_YN : '',\r\n        p_INSAUT_YN : '',\r\n        p_SAVAUT_YN : '',\r\n        p_DELAUT_YN : '',\r\n        p_USER_ID   : gfs_getStoreValue('USER_REDUCER', 'USER_ID')\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS !== 'Y'){\r\n      gfc_hideMask();\r\n\r\n      return;\r\n    }\r\n\r\n    const grid = gfg_getGrid(this.props.pgm, 'detail10');\r\n    grid.resetData(result.data.ROWS);\r\n    gfg_setSelectRow(grid);\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager type3'>\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '카메라IP'\r\n                            },{\r\n                              code: '2',\r\n                              name: 'RTSP주소'\r\n                            },{\r\n                              code: '3',\r\n                              name: 'RTSP포트'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       readOnly\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid' style={{paddingBottom:'0'}}>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Layout split       ='vertical'\r\n                          minSize     ={[54]}\r\n                          defaultSize ={'30%'}\r\n                  >\r\n                    <Grid pgm={this.props.pgm}\r\n                          id ='main10'\r\n                          selectionChange={(e) => {\r\n                            this.onSelectChange(e);\r\n                          }}\r\n                          rowHeight={30}\r\n                          rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                          columns={[\r\n                            columnCombobox({\r\n                              name: 'MENU_ID', \r\n                              header: '메뉴그룹',\r\n                              value   : 'COMM_DTL_CD',\r\n                              display : 'COMM_DTL_NAM',\r\n                              width   : 150, \r\n                              readOnly: true,\r\n                              oracleData : getDynamicSql_Oracle(\r\n                                'COMM/COMM',\r\n                                'ZM_IMS_CODE_SELECT',\r\n                                [{COMM_CD: '1'}]),\r\n                              editor: {\r\n                                value   : 'COMM_DTL_CD',\r\n                                display : 'COMM_DTL_NAM'\r\n                              }\r\n                            }),\r\n                            columnInput({\r\n                              name: 'MENU_NAM',\r\n                              header: '메뉴그룹명',\r\n                              width : 250,\r\n                              readOnly: true,\r\n                              align : 'left',\r\n                            })\r\n                          ]}\r\n                    />\r\n\r\n                    <Grid pgm={this.props.pgm}\r\n                          id ='detail10'\r\n                          rowHeight={30}\r\n                          rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                          columns={[\r\n                            columnInput({\r\n                              name: 'MENU_ID',\r\n                              header: '메뉴ID',\r\n                              width : 180,\r\n                              readOnly: false,\r\n                              align : 'left',\r\n                              onRender: (value, control, rows) => {\r\n                                if(rows.phantom){\r\n                                  control.readOnly = false;\r\n                                }else{\r\n                                  control.readOnly = true;\r\n                                }\r\n                              }\r\n                            }),\r\n                            columnInput({\r\n                              name: 'MENU_NAM',\r\n                              header: '메뉴명',\r\n                              width : 350,\r\n                              readOnly: false,\r\n                              align : 'left',\r\n                              onRender: (value, control, rows) => {\r\n                                if(rows.phantom){\r\n                                  control.readOnly = false;\r\n                                }else{\r\n                                  control.readOnly = true;\r\n                                }\r\n                              }\r\n                            }),   \r\n                            columnInput({\r\n                              name: 'PGM_ID',\r\n                              header: '프로그램',\r\n                              width : 250,\r\n                              readOnly: false,\r\n                              align : 'left',\r\n                              onRender: (value, control, rows) => {\r\n                                if(rows.phantom){\r\n                                  control.readOnly = false;\r\n                                }else{\r\n                                  control.readOnly = true;\r\n                                }\r\n                              }\r\n                            }),   \r\n                            columnInput({\r\n                              name: 'PGM_ROOT',\r\n                              header: '프로그램경로',\r\n                              width : 250,\r\n                              readOnly: false,\r\n                              align : 'left',\r\n                              onRender: (value, control, rows) => {\r\n                                if(rows.phantom){\r\n                                  control.readOnly = false;\r\n                                }else{\r\n                                  control.readOnly = true;\r\n                                }\r\n                              }\r\n                            }),\r\n                            columnNumber({\r\n                              name    : 'MENU_SEQ', \r\n                              header  : '정렬순서', \r\n                              width   : 100, \r\n                              readOnly: false\r\n                            }),\r\n                            columnCombobox({\r\n                              name: 'USE_YN', \r\n                              header: '사용여부',\r\n                              readOnly: false,\r\n                              width   : 130,\r\n                              data    : [{\r\n                                'code': 'Y',\r\n                                'name': 'Yes'\r\n                              },{\r\n                                'code': 'N',\r\n                                'name': 'No'\r\n                              }],\r\n                              editor: {\r\n                                value   : 'code',\r\n                                display : 'name'\r\n                              }\r\n                            }),\r\n                            columnCheckbox({\r\n                              name: 'RETAUT_YN',\r\n                              header: '조회',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }),\r\n                            columnCheckbox({\r\n                              name: 'INSAUT_YN',\r\n                              header: '등록',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }),\r\n                            columnCheckbox({\r\n                              name: 'SAVAUT_YN',\r\n                              header: '저장',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }),\r\n                            columnCheckbox({\r\n                              name: 'DELAUT_YN',\r\n                              header: '삭제',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            })\r\n                          ]}\r\n                    />\r\n                  </Layout>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MENU;","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\COMM\\COMM.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RainInfo.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\RecImage.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\RecImageDtl.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\COMM\\AUTH\\AUTH.js",["681","682","683"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_getAtt, gfc_sleep } from '../../../Method/Comm';\r\nimport { gfs_injectAsyncReducer, gfs_dispatch, gfs_getStoreValue } from '../../../Method/Store';\r\nimport { gfg_getGrid, gfg_getRow, gfg_appendRow, gfg_setValue, gfg_getModyfiedRow, gfg_setSelectRow, gfg_getRowCount } from '../../../Method/Grid';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport Layout from '../../../Component/Layout/Layout';\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Combobox as columnCombobox }  from '../../../Component/Grid/Column/Combobox';\r\nimport { Number as columnNumber} from '../../../Component/Grid/Column/Number';\r\nimport { Checkbox as columnCheckbox } from '../../../Component/Grid/Column/Checkbox';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\n// import Botspan from '../Common/Botspan';\r\n\r\nimport { getDynamicSql_Oracle } from '../../../db/Oracle/Oracle';\r\nimport { getSp_Oracle } from '../../../db/Oracle/Oracle';\r\n//#endregion\r\n\r\nclass AUTH extends Component {\r\n  selectedTab = 0;\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const AUTH_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'AUTH_MAIN') {\r\n        return {\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n        };\r\n      }\r\n\r\n      if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('AUTH_MAIN', AUTH_MAIN);\r\n    //#endregion\r\n  }\r\n\r\n  componentDidMount(){\r\n    \r\n  }\r\n\r\n  callOracle = async(file, fn, param) => {\r\n    let result = await getDynamicSql_Oracle(\r\n      file,\r\n      fn,\r\n      param\r\n    ); \r\n\r\n    return result;\r\n  }\r\n\r\n  Delete = () => {\r\n    // const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    // const selectRow = gfg_getRow(grid);\r\n    // if(selectRow === null){\r\n    //   alert('선택된건이 없습니다.');\r\n    //   return;\r\n    // }\r\n\r\n    // if(selectRow.phantom){\r\n    //   grid.removeRow(selectRow['rowKey']);\r\n    //   return;\r\n    // }else{\r\n    //   this.callOracle(\r\n    //     'Common/Common',\r\n    //     'ZM_IMS_CAMERA_DELETE',\r\n    //     [{\r\n    //       AREA_TP: selectRow.AREA_TP,\r\n    //       CAMERA_IP: selectRow.CAMERA_IP\r\n    //     }]\r\n    //   )\r\n    // }\r\n    \r\n    // grid.resetOriginData()\r\n    // grid.restore();\r\n\r\n    // this.Retrieve();\r\n  }\r\n\r\n  Save = async() => {\r\n    let mainGrid;\r\n\r\n    if(this.selectedTab === 0){\r\n      mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n    }else{\r\n      mainGrid = gfg_getGrid(this.props.pgm, 'main20');\r\n    }\r\n\r\n    const dtlGrid = gfg_getGrid(this.props.pgm, 'detail10');\r\n\r\n    if(gfg_getRowCount(mainGrid) === 0){\r\n      alert('데이터가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    if(gfg_getRowCount(dtlGrid) === 0){\r\n      alert('데이터가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    const dtlMod = gfg_getModyfiedRow(dtlGrid);\r\n    if(dtlMod.length === 0){\r\n      alert('추가되거나 수정된건 이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    let param = [];\r\n\r\n    dtlMod.forEach(e => {\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_AUTH_DETAIL10(\r\n                    :p_COP_CD,\r\n                    :p_RowStatus,\r\n                    :p_MENU_ID,\r\n                    :p_GRP_USER_ID,\r\n                    :p_CD_GBN,\r\n  \r\n                    :p_PGMAUT_YN,\r\n                    :p_RETAUT_YN,\r\n                    :p_INSAUT_YN,\r\n                    :p_SAVAUT_YN,\r\n                    :p_DELAUT_YN,\r\n                    :p_PTZAUT_YN,\r\n                    :p_USER_ID,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_COP_CD     : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n          p_RowStatus  : e.rowStatus,\r\n          p_MENU_ID    : e.MENU_ID,\r\n          p_GRP_USER_ID: gfg_getRow(mainGrid).AUTH_CD,\r\n          p_CD_GBN     : this.selectedTab === 0 ? 'G' : 'I',\r\n          p_PGMAUT_YN : e.PGMAUT_YN === null ? 'N' : e.PGMAUT_YN,\r\n          p_RETAUT_YN : e.RETAUT_YN === null ? 'N' : e.RETAUT_YN,\r\n          p_INSAUT_YN : e.INSAUT_YN === null ? 'N' : e.INSAUT_YN,\r\n          p_SAVAUT_YN : e.SAVAUT_YN === null ? 'N' : e.SAVAUT_YN,\r\n          p_DELAUT_YN : e.DELAUT_YN === null ? 'N' : e.DELAUT_YN,\r\n          p_PTZAUT_YN : e.DELAUT_YN === null ? 'N' : e.DELAUT_YN,\r\n          p_USER_ID   : gfs_getStoreValue('USER_REDUCER', 'USER_ID')\r\n        },\r\n        errSeq: e.rowKey\r\n      })\r\n    })\r\n\r\n    // dtlMod.forEach(e => {\r\n    //   param.push({\r\n    //     sp   : `begin \r\n    //               SP_ZM_IMS_AUTH_DETAIL10(\r\n    //                 :p_COP_CD,\r\n    //                 :p_RowStatus,\r\n    //                 :p_MENU_ID,\r\n    //                 :p_GRP_USER_ID,\r\n    //                 :p_CD_GBN\r\n\r\n    //                 :p_RETAUT_YN,\r\n    //                 :p_INSAUT_YN,\r\n    //                 :p_SAVAUT_YN,\r\n    //                 :p_DELAUT_YN,\r\n    //                 :p_PTZAUT_YN,\r\n    //                 :p_USER_ID,\r\n                    \r\n    //                 :p_select,\r\n    //                 :p_SUCCESS,\r\n    //                 :p_MSG_CODE,\r\n    //                 :p_MSG_TEXT,\r\n    //                 :p_COL_NAM\r\n    //               );\r\n    //             end;\r\n    //             `,\r\n    //     data : {\r\n    //       p_COP_CD     : '10',\r\n    //       p_RowStatus  : 'R',\r\n    //       p_MENU_ID    : '',\r\n    //       p_GRP_USER_ID: '10',\r\n    //       p_CD_GBN     : '',\r\n\r\n    //       p_RETAUT_YN : '',\r\n    //       p_INSAUT_YN : '',\r\n    //       p_SAVAUT_YN : '',\r\n    //       p_DELAUT_YN : '',\r\n    //       p_PTZAUT_YN : '',\r\n    //       p_USER_ID   : '1989'\r\n\r\n    //       // p_COP_CD     : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n    //       // p_RowStatus  : e.rowStatus,\r\n    //       // p_MENU_ID    : e.MENU_ID,\r\n    //       // p_GRP_USER_ID: gfg_getRow(mainGrid).AUTH_CD,\r\n    //       // p_CD_GBN     : this.selectedTab === 0 ? 'G' : 'I',\r\n\r\n    //       // p_RETAUT_YN : e.RETAUT_YN === null ? 'N' : e.RETAUT_YN,\r\n    //       // p_INSAUT_YN : e.INSAUT_YN === null ? 'N' : e.INSAUT_YN,\r\n    //       // p_SAVAUT_YN : e.SAVAUT_YN === null ? 'N' : e.SAVAUT_YN,\r\n    //       // p_DELAUT_YN : e.DELAUT_YN === null ? 'N' : e.DELAUT_YN,\r\n    //       // p_PTZAUT_YN : e.PTZAUT_YN === null ? 'N' : e.PTZAUT_YN,\r\n    //       // p_USER_ID   : gfs_getStoreValue('USER_REDUCER', 'USER_ID')\r\n    //     },\r\n    //     errSeq: e.rowKey\r\n    //   })\r\n    // })\r\n\r\n    gfc_showMask();\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS !== 'Y'){\r\n      alert(gfc_getAtt(result.data.MSG_CODE) + '>' + result.data.MSG_TEXT);\r\n      gfg_setSelectRow(dtlGrid, result.data.COL_NAM, result.data.SEQ);\r\n      gfc_hideMask();\r\n\r\n      return;\r\n    }else{\r\n      alert(gfc_getAtt(result.data.MSG_CODE));\r\n      \r\n      this.Retrieve();\r\n    }\r\n  }\r\n\r\n  Retrieve = async () => {\r\n    if(this.selectedTab === 0){\r\n\r\n      gfc_showMask();\r\n\r\n      const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n      const dtlGrid  = gfg_getGrid(this.props.pgm, 'detail10');\r\n      mainGrid.clear();\r\n      dtlGrid.clear();\r\n  \r\n      let param = [];\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_AUTH_MAIN10(\r\n                    :p_COP_CD,\r\n                    :p_RowStatus,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n          p_RowStatus : 'R'\r\n        },\r\n        errSeq: 0\r\n      })\r\n      \r\n      const result = await getSp_Oracle(param);\r\n      if(result.data.SUCCESS !== 'Y'){\r\n        alert(gfc_getAtt(result.data.MSG_CODE));\r\n        gfc_hideMask();\r\n  \r\n        return;\r\n      }\r\n\r\n      mainGrid.resetData(result.data.ROWS);\r\n      mainGrid.resetOriginData()\r\n      mainGrid.restore();\r\n      gfg_setSelectRow(mainGrid);\r\n    }else{\r\n\r\n      gfc_showMask();\r\n\r\n      const mainGrid = gfg_getGrid(this.props.pgm, 'main20');\r\n      const dtlGrid  = gfg_getGrid(this.props.pgm, 'detail10');\r\n      mainGrid.clear();\r\n      dtlGrid.clear();\r\n  \r\n      let param = [];\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_AUTH_MAIN20(\r\n                    :p_COP_CD,\r\n                    :p_RowStatus,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n          p_RowStatus : 'R'\r\n        },\r\n        errSeq: 0\r\n      })\r\n      \r\n      const result = await getSp_Oracle(param);\r\n      if(result.data.SUCCESS !== 'Y'){\r\n        alert(gfc_getAtt(result.data.MSG_CODE));\r\n        gfc_hideMask();\r\n  \r\n        return;\r\n      }\r\n\r\n      mainGrid.resetData(result.data.ROWS);\r\n      mainGrid.resetOriginData()\r\n      mainGrid.restore();\r\n      gfg_setSelectRow(mainGrid);\r\n    }\r\n\r\n    // gfg_setSelectRow(mainGrid);\r\n\r\n    gfc_hideMask();\r\n  }\r\n  \r\n  onSelectChange = async (e) => {\r\n    const dtlGrid  = gfg_getGrid(this.props.pgm, 'detail10');\r\n    dtlGrid.clear();\r\n    \r\n    gfc_showMask();\r\n\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_AUTH_DETAIL10(\r\n                  :p_COP_CD,\r\n                  :p_RowStatus,\r\n                  :p_MENU_ID,\r\n                  :p_GRP_USER_ID,\r\n                  :p_CD_GBN,\r\n\r\n                  :p_PGMAUT_YN,\r\n                  :p_RETAUT_YN,\r\n                  :p_INSAUT_YN,\r\n                  :p_SAVAUT_YN,\r\n                  :p_DELAUT_YN,\r\n                  :p_PTZAUT_YN,\r\n                  :p_USER_ID,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_COP_CD     : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n        p_RowStatus  : 'R',\r\n        p_MENU_ID    : '',\r\n        p_GRP_USER_ID: e.AUTH_CD,\r\n        p_CD_GBN     : '',\r\n\r\n        p_PGMAUT_YN  : '',\r\n        p_RETAUT_YN  : '',\r\n        p_INSAUT_YN  : '',\r\n        p_SAVAUT_YN  : '',\r\n        p_DELAUT_YN  : '',\r\n        p_PTZAUT_YN  : '',\r\n        p_USER_ID    : gfs_getStoreValue('USER_REDUCER', 'USER_ID')\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS !== 'Y'){\r\n      gfc_hideMask();\r\n\r\n      return;\r\n    }\r\n\r\n    const grid = gfg_getGrid(this.props.pgm, 'detail10');\r\n    grid.resetData(result.data.ROWS);\r\n    gfg_setSelectRow(grid);\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager type3'>\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '카메라IP'\r\n                            },{\r\n                              code: '2',\r\n                              name: 'RTSP주소'\r\n                            },{\r\n                              code: '3',\r\n                              name: 'RTSP포트'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       readOnly\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid' style={{paddingBottom:'0'}}>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Layout split       ='vertical'\r\n                          minSize     ={[54]}\r\n                          defaultSize ={'30%'}\r\n                  >\r\n                    <Tabs \r\n                      onSelect={async e => {\r\n                        this.selectedTab = e;\r\n\r\n                        await gfc_sleep(100);\r\n\r\n                        this.Retrieve();\r\n                      }}\r\n                    >\r\n                      <TabList>\r\n                        <Tab>그룹</Tab>\r\n                        <Tab>사용자</Tab>\r\n                      </TabList>\r\n\r\n                      <TabPanel\r\n                        style={{height:'calc(100% - 41px)'}}>\r\n                        <Grid pgm={this.props.pgm}\r\n                              id ='main10'\r\n                              selectionChange={(e) => {\r\n                                this.onSelectChange(e);\r\n                              }}\r\n                              rowHeight={30}\r\n                              rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                              columns={[\r\n                                columnInput({\r\n                                  name: 'AUTH_CD',\r\n                                  header: '그룹ID',\r\n                                  width : 100,\r\n                                  readOnly: true,\r\n                                  align : 'center',\r\n                                }),\r\n                                columnInput({\r\n                                  name: 'AUTH_NAM',\r\n                                  header: '그룹명',\r\n                                  width : 250,\r\n                                  readOnly: true,\r\n                                  align : 'left',\r\n                                })\r\n                              ]}\r\n                        />\r\n                      </TabPanel>\r\n                      <TabPanel\r\n                        style={{height:'calc(100% - 41px)'}}\r\n                      >\r\n                        <Grid pgm={this.props.pgm}\r\n                              id ='main20'\r\n                              selectionChange={(e) => {\r\n                                this.onSelectChange(e);\r\n                              }}\r\n                              rowHeight={30}\r\n                              rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                              columns={[\r\n                                columnInput({\r\n                                  name: 'AUTH_CD',\r\n                                  header: '사용자ID',\r\n                                  width : 100,\r\n                                  readOnly: true,\r\n                                  align : 'center',\r\n                                }),\r\n                                columnInput({\r\n                                  name: 'AUTH_NAM',\r\n                                  header: '사용자명',\r\n                                  width : 250,\r\n                                  readOnly: true,\r\n                                  align : 'left',\r\n                                }),   \r\n                                columnCombobox({\r\n                                  name: 'AUT_TP', \r\n                                  header: '권한그룹',\r\n                                  value   : 'COMM_DTL_CD',\r\n                                  display : 'COMM_DTL_NAM',\r\n                                  width   : 150, \r\n                                  readOnly: false,\r\n                                  oracleData : getDynamicSql_Oracle(\r\n                                    'COMM/COMM',\r\n                                    'ZM_IMS_CODE_SELECT',\r\n                                    [{COMM_CD: '2'}]),\r\n                                  editor: {\r\n                                    value   : 'COMM_DTL_CD',\r\n                                    display : 'COMM_DTL_NAM',\r\n                                    emptyRow: true\r\n                                  }\r\n                                })\r\n                              ]}\r\n                        />\r\n                      </TabPanel>\r\n                    </Tabs>\r\n\r\n                    <Grid pgm={this.props.pgm}\r\n                          id ='detail10'\r\n                          rowHeight={30}\r\n                          rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                          headerClick={(e) => {\r\n                            const column = e.columnName;\r\n                            if(column !== 'chk' && column !== 'MENU_ID' && column !== 'MENU_NAM'){\r\n                              const grid = gfg_getGrid(this.props.pgm, 'detail10');\r\n                              if(grid.gridEl.dataset[column] === undefined){\r\n                                grid.gridEl.dataset[column] = 'Y';\r\n                              }else if(grid.gridEl.dataset[column] === 'Y'){\r\n                                grid.gridEl.dataset[column] = 'N';\r\n                              }else{\r\n                                grid.gridEl.dataset[column] = 'Y';\r\n                              }\r\n      \r\n                              for(let i = 0; i < grid.getRowCount(); i++){\r\n                                gfg_setValue(grid, column, grid.gridEl.dataset[column], i);\r\n                              }\r\n                            }\r\n                          }}\r\n                          columns={[\r\n                            columnInput({\r\n                              name: 'MENU_ID',\r\n                              header: '메뉴ID',\r\n                              width : 180,\r\n                              readOnly: false,\r\n                              align : 'left',\r\n                              onRender: (value, control, rows) => {\r\n                                if(rows.phantom){\r\n                                  control.readOnly = false;\r\n                                }else{\r\n                                  control.readOnly = true;\r\n                                }\r\n                              }\r\n                            }),\r\n                            columnInput({\r\n                              name: 'MENU_NAM',\r\n                              header: '메뉴명',\r\n                              width : 350,\r\n                              readOnly: false,\r\n                              align : 'left',\r\n                              onRender: (value, control, rows) => {\r\n                                if(rows.phantom){\r\n                                  control.readOnly = false;\r\n                                }else{\r\n                                  control.readOnly = true;\r\n                                }\r\n                              }\r\n                            }),   \r\n                            columnCheckbox({\r\n                              name: 'PGMAUT_YN',\r\n                              header: '사용',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }), \r\n                            columnCheckbox({\r\n                              name: 'RETAUT_YN',\r\n                              header: '조회',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }),\r\n                            columnCheckbox({\r\n                              name: 'INSAUT_YN',\r\n                              header: '등록',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }),\r\n                            columnCheckbox({\r\n                              name: 'SAVAUT_YN',\r\n                              header: '저장',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }),\r\n                            columnCheckbox({\r\n                              name: 'DELAUT_YN',\r\n                              header: '삭제',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }),   \r\n                            // columnCheckbox({\r\n                            //   name: 'PTZAUT_YN',\r\n                            //   header: 'PTZ',\r\n                            //   width : 50,\r\n                            //   readOnly: true,\r\n                            //   align : 'center',\r\n                            //   type: 'checkbox'\r\n                            // }),\r\n                          ]}\r\n                    />\r\n                  </Layout>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AUTH;","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\USER\\USER.js",["684","685","686","687"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_getAtt } from '../../../Method/Comm';\r\nimport { gfs_injectAsyncReducer, gfs_dispatch, gfs_getStoreValue } from '../../../Method/Store';\r\nimport { gfg_getGrid, gfg_getRow, gfg_appendRow, gfg_getModyfiedRow, gfg_setSelectRow, gfg_getRowCount } from '../../../Method/Grid';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport Layout from '../../../Component/Layout/Layout';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Combobox as columnCombobox }  from '../../../Component/Grid/Column/Combobox';\r\nimport { Number as columnNumber} from '../../../Component/Grid/Column/Number';\r\nimport { Checkbox as columnCheckbox } from '../../../Component/Grid/Column/Checkbox';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\n// import Botspan from '../Common/Botspan';\r\n\r\nimport { getDynamicSql_Oracle } from '../../../db/Oracle/Oracle';\r\nimport { getSp_Oracle } from '../../../db/Oracle/Oracle';\r\nimport { YK_WEB_REQ } from '../../../WebReq/WebReq';\r\n//#endregion\r\n\r\nclass USER extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const USER_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'USER_MAIN') {\r\n        return {\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n        };\r\n      }\r\n\r\n      if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('USER_MAIN', USER_MAIN);\r\n    //#endregion\r\n  }\r\n\r\n  componentDidMount(){\r\n    \r\n  }\r\n\r\n  callOracle = async(file, fn, param) => {\r\n    let result = await getDynamicSql_Oracle(\r\n      file,\r\n      fn,\r\n      param\r\n    ); \r\n\r\n    return result;\r\n  }\r\n\r\n  Delete = async() => {\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    const selectRow = gfg_getRow(grid);\r\n    if(selectRow === null){\r\n      alert('선택된건이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    if(selectRow.phantom){\r\n      grid.removeRow(selectRow['rowKey']);\r\n      return;\r\n    }else{\r\n      let param = [];\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_USER_MAIN10(\r\n                    :p_RowStatus,\r\n  \r\n                    :p_COP_CD,\r\n                    :p_IMS_ID,\r\n                    :p_USER_NAM,\r\n                    :p_USER_PWD,\r\n                    :p_DEPT_NAM,\r\n                    :p_ERP_ID,\r\n                    :p_AREA_TP,\r\n                    :p_AUT_TP,\r\n                    :p_USE_YN,\r\n                    :p_USER_ID,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_RowStatus : 'D',\r\n          p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n          p_IMS_ID    : selectRow.IMS_ID,\r\n          p_USER_NAM  : '',\r\n          p_USER_PWD  : '',\r\n          p_DEPT_NAM  : '',\r\n          p_ERP_ID    : '',\r\n          p_AREA_TP   : '',\r\n          p_AUT_TP    : '',\r\n          p_USE_YN    : '',\r\n          p_USER_ID   : gfs_getStoreValue('USER_REDUCER', 'USER_ID')\r\n        },\r\n        errSeq: 0\r\n      })\r\n      \r\n      const result = await getSp_Oracle(param);\r\n      if(result.data.SUCCESS !== 'Y'){\r\n        alert(gfc_getAtt(result.data.MSG_CODE));\r\n        gfc_hideMask();\r\n  \r\n        return;\r\n      }else{\r\n        alert(gfc_getAtt(result.data.MSG_CODE));\r\n        \r\n        this.Retrieve();\r\n      }\r\n    }\r\n  }\r\n\r\n  Save = async() => {\r\n    const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n\r\n    if(gfg_getRowCount(mainGrid) === 0){\r\n      alert('데이터가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    const dtlMod = gfg_getModyfiedRow(mainGrid);\r\n    if(dtlMod.length === 0){\r\n      alert('추가되거나 수정된건 이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    let param = [];\r\n\r\n    dtlMod.forEach(e => {\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_USER_MAIN10(\r\n                    :p_RowStatus,\r\n\r\n                    :p_COP_CD,\r\n                    :p_IMS_ID,\r\n                    :p_USER_NAM,\r\n                    :p_USER_PWD,\r\n                    :p_DEPT_NAM,\r\n                    :p_ERP_ID,\r\n                    :p_AREA_TP,\r\n                    :p_AUT_TP,\r\n                    :p_USE_YN,\r\n                    :p_USER_ID,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_RowStatus : e.rowStatus,\r\n          p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n          p_IMS_ID    : e.IMS_ID,\r\n          p_USER_NAM  : e.USER_NAM,\r\n          p_USER_PWD  : e.USER_PWD,\r\n          p_DEPT_NAM  : e.DEPT_NAM,\r\n          p_ERP_ID    : e.ERP_ID,\r\n          p_AREA_TP   : e.AREA_TP,\r\n          p_AUT_TP   : e.AUT_TP,\r\n          p_USE_YN    : e.USE_YN,\r\n          p_USER_ID   : gfs_getStoreValue('USER_REDUCER', 'USER_ID')\r\n        },\r\n        errSeq: e.rowKey\r\n      })\r\n    })\r\n\r\n    gfc_showMask();\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS !== 'Y'){\r\n      alert(gfc_getAtt(result.data.MSG_CODE));\r\n      gfg_setSelectRow(mainGrid, result.data.COL_NAM, result.data.SEQ);\r\n      gfc_hideMask();\r\n\r\n      return;\r\n    }else{\r\n      alert(gfc_getAtt(result.data.MSG_CODE));\r\n      \r\n      this.Retrieve();\r\n    }\r\n  }\r\n\r\n  Insert = () => {\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    gfg_appendRow(grid, grid.getRowCount(), {USE_YN: 'Y'}, 'IMS_ID')\r\n  }\r\n\r\n  Retrieve = async () => {\r\n    gfc_showMask();\r\n\r\n    const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n    mainGrid.clear();\r\n\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_USER_MAIN10(\r\n                  :p_RowStatus,\r\n\r\n                  :p_COP_CD,\r\n                  :p_IMS_ID,\r\n                  :p_USER_NAM,\r\n                  :p_USER_PWD,\r\n                  :p_DEPT_NAM,\r\n                  :p_ERP_ID,\r\n                  :p_AREA_TP,\r\n                  :p_AUT_TP,\r\n                  :p_USE_YN,\r\n                  :p_USER_ID,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_RowStatus : 'R',\r\n        p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n        p_IMS_ID    : '',\r\n        p_USER_NAM  : '',\r\n        p_USER_PWD  : '',\r\n        p_DEPT_NAM  : '',\r\n        p_ERP_ID    : '',\r\n        p_AREA_TP   : '',\r\n        p_AUT_TP    : '',\r\n        p_USE_YN    : '',\r\n        p_USER_ID   : gfs_getStoreValue('USER_REDUCER', 'USER_ID')\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS !== 'Y'){\r\n      alert(gfc_getAtt(result.data.MSG_CODE));\r\n      gfc_hideMask();\r\n\r\n      return;\r\n    }\r\n\r\n    mainGrid.clear();\r\n\r\n    mainGrid.resetData(result.data.ROWS);\r\n    mainGrid.resetOriginData()\r\n    mainGrid.restore();\r\n\r\n    gfg_setSelectRow(mainGrid);\r\n    // gfg_setSelectRow(mainGrid);\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager type3'>\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '카메라IP'\r\n                            },{\r\n                              code: '2',\r\n                              name: 'RTSP주소'\r\n                            },{\r\n                              code: '3',\r\n                              name: 'RTSP포트'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       readOnly\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid' style={{paddingBottom:'0'}}>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        rowHeight={30}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        columns={[\r\n                          columnInput({\r\n                            name: 'IMS_ID',\r\n                            header: '사용자ID',\r\n                            width : 180,\r\n                            readOnly: false,\r\n                            fontSize: '18',\r\n                            align : 'left',\r\n                            onRender: (value, control, rows) => {\r\n                              if(rows.phantom){\r\n                                control.readOnly = false;\r\n                              }else{\r\n                                control.readOnly = true;\r\n                              }\r\n                            }\r\n                          }),\r\n                          columnInput({\r\n                            name: 'USER_NAM',\r\n                            header: '사용자명',\r\n                            width : 350,\r\n                            readOnly: false,\r\n                            fontSize: '18',\r\n                            align : 'left',\r\n                            onRender: (value, control, rows) => {\r\n                              if(rows.phantom){\r\n                                control.readOnly = false;\r\n                              }else{\r\n                                control.readOnly = true;\r\n                              }\r\n                            }\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'USER_PWD',\r\n                            header: '비밀번호',\r\n                            width : 250,\r\n                            readOnly: false,\r\n                            align : 'left',\r\n                            fontSize: '18',\r\n                            password: true\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'DEPT_NAM',\r\n                            header: '부서명',\r\n                            width : 250,\r\n                            readOnly: false,\r\n                            fontSize: '18',\r\n                            align : 'left'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'ERP_ID',\r\n                            header: 'ERP ID',\r\n                            width : 250,\r\n                            readOnly: false,\r\n                            fontSize: '18',\r\n                            align : 'left'\r\n                          }),  \r\n                          columnCombobox({\r\n                            name: 'AREA_TP', \r\n                            header: '검수구역',\r\n                            value   : 'itemCode',\r\n                            display : 'item',\r\n                            width   : 200, \r\n                            readOnly: false,\r\n                            etcData : YK_WEB_REQ('tally_process_pop.jsp?division=P530', {}),\r\n                            editor: {\r\n                              value   : 'itemCode',\r\n                              display : 'item'\r\n                            },\r\n                            fontSize: '18'\r\n                          }),   \r\n                          columnCombobox({\r\n                            name: 'AUT_TP', \r\n                            header: '권한그룹',\r\n                            value   : 'COMM_DTL_CD',\r\n                            display : 'COMM_DTL_NAM',\r\n                            width   : 150, \r\n                            fontSize: '18',\r\n                            readOnly: false,\r\n                            oracleData : getDynamicSql_Oracle(\r\n                              'COMM/COMM',\r\n                              'ZM_IMS_CODE_SELECT',\r\n                              [{COMM_CD: '2'}]),\r\n                            editor: {\r\n                              value   : 'COMM_DTL_CD',\r\n                              display : 'COMM_DTL_NAM',\r\n                              emptyRow: true\r\n                            }\r\n                          }),\r\n                          columnCombobox({\r\n                            name: 'USE_YN', \r\n                            header: '사용여부',\r\n                            readOnly: false,\r\n                            fontSize: '18',\r\n                            width   : 130,\r\n                            data    : [{\r\n                              'code': 'Y',\r\n                              'name': 'Yes'\r\n                            },{\r\n                              'code': 'N',\r\n                              'name': 'No'\r\n                            }],\r\n                            editor: {\r\n                              value   : 'code',\r\n                              display : 'name'\r\n                            }\r\n                          })\r\n                        ]}\r\n                    />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default USER;","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarUserName.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\CompleteBtnModify.js",["688"],"import React from 'react';\r\n\r\nimport { gfg_getGrid, gfg_getRow, gfg_setSelectRow } from '../../../Method/Grid';\r\nimport { gfs_getStoreValue } from '../../../Method/Store';\r\nimport { gfc_showMask, gfc_hideMask } from '../../../Method/Comm';\r\nimport { gfo_getCombo, gfo_getInput } from '../../../Method/Component';\r\nimport { getSp_Oracle_YK } from '../../../db/Oracle/Oracle';\r\n\r\nconst CompleteBtnModify = (props) => {\r\n\r\n  //#region 검수등록\r\n  const onProcess = async() => {\r\n    const scaleNumb = gfs_getStoreValue('INSP_CANC_MAIN', 'DETAIL_SCALE');\r\n\r\n    if(scaleNumb === ''){\r\n      alert('선택된 배차정보가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    const grid = gfg_getGrid(props.pgm, 'main10');\r\n    let chkCnt = 0;\r\n    for(let i = 0; i < grid.getRowCount(); i++){\r\n      const column = gfg_getRow(grid, i);\r\n      if(column.chk === null) continue;\r\n\r\n      if(column.chk.toString() === 'Y'){\r\n        chkCnt += 1;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if(chkCnt === 0){\r\n      alert('선택된건이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    const return_reason = gfo_getCombo(props.pgm, 'return_reason'); //취소사유\r\n    if(return_reason.getValue() === null){\r\n      alert('필수입력값이 없습니다. > 취소사유');\r\n      return;\r\n    }\r\n    const return_reason_desc = gfo_getInput(props.pgm, 'return_reason_desc'); //취소사유\r\n\r\n    if(window.confirm('확정취소 하시겠습니까?') === false){\r\n      return;\r\n    }\r\n\r\n    gfc_showMask();\r\n\r\n    let param = [];\r\n    for(let i = 0; i < grid.getRowCount(); i++){\r\n      const column = gfg_getRow(grid, i);\r\n      if(column.chk === null) continue;\r\n\r\n      if(column.chk.toString() === 'Y'){\r\n        param.push({\r\n          sp   : `BEGIN \r\n                    apps.emm_inspect_apporve_cancel(\r\n                      :p_delivery_id,\r\n                      :p_approve_name,\r\n                      :p_reason_code,\r\n                      :p_reason_desc,\r\n                      :p_erp_id,\r\n                      :p_out\r\n                    );\r\n                  END;\r\n                  `,\r\n          data : {\r\n            p_delivery_id : column.scaleNumb,\r\n            p_approve_name: 'bjkim2',\r\n            p_reason_code : return_reason.getValue(),\r\n            p_reason_desc : return_reason_desc.getValue(),\r\n            p_erp_id      : 1989\r\n          },\r\n          errSeq : {\r\n            delivery_id : column.scaleNumb,\r\n            seq         : i\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    let result = await getSp_Oracle_YK(\r\n      param\r\n    ); \r\n\r\n    if(result.data.result !== 'OK'){\r\n      alert('확정취소중 오류가 발생했습니다. > ' + result.data.result);\r\n\r\n      const ROW_KEY = result.data.seq;\r\n      gfg_setSelectRow(grid, '', ROW_KEY);\r\n    }else{\r\n      alert('확정취소 되었습니다.');\r\n      const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === 'INSP_CANC');\r\n      pgm[0].Retrieve();\r\n    }\r\n\r\n    //#endregion\r\n\r\n    gfc_hideMask();\r\n  }\r\n  //#endregion\r\n\r\n  return (\r\n    <div className=\"complete_btn edit\">\r\n      <button type=\"button\" style={{display:'block'}}><span>검수수정</span></button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompleteBtnModify;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\CompleteBtnModify.js",["689","690","691","692","693","694"],"import React from 'react';\r\n\r\nimport { gfg_getGrid, gfg_getRow, gfg_setSelectRow } from '../../../Method/Grid';\r\nimport { gfs_getStoreValue } from '../../../Method/Store';\r\nimport { gfc_showMask, gfc_hideMask } from '../../../Method/Comm';\r\nimport { gfo_getCombo, gfo_getInput, gfo_getCheckbox } from '../../../Method/Component';\r\nimport { getSp_Oracle_YK } from '../../../db/Oracle/Oracle';\r\nimport { YK_WEB_REQ } from '../../../WebReq/WebReq';\r\n\r\nconst CompleteBtnModify = (props) => {\r\n\r\n  //#region 검수등록\r\n  const onProcess = async() => {\r\n    const scaleNumb = gfs_getStoreValue('INSP_CFRM_MAIN', 'DETAIL_SCALE');\r\n\r\n    if(scaleNumb === ''){\r\n      alert('선택된 배차정보가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    \r\n\r\n    gfc_showMask();\r\n\r\n    //#region 필수입력확인 및 변수세팅\r\n    const detail_grade1 = gfo_getCombo(props.pgm, 'detail_grade1'); //고철등급\r\n    if(detail_grade1.getValue() === null || detail_grade1.getValue() === ''){\r\n      alert('필수입력값이 없습니다. > 고철등급');\r\n      const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n      chitBtn.click(0);\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_grade2 = gfo_getCombo(props.pgm, 'detail_grade2'); //상세고철등급\r\n    if(detail_grade2.getValue() === null || detail_grade2.getValue() === ''){\r\n      alert('필수입력값이 없습니다. > 등급세부코드');\r\n      const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n      chitBtn.click(0);\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_subt = gfo_getCombo(props.pgm, 'detail_subt'); //감량중량\r\n    const detail_subt_leg = gfo_getCombo(props.pgm, 'detail_subt_leg'); //감량사유\r\n    if(detail_subt.getValue() !== null &&  detail_subt.getValue() !== '' &&  detail_subt.getValue() !== '0'){\r\n      if(detail_subt_leg.getValue() === null || detail_subt_leg.getValue() === ''){\r\n        alert('필수입력값이 없습니다. > 감량사유');\r\n        const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n        chitBtn.click(0);\r\n  \r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const detail_depr = gfo_getCombo(props.pgm, 'detail_depr'); //감가내역\r\n    const detail_depr2 = gfo_getCombo(props.pgm, 'detail_depr2'); //감가비율\r\n    if(detail_depr.getValue() !== null &&  detail_depr.getValue() !== ''){\r\n      if(detail_depr2.getValue() === null || detail_depr2.getValue() === ''){\r\n        alert('필수입력값이 없습니다. > 감가비율');\r\n        const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n        chitBtn.click(0);\r\n  \r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // const detail_out = gfo_getCombo(props.pgm, 'detail_out'); //하차구역\r\n    // if(detail_out.getValue() === null){\r\n    //   alert('필수입력값이 없습니다. > 하차구역');\r\n    //   gfc_hideMask();\r\n    //   return;\r\n    // }\r\n    const detail_car = gfo_getCombo(props.pgm, 'detail_car'); //차종구분\r\n    if(detail_car.getValue() === null ||  detail_car.getValue() === ''){\r\n      alert('필수입력값이 없습니다. > 차종구분');\r\n      const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n      chitBtn.click(0);\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_rtn = gfo_getCombo(props.pgm, 'detail_rtn'); //반품구분\r\n    const detail_rtn2 = gfo_getCombo(props.pgm, 'detail_rtn2'); //반품구분사유\r\n    if(detail_rtn.getValue() !== null && detail_rtn.getValue() !== ''){\r\n      if(detail_rtn2.getValue() === null || detail_rtn2.getValue() === ''){\r\n        alert('필수입력값이 없습니다. > 반품구분사유');\r\n        const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n        chitBtn.click(0);\r\n  \r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const detail_warning = gfo_getCheckbox(props.pgm, 'detail_warning'); //경고\r\n    \r\n    const msg = `dScaleNumb=${scaleNumb}&` + //검수번호(계근번호)\r\n    `dWorker=${gfs_getStoreValue('USER_REDUCER', 'USER_ID')}&` + //검수자(ERP ID)\r\n    `dWorkerName=${gfs_getStoreValue('USER_REDUCER', 'USER_NAM')}&` + //검수자 이름\r\n    `dOutageReasonCode=${detail_subt_leg.getValue() === null ? '' : detail_subt_leg.getValue()}&` + //감량사유\r\n    `dOutageWeightCode=${detail_subt.getValue() === null ? '' : detail_subt.getValue()}&` + //감량중량\r\n    `dScrapGradeCode=${detail_grade1.getValue()}&` + //등급코드\r\n    `dScrapGradeItemCode=${detail_grade2.getValue()}&` + //등급아이템\r\n    `dTallyHistoryCode=${detail_depr.getValue() === null ? '' : detail_depr.getValue()}&` + //감가내역\r\n    \r\n    `dTallyRatio=${detail_depr2.getValue()}&` + //감가비율???\r\n    \r\n    // `dScrapAreaCode=${detail_out.getValue()}&` + //하차구역(섹터), 옥내는E001고정\r\n    `dScrapAreaCode=E001&` + //하차구역(섹터), 옥내는E001고정\r\n    `dReturnDivisionCode=${detail_rtn.getValue() === null ? '' : detail_rtn.getValue()}&` + //반품구분\r\n    `dReturnHistoryCode=${detail_rtn2.getValue() === null ? '' : detail_rtn2.getValue()}&` + //반품구분사유\r\n    \r\n    `dOutageReasonEtcEdit=&` + //기타의견???\r\n\r\n    `dCarTypeCode=${detail_car.getValue()}&` +\r\n    `dWarning=${detail_warning.getValue() === true ? 'Y' : 'N'}&` +\r\n    `dRain=0`;\r\n\r\n    const Data = await YK_WEB_REQ(`tally_process_erp_procedure.jsp?${msg}`);\r\n\r\n    const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === 'INSP_CFRM');\r\n    pgm[0].Retrieve();\r\n    \r\n    gfc_hideMask();\r\n  }\r\n  //#endregion\r\n\r\n  return (\r\n    <div className=\"complete_btn edit\">\r\n      <button onClick={() => onProcess()} type=\"button\" style={{display:'block'}}><span>검수수정</span></button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompleteBtnModify;","D:\\Project\\01.YK\\react\\src\\RtspFullScreen.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\ChitMemo copy.js",["695"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport TextArea from '../../../../Component/Control/TextArea';\r\nimport { gfs_dispatch } from '../../../../Method/Store';\r\nimport { gfo_getTextarea } from '../../../../Method/Component';\r\n\r\nfunction ChitMemo(props) {\r\n  const [focus, setFocus] = useState(false);\r\n  const textAreaRef = useRef();\r\n\r\n  const value = useSelector((e) => {\r\n    return e[props.reducer].DETAIL_SCALE;\r\n  }, (p, n) => {\r\n    return p === n;\r\n  });\r\n\r\n  useEffect(e => {\r\n    // if(props.reducer !== 'INSP_PROC_MAIN') return;\r\n\r\n    // if(value.chit === 'N'){\r\n      // gfo_getTextarea(props.pgm, 'chit_memo').setValue(''); 김경현\r\n    // }\r\n  }, [props.pgm, value])\r\n\r\n  const changeMemo = (e) => {\r\n    gfs_dispatch(props.reducer, 'CHIT_MEMO', {CHIT_MEMO: e.target.value});\r\n\r\n    console.log(e.target.value);\r\n  }\r\n\r\n  const limitLine = (e) => {\r\n    const maxRows = textAreaRef.current.props.rows;\r\n    const spaces = textAreaRef.current.props.cols;\r\n    let lines = e.target.value.split('\\n');\r\n    for (var i = 0; i < lines.length; i++) \r\n    {\r\n      if (lines[i].length <= spaces) continue;\r\n      var j = 0;\r\n\r\n      var space = spaces;\r\n\r\n      while (j++ <= spaces) \r\n      {\r\n        if (lines[i].charAt(j) === \" \") space = j;  \r\n      }\r\n      \r\n      lines[i + 1] = lines[i].substring(space + 1) + (lines[i + 1] || \"\");\r\n      lines[i] = lines[i].substring(0, space);\r\n    }\r\n\r\n    if(lines.length > maxRows){\r\n      e.target.style.color = 'red';\r\n      setTimeout(function(){\r\n        e.target.style.color = '';\r\n      },200);\r\n    }    \r\n\r\n    e.target.value = lines.slice(0, maxRows).join(\"\\n\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {focus === true ? \r\n        <TextArea \r\n          ref={textAreaRef}\r\n          pgm={props.pgm} \r\n          id={props.id} \r\n          rows={7} \r\n          cols={39}\r\n          wrap='soft' \r\n          defaultValue='' \r\n          onChange={e => changeMemo(e)} \r\n          onKeyUp={e => limitLine(e)}\r\n          onBlur={e => setFocus(false)}\r\n        >\r\n        </TextArea> :\r\n        <canvas \r\n          onClick={e => setFocus(true)}\r\n          style={{width:'100%', height: '156px'}}>\r\n        </canvas> \r\n      }\r\n    </>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default ChitMemo;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Report\\DAILY_PROC.js",["696","697","698"],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\ChitMemo copy 2.js",["699","700"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport TextArea from '../../../../Component/Control/TextArea';\r\nimport { gfs_dispatch } from '../../../../Method/Store';\r\nimport { gfo_getTextarea } from '../../../../Method/Component';\r\n\r\nfunction ChitMemo(props) {\r\n  const [focus, setFocus] = useState(false);\r\n  const textAreaRef = useRef();\r\n\r\n  let memoText;\r\n  \r\n  const value = useSelector((e) => {\r\n    return e[props.reducer].DETAIL_SCALE;\r\n  }, (p, n) => {\r\n    return p === n;\r\n  });\r\n\r\n  useEffect(e => {\r\n    // if(props.reducer !== 'INSP_PROC_MAIN') return;\r\n\r\n    // if(value.chit === 'N'){\r\n      // gfo_getTextarea(props.pgm, 'chit_memo').setValue(''); 김경현\r\n    // }\r\n  }, [props.pgm, value])\r\n\r\n  const changeMemo = (e) => {\r\n    gfs_dispatch(props.reducer, 'CHIT_MEMO', {CHIT_MEMO: e.target.value});\r\n    memoText = e.target.value;\r\n  }\r\n\r\n  const limitLine = (e) => {\r\n    const maxRows = textAreaRef.current.props.rows;\r\n    const spaces = textAreaRef.current.props.cols;\r\n    let lines = e.target.value.split('\\n');\r\n    for (var i = 0; i < lines.length; i++) \r\n    {\r\n      if (lines[i].length <= spaces) continue;\r\n      var j = 0;\r\n\r\n      var space = spaces;\r\n\r\n      while (j++ <= spaces) \r\n      {\r\n        if (lines[i].charAt(j) === \" \") space = j;  \r\n      }\r\n      \r\n      lines[i + 1] = lines[i].substring(space + 1) + (lines[i + 1] || \"\");\r\n      lines[i] = lines[i].substring(0, space);\r\n    }\r\n\r\n    if(lines.length > maxRows){\r\n      e.target.style.color = 'red';\r\n      setTimeout(function(){\r\n        e.target.style.color = '';\r\n      },200);\r\n    }    \r\n\r\n    e.target.value = lines.slice(0, maxRows).join(\"\\n\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {focus === true ? \r\n        <TextArea \r\n          ref={textAreaRef}\r\n          pgm={props.pgm} \r\n          id={props.id} \r\n          rows={7} \r\n          cols={39}\r\n          wrap='soft' \r\n          defaultValue='' \r\n          onChange={e => changeMemo(e)} \r\n          onKeyUp={e => limitLine(e)}\r\n          onBlur={e => {\r\n            setFocus(false)\r\n          }}\r\n        >\r\n        </TextArea> :\r\n        <canvas \r\n          onClick={e => setFocus(true)}\r\n          style={{width:'100%', height: '156px'}}>\r\n        </canvas> \r\n      }\r\n    </>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default ChitMemo;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Report\\TabList.js",["701","702"],"D:\\Project\\01.YK\\react\\src\\Snapshot.js",[],"D:\\Project\\01.YK\\react\\src\\HLSViewer.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\ENTR_WAIT\\ENTR_WAIT.js",["703","704","705"],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\Chit copy.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\Chit.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\Chit.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\DISP_PROC\\DISP_PROC copy.js",["706","707","708","709"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\nimport Checkbox from '../../../Component/Control/Checkbox';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_chit_yn_YK_Tally, gfc_sleep } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue, gfs_injectAsyncReducer, gfs_dispatch, gfs_subscribe } from '../../../Method/Store';\r\nimport { gfo_getCombo, gfo_getInput, gfo_getCheckbox } from '../../../Method/Component';\r\nimport { gfg_getGrid, gfg_setSelectRow, gfg_appendRow } from '../../../Method/Grid';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { TextArea as columnTextArea } from '../../../Component/Grid/Column/TextArea';\r\nimport { DateTime as columnDateTime } from '../../../Component/Grid/Column/DateTime';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\nimport Detailspan from '../Common/Detailspan';\r\nimport Botspan from '../Common/Botspan';\r\nimport Chit from '../Common/Chit/Chit';\r\nimport CompleteBtn from './CompleteBtn';\r\nimport TabList from './TabList';\r\nimport RecImage from '../Common/RecImage';\r\n\r\nimport { YK_WEB_REQ } from '../../../WebReq/WebReq';\r\n//#endregion\r\n\r\nclass DISP_PROC extends Component {\r\n\r\n  state = {\r\n    wait_list: [],\r\n    scaleNumb: '',\r\n    detail_grade2: YK_WEB_REQ('tally_process_pop.jsp?division=P005', {})\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#endregion\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const DISP_PROC_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'DISP_PROC_MAIN') {\r\n        return {\r\n          MAIN_WAIT    : nowState === undefined ? 0 : nowState.MAIN_WAIT,\r\n          MAIN_TOTAL   : nowState === undefined ? 0 : nowState.MAIN_TOTAL,\r\n          MAIN_WEIGHT  : nowState === undefined ? 0 : nowState.MAIN_WEIGHT,\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n          PROC_WAIT    : nowState === undefined ? 0 : nowState.PROC_WAIT,\r\n          DEPT_WAIT    : nowState === undefined ? 0 : nowState.DEPT_WAIT,\r\n          ENTR_WAIT    : nowState === undefined ? 0 : nowState.ENTR_WAIT,\r\n \r\n          DETAIL_SCALE : nowState === undefined ? '' : nowState.DETAIL_SCALE,\r\n          DETAIL_CARNO : nowState === undefined ? '' : nowState.DETAIL_CARNO,\r\n          DETAIL_WEIGHT: nowState === undefined ? '' : nowState.DETAIL_WEIGHT,\r\n          DETAIL_DATE  : nowState === undefined ? '' : nowState.DETAIL_DATE,\r\n\r\n          GRID_SCALE   : nowState === undefined ? '' : nowState.GRID_SCALE,\r\n\r\n          STD_CAM_IMG  : nowState === undefined ? null : nowState.STD_CAM_IMG,\r\n          DUM_CAM_IMG  : nowState === undefined ? null : nowState.DUM_CAM_IMG,\r\n\r\n          STD_CAM_OPEN : nowState === undefined ? false : nowState.STD_CAM_OPEN,\r\n          DUM_CAM_OPEN : nowState === undefined ? false : nowState.DUM_CAM_OPEN,\r\n\r\n          STD_CAM_FOCUS: nowState === undefined ? false : nowState.STD_CAM_FOCUS,\r\n          DUM_CAM_FOCUS: nowState === undefined ? false : nowState.DUM_CAM_FOCUS,\r\n\r\n          STD_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.STD_CAM_REC,\r\n          DUM_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.DUM_CAM_REC,\r\n\r\n          CHIT_MEMO    : nowState === undefined ? '' : nowState.CHIT_MEMO,\r\n          \r\n          CHIT_INFO    : nowState === undefined ? {\r\n                                                    date     : '',\r\n                                                    scaleNumb: '',\r\n                                                    carNumb  : '',\r\n                                                    vender   : '',\r\n                                                    itemFlag : '',\r\n                                                    Wgt      : '',\r\n                                                    loc      : '',\r\n                                                    user     : '',\r\n                                                    chit     : 'N',\r\n                                                  } : nowState.CHIT_INFO\r\n        };\r\n      }\r\n\r\n      if(action.type === 'MAIN_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WAIT : action.MAIN_WAIT\r\n        })\r\n      }else if(action.type === 'MAIN_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_TOTAL : action.MAIN_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WEIGHT : action.MAIN_WEIGHT\r\n        })\r\n      }else if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }else if(action.type === 'PROC_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          PROC_WAIT : action.PROC_WAIT\r\n        })\r\n      }else if(action.type === 'DEPT_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEPT_WAIT : action.DEPT_WAIT\r\n        })\r\n      }else if(action.type === 'ENTR_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ENTR_WAIT : action.ENTR_WAIT\r\n        })\r\n      }else if(action.type === 'DETAIL_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_SCALE : action.DETAIL_SCALE\r\n        })\r\n      }else if(action.type === 'GRID_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          GRID_SCALE : action.GRID_SCALE\r\n        })\r\n      }else if(action.type === 'DETAIL_CARNO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_CARNO : action.DETAIL_CARNO\r\n        })\r\n      }else if(action.type === 'DETAIL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_WEIGHT : action.DETAIL_WEIGHT\r\n        })\r\n      }else if(action.type === 'DETAIL_DATE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_DATE : action.DETAIL_DATE\r\n        })\r\n      }else if(action.type === 'STD_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_IMG : action.STD_CAM_IMG\r\n        })\r\n      }else if(action.type === 'DUM_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_IMG : action.DUM_CAM_IMG\r\n        })\r\n      }else if(action.type === 'STD_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_OPEN : action.STD_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'DUM_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_OPEN : action.DUM_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'STD_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_FOCUS : action.STD_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'DUM_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_FOCUS : action.DUM_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.STD_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.DUM_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec     : nowState.STD_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec     : nowState.DUM_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO_ITEM_FLAG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     :  nowState.CHIT_INFO.date,\r\n            scaleNumb:  nowState.CHIT_INFO.scaleNumb,\r\n            carNumb  :  nowState.CHIT_INFO.carNumb,\r\n            vender   :  nowState.CHIT_INFO.vender,\r\n            itemFlag :  action.itemFlag,\r\n            Wgt      :  nowState.CHIT_INFO.Wgt,\r\n            loc      :  nowState.CHIT_INFO.loc,\r\n            user     :  nowState.CHIT_INFO.user,\r\n            chit     :  nowState.CHIT_INFO.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     : action.date,\r\n            scaleNumb: action.scaleNumb,\r\n            carNumb  : action.carNumb,\r\n            vender   : action.vender,\r\n            itemFlag : action.itemFlag,\r\n            Wgt      : action.Wgt,\r\n            loc      : action.loc,\r\n            user     : action.user,\r\n            chit     : action.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_MEMO'){\r\n        return Object.assign({}, nowState, {\r\n          CHIT_MEMO : action.CHIT_MEMO\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('DISP_PROC_MAIN', DISP_PROC_MAIN);\r\n    //#endregion\r\n  }\r\n\r\n  \r\n  mainGrid = () => {\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n\r\n    YK_WEB_REQ('tally_mstr_pass.jsp').then(e => {\r\n      const main = e.data.dataSend;\r\n\r\n      if(main){\r\n\r\n        const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n        const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n    \r\n        const data = main.filter(e => {\r\n          if(search_tp !== null && search_tp !== ''){\r\n            //계근번호\r\n            if(search_tp === '1'){\r\n              if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //차량번호\r\n            else if(search_tp === '2'){\r\n              if(e.carNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //사전등급\r\n            else if(search_tp === '3'){\r\n              if(e.itemGrade.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //업체\r\n            else if(search_tp === '4'){\r\n              if(e.vendor.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            \r\n          }else{\r\n            return true;\r\n          }\r\n        })\r\n    \r\n        if(data.length > 0){\r\n          \r\n          //기존 그리드에서 scaleNumb기준으로 데이터가 없으면 추가한다.\r\n          for(let i = 0; i < data.length; i++){\r\n            const scaleNumb = data[i].scaleNumb;\r\n\r\n            const oldData = grid.getData().find(e => e.scaleNumb === scaleNumb);\r\n            if(!oldData){\r\n              gfg_appendRow(grid, grid.getRowCount(), {\r\n                scaleNumb,\r\n                carNumb: data[i].carNumb,\r\n                preItemGrade: data[i].preItemGrade,\r\n                itemGrade: data[i].itemGrade,\r\n                date: data[i].date,\r\n                lastDate: data[i].lastDate,\r\n                vendor: data[i].vendor\r\n              }, 'scaleNumb', false);\r\n\r\n              grid.resetOriginData();\r\n              grid.restore();\r\n            }\r\n          }\r\n\r\n          //새로운 정보 기준으로 데이터가 지워졌으면 삭제한다.\r\n          for(let i = 0; i < grid.getData().length; i++){\r\n            const scaleNumb =  grid.getData()[i].scaleNumb;\r\n\r\n            const newData = data.find(e => e.scaleNumb === scaleNumb)\r\n            if(!newData){\r\n              grid.removeRow(i);\r\n\r\n              //지워진 데이터가 기존에 선택된 데이터 이면 초기화 한다.\r\n              const selectScaleNumb = gfs_getStoreValue('DISP_PROC_MAIN', 'DETAIL_SCALE');\r\n              if(scaleNumb === selectScaleNumb){\r\n                gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n                gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n                gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: '0'});\r\n                gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n              }\r\n            }\r\n          }\r\n          \r\n          if(gfs_getStoreValue('DISP_PROC_MAIN', 'BOT_TOTAL') !== data.length)\r\n            gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n        }else{\r\n          grid.clear();\r\n          if(gfs_getStoreValue('DISP_PROC_MAIN', 'BOT_TOTAL') !== 0)\r\n            gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n        }\r\n      }else{\r\n        grid.clear();\r\n        if(gfs_getStoreValue('DISP_PROC_MAIN', 'BOT_TOTAL') !== 0)\r\n          gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      }\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n    // this.Retrieve();\r\n    \r\n    this.mainGridInterval = setInterval(e => {\r\n      this.mainGrid();\r\n    }, 2000)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.mainGridInterval);\r\n  }\r\n\r\n  Retrieve = async () => {\r\n\r\n    gfc_showMask();\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(''); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue('');      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: ''});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n\r\n    gfs_dispatch('DISP_PROC_MAIN', 'CHIT_INFO', {\r\n      itemFlag : '',\r\n      chit     : 'N',\r\n      scaleNumb: ''\r\n    });\r\n\r\n    const mainData = await YK_WEB_REQ('tally_mstr_pass.jsp');\r\n    const main = mainData.data.dataSend;\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    grid.clear();\r\n    \r\n    if(!main) {\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n\r\n    const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n    const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n\r\n    const data = main.filter(e => {\r\n      if(search_tp !== null && search_tp !== ''){\r\n        //계근번호\r\n        if(search_tp === '1'){\r\n          if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n            return true;\r\n          }else{\r\n            return false;\r\n          }\r\n        }\r\n        //차량번호\r\n        else if(search_tp === '2'){\r\n          if(e.carNumb.indexOf(search_txt) >= 0){\r\n            return true;\r\n          }else{\r\n            return false;\r\n          }\r\n        }\r\n        //사전등급\r\n        else if(search_tp === '3'){\r\n          if(e.itemGrade.indexOf(search_txt) >= 0){\r\n            return true;\r\n          }else{\r\n            return false;\r\n          }\r\n        }\r\n        //업체\r\n        else if(search_tp === '4'){\r\n          if(e.vendor.indexOf(search_txt) >= 0){\r\n            return true;\r\n          }else{\r\n            return false;\r\n          }\r\n        }\r\n        \r\n      }else{\r\n        return true;\r\n      }\r\n    })\r\n\r\n    if(data.length > 0){\r\n      grid.resetData(data);\r\n      gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n      \r\n      await gfc_sleep(100);\r\n\r\n      gfg_setSelectRow(grid);\r\n    }else{\r\n      gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n    }\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n\r\n  onSelectChange = async (e) => {\r\n    if(e === null) return;\r\n\r\n    gfs_dispatch('DISP_PROC_MAIN', 'GRID_SCALE', {GRID_SCALE: e.scaleNumb});\r\n\r\n    //계량증명서 정보여부\r\n    const chitInfoYn = await YK_WEB_REQ(`tally_chit.jsp?scaleNumb=${e.scaleNumb}`);\r\n    if(!chitInfoYn.data.dataSend){\r\n      alert('계량증명서 정보가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    //기존 등록된 정보\r\n    const dtlInfo = await YK_WEB_REQ(`tally_process_f_sel.jsp?scaleNumb=${e.scaleNumb}`);\r\n    if(!dtlInfo.data.dataSend){\r\n      alert('검수정보를 불러올수 없습니다.');\r\n      return;\r\n    }\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(e.preItemGrade); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue(dtlInfo.data.dataSend[0].IRON_GRADE);   //고철등급\r\n    const detail_grade2 = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n    await detail_grade2.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${dtlInfo.data.dataSend[0].IRON_GRADE}`, {})});\r\n    detail_grade2.setValue(dtlInfo.data.dataSend[0].IRON_GRADE_ITEM);   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue(dtlInfo.data.dataSend[0].REDUCE_WGT);     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(dtlInfo.data.dataSend[0].REDUCE_WGT_REASON_CODE); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue(dtlInfo.data.dataSend[0].DISCOUNT_CODE);     //감가내역\r\n    // gfo_getCombo(this.props.pgm, 'detail_depr2').setValue(dtlInfo.data.dataSend[0].DISCOUNT_CODE);    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue(dtlInfo.data.dataSend[0].CAR_TYPE);      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue(dtlInfo.data.dataSend[0].RETURN_CODE);      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue(dtlInfo.data.dataSend[0].RETURN_GUBUN);     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue(dtlInfo.data.dataSend[0].WARNING);  //경고\r\n\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: e.scaleNumb});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: e.carNumb});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: e.totalWgt});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: e.date});\r\n\r\n    //계량증명서 여부 확인.\r\n    gfs_dispatch('DISP_PROC_MAIN', 'CHIT_INFO', {\r\n      date     : chitInfoYn.data.dataSend[0].date,\r\n      scaleNumb: chitInfoYn.data.dataSend[0].scaleNumb,\r\n      carNumb  : chitInfoYn.data.dataSend[0].carNumb,\r\n      vender   : chitInfoYn.data.dataSend[0].vendor,\r\n      itemFlag : e.preItemGrade,\r\n      Wgt      : chitInfoYn.data.dataSend[0].totalWgt,\r\n      loc      : chitInfoYn.data.dataSend[0].area,\r\n      user     : gfs_getStoreValue('USER_REDUCER', 'USER_NAM')\r\n    });\r\n    return;\r\n    // if(chitYn.data === 'N'){\r\n    //   gfs_dispatch('DISP_PROC_MAIN', 'CHIT_INFO', {\r\n    //     date     : chitInfoYn.data.dataSend[0].date,\r\n    //     scaleNumb: chitInfoYn.data.dataSend[0].scaleNumb,\r\n    //     carNumb  : chitInfoYn.data.dataSend[0].carNumb,\r\n    //     vender   : chitInfoYn.data.dataSend[0].vendor,\r\n    //     itemFlag : e.preItemGrade,\r\n    //     Wgt      : chitInfoYn.data.dataSend[0].totalWgt,\r\n    //     loc      : chitInfoYn.data.dataSend[0].area,\r\n    //     user     : gfs_getStoreValue('USER_REDUCER', 'USER_NAM'),\r\n    //     chit     : 'N'\r\n    //   });\r\n    // }else{\r\n    //   gfs_dispatch('DISP_PROC_MAIN', 'CHIT_INFO', {\r\n    //     itemFlag : e.preItemGrade,\r\n    //     chit     : chitYn.data,\r\n    //     scaleNumb: chitInfoYn.data.dataSend[0].scaleNumb\r\n    //   });\r\n    // }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager' >\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '계근번호'\r\n                            },{\r\n                              code: '2',\r\n                              name: '차량번호'\r\n                            },{\r\n                              code: '3',\r\n                              name: '사전등급'\r\n                            },{\r\n                              code: '4',\r\n                              name: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       onKeyDown   = {(e) => {\r\n                        if(e.keyCode === 13){\r\n                          this.Retrieve()\r\n                        }\r\n                       }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        selectionChange={(e) => this.onSelectChange(e)}\r\n                        rowHeight={46}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        columns={[\r\n                          columnInput({\r\n                            name: 'scaleNumb',\r\n                            header: '계근번호',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'carNumb',\r\n                            header: '차량번호',\r\n                            width : 110,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'preItemGrade',\r\n                            header: '사전등급',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),     \r\n                          columnInput({\r\n                            name: 'itemGrade',\r\n                            header: '판정등급',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }), \r\n                          columnDateTime({\r\n                            name  : 'date',\r\n                            header: '입차시간',\r\n                            width : 80,\r\n                            height: 38,\r\n                            // paddingTop: ''\r\n                            readOnly: true,\r\n                            valign:'middle',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                            time  : 'HH:mm:ss'\r\n                          }),\r\n                          columnTextArea({\r\n                            name  : 'lastDate',\r\n                            header: '검수시간',\r\n                            width : 80,\r\n                            height: 38,\r\n                            // paddingTop: ''\r\n                            readOnly: true,\r\n                            valign:'middle',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                            time  : 'HH:mm'\r\n                          }),\r\n                          columnTextArea({\r\n                            name: 'vendor',\r\n                            header: 'Vendor',\r\n                            width : 200,\r\n                            height: 38,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          })\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>전체차량</span><Botspan reducer='DISP_PROC_MAIN' />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div id={`car_info_${this.props.pgm}`} className='car_info'>\r\n            <div className='title'><span>계근번호</span><Detailspan flag={1}  reducer='DISP_PROC_MAIN'/></div>\r\n\r\n\r\n\r\n            <TabList pgm={this.props.pgm} id={this.props.id} reducer='DISP_PROC_MAIN'/>\r\n\r\n\r\n            <div className='tab_content' id='tabMain'>\r\n              <div className='input_list on' id={`content1_${this.props.pgm}`}>\r\n                <ul>\r\n                  <li>\r\n                    <h5>사전등급</h5>\r\n                      <Input pgm     = {this.props.pgm}\r\n                             id      = 'detail_pre_grade'\r\n                             width   = '100%'\r\n                             disabled\r\n                      />\r\n                  </li>\r\n                  <li>\r\n                    <h5>등급책정</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                                id      = 'detail_grade1'\r\n                                value   = 'itemCode'\r\n                                display = 'item'\r\n                                placeholder = '고철등급 검색'\r\n                                height  = {42}\r\n                                etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P005', {})}\r\n                                onChange = {async (e) => {\r\n                                  const combo = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n                                  combo.setValue(null);\r\n\r\n                                  if(e !== undefined && e.value !== ''){\r\n                                    await combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                                    combo.setDisabled(false);\r\n                                  }else{\r\n                                    combo.setDisabled(true);\r\n                                  }\r\n                                }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_grade2'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>감량중량</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_subt'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감량중량 검색(KG)'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P535', {})}\r\n                            onChange = {async (e) => {\r\n                              if(e === undefined) return;\r\n\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_subt_leg');\r\n                              combo.setValue(null);\r\n\r\n                              if(e.value === '0'){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                await combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                                combo.setDisabled(false);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_subt_leg'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '감량사유 검색'\r\n                          etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P620', {})}\r\n                          isDisabled\r\n                    /> \r\n                  </li>\r\n                  <li>\r\n                    <h5>감가내역</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_depr'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감가내역 검색'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P130', {})}\r\n                            emptyRow\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_depr2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e !== undefined && e.value !== ''){\r\n                                combo.setDisabled(false);\r\n                              }else{\r\n                                combo.setDisabled(true);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm = {this.props.pgm}\r\n                          id      = 'detail_depr2'\r\n                          value   = 'code'\r\n                          display = 'name'\r\n                          placeholder = '감가비율'\r\n                          isDisabled\r\n                          data    = {[{\r\n                            'code': '10',\r\n                            'name': '10%'\r\n                          },{\r\n                            'code': '20',\r\n                            'name': '20%'\r\n                          },{\r\n                            'code': '30',\r\n                            'name': '30%'\r\n                          },{\r\n                            'code': '40',\r\n                            'name': '40%'\r\n                          },{\r\n                            'code': '50',\r\n                            'name': '50%'\r\n                          },{\r\n                            'code': '60',\r\n                            'name': '60%'\r\n                          },{\r\n                            'code': '70',\r\n                            'name': '70%'\r\n                          },{\r\n                            'code': '80',\r\n                            'name': '80%'\r\n                          },{\r\n                            'code': '90',\r\n                            'name': '90%'\r\n                          },{\r\n                            'code': '100',\r\n                            'name': '100%'\r\n                          }]}\r\n                          // emptyRow\r\n                    />\r\n                  </li>\r\n                  {/* <li>\r\n                    <h5>하차구역</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_out'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '하차구역 검색(SECTOR)'\r\n                          data    = ''\r\n                          onFocus = {ComboCreate => {\r\n                            YK_WEB_REQ('tally_process_pop.jsp?division=P530', {})\r\n                              .then(res => {\r\n                                ComboCreate({data   : res.data.dataSend,\r\n                                            value  : 'itemCode',\r\n                                            display: 'item'});\r\n                              })\r\n                          }}\r\n                  />\r\n                  </li> */}\r\n                  <li>\r\n                    <h5>차종구분</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_car'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '차종선택'\r\n                          etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P700', {})}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>반품구분</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '일부,전량 선택'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P110', {})}\r\n                            emptyRow\r\n                            onChange = {e => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_rtn2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value === ''){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                combo.setDisabled(false);\r\n                              }\r\n                              // combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                            }}\r\n                    />\r\n                  </div>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn2'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P120', {})}\r\n                            isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>경고</h5>\r\n                    <Checkbox pgm   = {this.props.pgm}\r\n                              id    = 'detail_warning'\r\n                              width = '30px'\r\n                              height= '30px'\r\n\r\n                    />\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              \r\n              <Chit pgm={this.props.pgm} id={'chit_memo'} reducer='DISP_PROC_MAIN'/>\r\n              \r\n\r\n\r\n              \r\n            </div>\r\n            <CompleteBtn pgm={this.props.pgm}/>\r\n\r\n\r\n\r\n\r\n          </div>\r\n            <div className='cctv_viewer'>\r\n              <h4>녹화영상</h4>\r\n              <div className='cctv_list'>\r\n                  <RecImage \r\n                    seq     = {1}\r\n                    reducer = 'DISP_PROC_MAIN'\r\n                    cam     = 'STD_CAM_OPEN' \r\n                    focus   = 'STD_CAM_FOCUS' \r\n                    rec     = 'STD_CAM_REC' \r\n                    image   = 'STD_CAM_IMG'/> \r\n                  <RecImage \r\n                    seq     = {2}\r\n                    reducer = 'DISP_PROC_MAIN'\r\n                    cam     = 'DUM_CAM_OPEN' \r\n                    focus   = 'DUM_CAM_FOCUS' \r\n                    rec     = 'DUM_CAM_REC' \r\n                    image   = 'DUM_CAM_IMG'/> \r\n              </div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DISP_PROC;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\CompleteBtn copy.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Report\\Chit.js",[],{"ruleId":"710","replacedBy":"711"},{"ruleId":"712","replacedBy":"713"},{"ruleId":"714","severity":1,"message":"715","line":9,"column":31,"nodeType":"716","messageId":"717","endLine":9,"endColumn":56},{"ruleId":"714","severity":1,"message":"718","line":10,"column":28,"nodeType":"716","messageId":"717","endLine":10,"endColumn":44},{"ruleId":"714","severity":1,"message":"719","line":125,"column":7,"nodeType":"716","messageId":"717","endLine":125,"endColumn":15},{"ruleId":"714","severity":1,"message":"720","line":15,"column":9,"nodeType":"716","messageId":"717","endLine":15,"endColumn":16},{"ruleId":"714","severity":1,"message":"721","line":1,"column":8,"nodeType":"716","messageId":"717","endLine":1,"endColumn":13},{"ruleId":"714","severity":1,"message":"722","line":6,"column":38,"nodeType":"716","messageId":"717","endLine":6,"endColumn":50},{"ruleId":"714","severity":1,"message":"723","line":24,"column":8,"nodeType":"716","messageId":"717","endLine":24,"endColumn":13},{"ruleId":"714","severity":1,"message":"724","line":12,"column":9,"nodeType":"716","messageId":"717","endLine":12,"endColumn":17},{"ruleId":"714","severity":1,"message":"725","line":15,"column":9,"nodeType":"716","messageId":"717","endLine":15,"endColumn":18},{"ruleId":"714","severity":1,"message":"726","line":6,"column":27,"nodeType":"716","messageId":"717","endLine":6,"endColumn":39},{"ruleId":"714","severity":1,"message":"727","line":8,"column":10,"nodeType":"716","messageId":"717","endLine":8,"endColumn":23},{"ruleId":"710","replacedBy":"728"},{"ruleId":"712","replacedBy":"729"},{"ruleId":"714","severity":1,"message":"730","line":3,"column":10,"nodeType":"716","messageId":"717","endLine":3,"endColumn":14},{"ruleId":"714","severity":1,"message":"731","line":9,"column":28,"nodeType":"716","messageId":"717","endLine":9,"endColumn":44},{"ruleId":"714","severity":1,"message":"732","line":10,"column":73,"nodeType":"716","messageId":"717","endLine":10,"endColumn":88},{"ruleId":"714","severity":1,"message":"733","line":10,"column":90,"nodeType":"716","messageId":"717","endLine":10,"endColumn":107},{"ruleId":"714","severity":1,"message":"734","line":11,"column":10,"nodeType":"716","messageId":"717","endLine":11,"endColumn":19},{"ruleId":"714","severity":1,"message":"735","line":16,"column":5,"nodeType":"716","messageId":"717","endLine":16,"endColumn":14},{"ruleId":"736","severity":1,"message":"737","line":273,"column":6,"nodeType":"738","endLine":273,"endColumn":8,"suggestions":"739"},{"ruleId":"714","severity":1,"message":"740","line":1,"column":17,"nodeType":"716","messageId":"717","endLine":1,"endColumn":24},{"ruleId":"714","severity":1,"message":"741","line":50,"column":7,"nodeType":"716","messageId":"717","endLine":50,"endColumn":20},{"ruleId":"714","severity":1,"message":"742","line":120,"column":7,"nodeType":"716","messageId":"717","endLine":120,"endColumn":14},{"ruleId":"714","severity":1,"message":"743","line":1,"column":17,"nodeType":"716","messageId":"717","endLine":1,"endColumn":25},{"ruleId":"714","severity":1,"message":"744","line":69,"column":9,"nodeType":"716","messageId":"717","endLine":69,"endColumn":17},{"ruleId":"745","severity":1,"message":"746","line":139,"column":25,"nodeType":"747","messageId":"748","endLine":139,"endColumn":26,"suggestions":"749"},{"ruleId":"714","severity":1,"message":"750","line":147,"column":9,"nodeType":"716","messageId":"717","endLine":147,"endColumn":19},{"ruleId":"714","severity":1,"message":"751","line":200,"column":9,"nodeType":"716","messageId":"717","endLine":200,"endColumn":22},{"ruleId":"714","severity":1,"message":"752","line":271,"column":9,"nodeType":"716","messageId":"717","endLine":271,"endColumn":18},{"ruleId":"714","severity":1,"message":"753","line":313,"column":9,"nodeType":"716","messageId":"717","endLine":313,"endColumn":17},{"ruleId":"710","replacedBy":"754"},{"ruleId":"712","replacedBy":"755"},{"ruleId":"714","severity":1,"message":"726","line":6,"column":27,"nodeType":"716","messageId":"717","endLine":6,"endColumn":39},{"ruleId":"714","severity":1,"message":"727","line":8,"column":10,"nodeType":"716","messageId":"717","endLine":8,"endColumn":23},{"ruleId":"714","severity":1,"message":"756","line":34,"column":9,"nodeType":"716","messageId":"717","endLine":34,"endColumn":18},{"ruleId":"714","severity":1,"message":"757","line":13,"column":22,"nodeType":"716","messageId":"717","endLine":13,"endColumn":36},{"ruleId":"758","severity":1,"message":"759","line":61,"column":36,"nodeType":"760","messageId":"761","endLine":61,"endColumn":38},{"ruleId":"758","severity":1,"message":"759","line":179,"column":32,"nodeType":"760","messageId":"761","endLine":179,"endColumn":34},{"ruleId":"714","severity":1,"message":"762","line":7,"column":51,"nodeType":"716","messageId":"717","endLine":7,"endColumn":71},{"ruleId":"714","severity":1,"message":"763","line":8,"column":67,"nodeType":"716","messageId":"717","endLine":8,"endColumn":80},{"ruleId":"758","severity":1,"message":"759","line":280,"column":36,"nodeType":"760","messageId":"761","endLine":280,"endColumn":38},{"ruleId":"714","severity":1,"message":"764","line":6,"column":62,"nodeType":"716","messageId":"717","endLine":6,"endColumn":76},{"ruleId":"714","severity":1,"message":"765","line":13,"column":8,"nodeType":"716","messageId":"717","endLine":13,"endColumn":14},{"ruleId":"758","severity":1,"message":"759","line":937,"column":34,"nodeType":"760","messageId":"761","endLine":937,"endColumn":36},{"ruleId":"758","severity":1,"message":"759","line":1158,"column":34,"nodeType":"760","messageId":"761","endLine":1158,"endColumn":36},{"ruleId":"758","severity":1,"message":"759","line":268,"column":36,"nodeType":"760","messageId":"761","endLine":268,"endColumn":38},{"ruleId":"714","severity":1,"message":"764","line":7,"column":51,"nodeType":"716","messageId":"717","endLine":7,"endColumn":65},{"ruleId":"714","severity":1,"message":"766","line":23,"column":8,"nodeType":"716","messageId":"717","endLine":23,"endColumn":15},{"ruleId":"714","severity":1,"message":"767","line":24,"column":8,"nodeType":"716","messageId":"717","endLine":24,"endColumn":16},{"ruleId":"758","severity":1,"message":"759","line":291,"column":36,"nodeType":"760","messageId":"761","endLine":291,"endColumn":38},{"ruleId":"714","severity":1,"message":"764","line":7,"column":51,"nodeType":"716","messageId":"717","endLine":7,"endColumn":65},{"ruleId":"714","severity":1,"message":"768","line":11,"column":10,"nodeType":"716","messageId":"717","endLine":11,"endColumn":30},{"ruleId":"714","severity":1,"message":"766","line":24,"column":8,"nodeType":"716","messageId":"717","endLine":24,"endColumn":15},{"ruleId":"714","severity":1,"message":"767","line":25,"column":8,"nodeType":"716","messageId":"717","endLine":25,"endColumn":16},{"ruleId":"758","severity":1,"message":"759","line":292,"column":36,"nodeType":"760","messageId":"761","endLine":292,"endColumn":38},{"ruleId":"714","severity":1,"message":"743","line":1,"column":36,"nodeType":"716","messageId":"717","endLine":1,"endColumn":44},{"ruleId":"714","severity":1,"message":"726","line":7,"column":34,"nodeType":"716","messageId":"717","endLine":7,"endColumn":46},{"ruleId":"714","severity":1,"message":"769","line":24,"column":10,"nodeType":"716","messageId":"717","endLine":24,"endColumn":20},{"ruleId":"714","severity":1,"message":"726","line":7,"column":34,"nodeType":"716","messageId":"717","endLine":7,"endColumn":46},{"ruleId":"714","severity":1,"message":"770","line":8,"column":35,"nodeType":"716","messageId":"717","endLine":8,"endColumn":48},{"ruleId":"714","severity":1,"message":"771","line":16,"column":20,"nodeType":"716","messageId":"717","endLine":16,"endColumn":32},{"ruleId":"714","severity":1,"message":"726","line":7,"column":34,"nodeType":"716","messageId":"717","endLine":7,"endColumn":46},{"ruleId":"714","severity":1,"message":"765","line":11,"column":8,"nodeType":"716","messageId":"717","endLine":11,"endColumn":14},{"ruleId":"714","severity":1,"message":"771","line":14,"column":20,"nodeType":"716","messageId":"717","endLine":14,"endColumn":32},{"ruleId":"714","severity":1,"message":"772","line":15,"column":22,"nodeType":"716","messageId":"717","endLine":15,"endColumn":36},{"ruleId":"714","severity":1,"message":"773","line":12,"column":9,"nodeType":"716","messageId":"717","endLine":12,"endColumn":18},{"ruleId":"714","severity":1,"message":"774","line":3,"column":10,"nodeType":"716","messageId":"717","endLine":3,"endColumn":21},{"ruleId":"714","severity":1,"message":"775","line":3,"column":23,"nodeType":"716","messageId":"717","endLine":3,"endColumn":33},{"ruleId":"714","severity":1,"message":"776","line":3,"column":35,"nodeType":"716","messageId":"717","endLine":3,"endColumn":51},{"ruleId":"714","severity":1,"message":"777","line":6,"column":24,"nodeType":"716","messageId":"717","endLine":6,"endColumn":36},{"ruleId":"714","severity":1,"message":"778","line":7,"column":10,"nodeType":"716","messageId":"717","endLine":7,"endColumn":25},{"ruleId":"714","severity":1,"message":"779","line":122,"column":11,"nodeType":"716","messageId":"717","endLine":122,"endColumn":15},{"ruleId":"714","severity":1,"message":"780","line":5,"column":10,"nodeType":"716","messageId":"717","endLine":5,"endColumn":25},{"ruleId":"714","severity":1,"message":"764","line":8,"column":51,"nodeType":"716","messageId":"717","endLine":8,"endColumn":65},{"ruleId":"714","severity":1,"message":"734","line":8,"column":67,"nodeType":"716","messageId":"717","endLine":8,"endColumn":76},{"ruleId":"714","severity":1,"message":"781","line":8,"column":87,"nodeType":"716","messageId":"717","endLine":8,"endColumn":105},{"ruleId":"714","severity":1,"message":"780","line":5,"column":10,"nodeType":"716","messageId":"717","endLine":5,"endColumn":25},{"ruleId":"714","severity":1,"message":"782","line":29,"column":5,"nodeType":"716","messageId":"717","endLine":29,"endColumn":13},{"ruleId":"714","severity":1,"message":"733","line":4,"column":10,"nodeType":"716","messageId":"717","endLine":4,"endColumn":27},{"ruleId":"714","severity":1,"message":"783","line":18,"column":9,"nodeType":"716","messageId":"717","endLine":18,"endColumn":16},{"ruleId":"714","severity":1,"message":"757","line":13,"column":22,"nodeType":"716","messageId":"717","endLine":13,"endColumn":36},{"ruleId":"758","severity":1,"message":"759","line":61,"column":36,"nodeType":"760","messageId":"761","endLine":61,"endColumn":38},{"ruleId":"758","severity":1,"message":"759","line":176,"column":32,"nodeType":"760","messageId":"761","endLine":176,"endColumn":34},{"ruleId":"714","severity":1,"message":"762","line":7,"column":51,"nodeType":"716","messageId":"717","endLine":7,"endColumn":71},{"ruleId":"714","severity":1,"message":"763","line":8,"column":67,"nodeType":"716","messageId":"717","endLine":8,"endColumn":80},{"ruleId":"758","severity":1,"message":"759","line":280,"column":36,"nodeType":"760","messageId":"761","endLine":280,"endColumn":38},{"ruleId":"758","severity":1,"message":"759","line":429,"column":32,"nodeType":"760","messageId":"761","endLine":429,"endColumn":34},"no-native-reassign",["784"],"no-negated-in-lhs",["785"],"no-unused-vars","'getDynamicSql_Mysql_async' is defined but never used.","Identifier","unusedVar","'getSessionCookie' is defined but never used.","'winClose' is assigned a value but never used.","'session' is assigned a value but never used.","'React' is defined but never used.","'gfg_setValue' is defined but never used.","'store' is defined but never used.","'dateList' is assigned a value but never used.","'valueList' is assigned a value but never used.","'gfs_dispatch' is defined but never used.","'gfp_openPopup' is defined but never used.",["784"],["785"],"'Link' is defined but never used.","'setSessionCookie' is defined but never used.","'gfs_PGM_REDUCER' is defined but never used.","'gfs_getStoreValue' is defined but never used.","'gfc_sleep' is defined but never used.","'isSession' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user_id'. Either include it or remove the dependency array.","ArrayExpression",["786"],"'useMemo' is defined but never used.","'onResizeClick' is assigned a value but never used.","'getMenu' is assigned a value but never used.","'useState' is defined but never used.","'user_nam' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["787","788"],"'fixedFrame' is assigned a value but never used.","'columnVisible' is assigned a value but never used.","'resetGrid' is assigned a value but never used.","'saveGrid' is assigned a value but never used.",["784"],["785"],"'limitLine' is assigned a value but never used.","'columnCombobox' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'gfc_chit_yn_YK_Tally' is defined but never used.","'gfs_subscribe' is defined but never used.","'gfc_chit_yn_YK' is defined but never used.","'Layout' is defined but never used.","'TabList' is defined but never used.","'RecImage' is defined but never used.","'getDynamicSql_Oracle' is defined but never used.","'YK_WEB_REQ' is defined but never used.","'gfg_appendRow' is defined but never used.","'columnNumber' is defined but never used.","'columnCheckbox' is defined but never used.","'onProcess' is assigned a value but never used.","'gfg_getGrid' is defined but never used.","'gfg_getRow' is defined but never used.","'gfg_setSelectRow' is defined but never used.","'gfo_getInput' is defined but never used.","'getSp_Oracle_YK' is defined but never used.","'Data' is assigned a value but never used.","'gfo_getTextarea' is defined but never used.","'gfc_oracleRetrieve' is defined but never used.","'memoText' is assigned a value but never used.","'btnList' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"789","fix":"790"},{"messageId":"791","fix":"792","desc":"793"},{"messageId":"794","fix":"795","desc":"796"},"Update the dependencies array to be: [user_id]",{"range":"797","text":"798"},"removeEscape",{"range":"799","text":"800"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"801","text":"802"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[8273,8275],"[user_id]",[3963,3964],"",[3963,3963],"\\"]