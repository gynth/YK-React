[{"D:\\Project\\react\\src\\index.js":"1","D:\\Project\\react\\src\\Store\\Store.js":"2","D:\\Project\\react\\src\\App.js":"3","D:\\Project\\react\\src\\Login.js":"4","D:\\Project\\react\\src\\Home.js":"5","D:\\Project\\react\\src\\Cookies.js":"6","D:\\Project\\react\\src\\Method\\Store.js":"7","D:\\Project\\react\\src\\Program\\WindowFrame.js":"8","D:\\Project\\react\\src\\Component\\Control\\ExplainInput.js":"9","D:\\Project\\react\\src\\Component\\Control\\Button.js":"10","D:\\Project\\react\\src\\db\\Mysql\\Mysql.js":"11","D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuMain.js":"12","D:\\Project\\react\\src\\Component\\Menu\\tabMenu\\TabList.js":"13","D:\\Project\\react\\src\\db\\Mysql\\MysqlServer.js":"14","D:\\Project\\react\\src\\Method\\Comm.js":"15","D:\\Project\\react\\src\\Method\\Grid.js":"16","D:\\Project\\react\\src\\Program\\MES\\PgmTest.js":"17","D:\\Project\\react\\src\\JSON\\jsonControl.js":"18","D:\\Project\\react\\src\\Program\\MES\\Chart\\PgmTest2.js":"19","D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainView.js":"20","D:\\Project\\react\\src\\Program\\MES\\Menu.js":"21","D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainList.js":"22","D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuTitle.js":"23","D:\\Project\\react\\src\\Component\\Menu\\tabMenu\\TabListItem.js":"24","D:\\Project\\react\\src\\Component\\Control\\DetailDiv.js":"25","D:\\Project\\react\\src\\Component\\Control\\SearchDiv.js":"26","D:\\Project\\react\\src\\Method\\Popup.js":"27","D:\\Project\\react\\src\\Method\\Component.js":"28","D:\\Project\\react\\src\\Component\\Control\\Input.js":"29","D:\\Project\\react\\src\\Component\\Control\\Combobox.js":"30","D:\\Project\\react\\src\\Component\\Control\\DateTime.js":"31","D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart1.js":"32","D:\\Project\\react\\src\\Component\\Control\\Number.js":"33","D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart2.js":"34","D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart3.js":"35","D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetail.js":"36","D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart4.js":"37","D:\\Project\\react\\src\\Component\\Grid\\Column\\Number.js":"38","D:\\Project\\react\\src\\Component\\Grid\\Column\\Input.js":"39","D:\\Project\\react\\src\\Component\\Grid\\Grid.js":"40","D:\\Project\\react\\src\\Component\\Layout\\Layout.js":"41","D:\\Project\\react\\src\\Component\\Grid\\Column\\DateTime.js":"42","D:\\Project\\react\\src\\Component\\Grid\\Column\\Combobox.js":"43","D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetailComponent.js":"44","D:\\Project\\react\\src\\Component\\Popup\\PopupFrame.js":"45","D:\\Project\\react\\src\\Program\\POPUP\\PopupTest.js":"46","D:\\Project\\01.YK\\react\\src\\index.js":"47","D:\\Project\\01.YK\\react\\src\\Store\\Store.js":"48","D:\\Project\\01.YK\\react\\src\\App.js":"49","D:\\Project\\01.YK\\react\\src\\Home.js":"50","D:\\Project\\01.YK\\react\\src\\Login.js":"51","D:\\Project\\01.YK\\react\\src\\Cookies.js":"52","D:\\Project\\01.YK\\react\\src\\Program\\WindowFrame.js":"53","D:\\Project\\01.YK\\react\\src\\WebReq\\WebReq.js":"54","D:\\Project\\01.YK\\react\\src\\Method\\Store.js":"55","D:\\Project\\01.YK\\react\\src\\Method\\Component.js":"56","D:\\Project\\01.YK\\react\\src\\Component\\Control\\Input.js":"57","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\tabMenu\\TabList.js":"58","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuMain.js":"59","D:\\Project\\01.YK\\react\\src\\db\\Mysql\\Mysql.js":"60","D:\\Project\\01.YK\\react\\src\\db\\Mysql\\MysqlServer.js":"61","D:\\Project\\01.YK\\react\\src\\JSON\\jsonControl.js":"62","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\tabMenu\\TabListItem.js":"63","D:\\Project\\01.YK\\react\\src\\Method\\Comm.js":"64","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainView.js":"65","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainList.js":"66","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuTitle.js":"67","D:\\Project\\01.YK\\react\\src\\Method\\Grid.js":"68","D:\\Project\\01.YK\\react\\src\\Component\\Control\\Combobox.js":"69","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Image.js":"70","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Input.js":"71","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Combobox.js":"72","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Grid.js":"73","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\TextArea.js":"74","D:\\Project\\01.YK\\react\\src\\Component\\Control\\DetailDiv.js":"75","D:\\Project\\01.YK\\react\\src\\Component\\Control\\SearchDiv.js":"76","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\DateTime.js":"77","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Number.js":"78","D:\\Project\\01.YK\\react\\src\\Method\\Popup.js":"79","D:\\Project\\01.YK\\react\\src\\Component\\Control\\DateTime.js":"80","D:\\Project\\01.YK\\react\\src\\Component\\Control\\Number.js":"81","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetail.js":"82","D:\\Project\\01.YK\\react\\src\\Component\\Layout\\Layout.js":"83","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetailComponent.js":"84","D:\\Project\\01.YK\\react\\src\\Component\\Popup\\PopupFrame.js":"85","D:\\Project\\01.YK\\react\\src\\Program\\POPUP\\PopupTest.js":"86","D:\\Project\\01.YK\\react\\src\\Component\\Control\\TextArea.js":"87","D:\\Project\\01.YK\\react\\src\\db\\Oracle\\Oracle.js":"88","D:\\Project\\01.YK\\react\\src\\db\\Oracle\\OracleServer.js":"89","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Checkbox.js":"90","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Detailspan.js":"91","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Mainspan.js":"92","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Botspan.js":"93","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\TabList.js":"94","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\CAMR_SETTING\\CAMR_SETTING.js":"95","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\Chit.js":"96","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\ChitMemo.js":"97","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\DISP_PROC\\CompleteBtn.js":"98","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\DISP_PROC\\TabList.js":"99","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\ENTR_PROC\\ENTR_PROC.js":"100","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\CompleteBtn.js":"101","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\DISP_PROC\\DISP_PROC.js":"102","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_HIST\\CompleteBtn.js":"103","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_HIST\\INSP_HIST.js":"104","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\DispImg.js":"105","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\DispInfo.js":"106","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\CompleteBtn.js":"107","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\Botspan.js":"108","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RecImage.js":"109","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RecTimer.js":"110","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\INSP_PROC.js":"111","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\SHIP_PROC\\CompleteBtn.js":"112","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\SHIP_PROC\\SHIP_PROC.js":"113","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\INSP_CFRM.js":"114","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\TabList.js":"115","D:\\Project\\01.YK\\react\\src\\Component\\Control\\Checkbox.js":"116","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\CompleteBtn.js":"117","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\RecImage.js":"118","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\RecImageDtl.js":"119","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\TabList.js":"120","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\INSP_CANC.js":"121","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RecImageDtl.js":"122","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\MENU\\Menu.js":"123","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\MENU\\MENU.js":"124","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\COMM\\COMM.js":"125","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RainInfo.js":"126","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\RecImage.js":"127","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\RecImageDtl.js":"128","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\AUTH\\AUTH.js":"129","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\USER\\USER.js":"130","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarUserName.js":"131","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\CompleteBtnModify.js":"132","D:\\Project\\01.YK\\react\\src\\RtspFullScreen.js":"133","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\ChitMemo copy.js":"134","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Report\\DAILY_PROC.js":"135","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\ChitMemo copy 2.js":"136","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Report\\TabList.js":"137","D:\\Project\\01.YK\\react\\src\\Snapshot.js":"138","D:\\Project\\01.YK\\react\\src\\HLSViewer.js":"139","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\ENTR_WAIT\\ENTR_WAIT.js":"140","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\Chit copy.js":"141","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\Chit.js":"142","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\Chit.js":"143","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\CompleteBtn copy.js":"144","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Report\\Chit.js":"145","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\INSP_PROC copy 2.js":"146","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\INSP_PROC copy 3.js":"147","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\INSP_PROC org.js":"148","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Report\\Botspan.js":"149","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\SHIP_PROC\\Botspan.js":"150","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\NOTI\\NOTICE.js":"151","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\INSP_PROC copy.js":"152"},{"size":280,"mtime":1623198507106,"results":"153","hashOfConfig":"154"},{"size":720,"mtime":1623198507098,"results":"155","hashOfConfig":"154"},{"size":423,"mtime":1623198506881,"results":"156","hashOfConfig":"154"},{"size":8922,"mtime":1624253274618,"results":"157","hashOfConfig":"154"},{"size":2339,"mtime":1623198789146,"results":"158","hashOfConfig":"154"},{"size":540,"mtime":1623198506986,"results":"159","hashOfConfig":"154"},{"size":23552,"mtime":1623287890068,"results":"160","hashOfConfig":"154"},{"size":8266,"mtime":1623287890068,"results":"161","hashOfConfig":"154"},{"size":2540,"mtime":1623198506898,"results":"162","hashOfConfig":"154"},{"size":2100,"mtime":1623198506882,"results":"163","hashOfConfig":"154"},{"size":6863,"mtime":1624253278354,"results":"164","hashOfConfig":"154"},{"size":4687,"mtime":1623198506975,"results":"165","hashOfConfig":"154"},{"size":3073,"mtime":1623287890068,"results":"166","hashOfConfig":"154"},{"size":1831,"mtime":1624251408048,"results":"167","hashOfConfig":"154"},{"size":3421,"mtime":1623198507062,"results":"168","hashOfConfig":"154"},{"size":2093,"mtime":1623287890068,"results":"169","hashOfConfig":"154"},{"size":18566,"mtime":1623894271533,"results":"170","hashOfConfig":"154"},{"size":1143,"mtime":1623198507057,"results":"171","hashOfConfig":"154"},{"size":6851,"mtime":1623198507076,"results":"172","hashOfConfig":"154"},{"size":1382,"mtime":1623198506974,"results":"173","hashOfConfig":"154"},{"size":24216,"mtime":1623894171987,"results":"174","hashOfConfig":"154"},{"size":1121,"mtime":1623198506969,"results":"175","hashOfConfig":"154"},{"size":474,"mtime":1623198506977,"results":"176","hashOfConfig":"154"},{"size":2132,"mtime":1623287890068,"results":"177","hashOfConfig":"154"},{"size":388,"mtime":1623198506891,"results":"178","hashOfConfig":"154"},{"size":255,"mtime":1623198506906,"results":"179","hashOfConfig":"154"},{"size":1224,"mtime":1623893479508,"results":"180","hashOfConfig":"154"},{"size":1819,"mtime":1623287890068,"results":"181","hashOfConfig":"154"},{"size":6965,"mtime":1623198506901,"results":"182","hashOfConfig":"154"},{"size":7293,"mtime":1623895218374,"results":"183","hashOfConfig":"154"},{"size":8663,"mtime":1623287890068,"results":"184","hashOfConfig":"154"},{"size":3372,"mtime":1623198507071,"results":"185","hashOfConfig":"154"},{"size":7848,"mtime":1623287890068,"results":"186","hashOfConfig":"154"},{"size":1917,"mtime":1623198507073,"results":"187","hashOfConfig":"154"},{"size":3131,"mtime":1623198507074,"results":"188","hashOfConfig":"154"},{"size":853,"mtime":1623198506971,"results":"189","hashOfConfig":"154"},{"size":2181,"mtime":1623198507075,"results":"190","hashOfConfig":"154"},{"size":4696,"mtime":1623287890068,"results":"191","hashOfConfig":"154"},{"size":5031,"mtime":1623198506933,"results":"192","hashOfConfig":"154"},{"size":19259,"mtime":1623287890068,"results":"193","hashOfConfig":"154"},{"size":3834,"mtime":1623198506966,"results":"194","hashOfConfig":"154"},{"size":4266,"mtime":1623287890068,"results":"195","hashOfConfig":"154"},{"size":10178,"mtime":1623892863583,"results":"196","hashOfConfig":"154"},{"size":1361,"mtime":1623198506972,"results":"197","hashOfConfig":"154"},{"size":4358,"mtime":1623835586251,"results":"198","hashOfConfig":"154"},{"size":1121,"mtime":1623198507093,"results":"199","hashOfConfig":"154"},{"size":280,"mtime":1627967732377,"results":"200","hashOfConfig":"201"},{"size":937,"mtime":1624503751437,"results":"202","hashOfConfig":"201"},{"size":805,"mtime":1633536621441,"results":"203","hashOfConfig":"201"},{"size":10443,"mtime":1635213837555,"results":"204","hashOfConfig":"201"},{"size":4942,"mtime":1634824844255,"results":"205","hashOfConfig":"201"},{"size":498,"mtime":1632994844866,"results":"206","hashOfConfig":"201"},{"size":9915,"mtime":1633422225765,"results":"207","hashOfConfig":"201"},{"size":6779,"mtime":1633680997530,"results":"208","hashOfConfig":"201"},{"size":26541,"mtime":1633405442644,"results":"209","hashOfConfig":"201"},{"size":2719,"mtime":1630373034880,"results":"210","hashOfConfig":"201"},{"size":7522,"mtime":1632721162627,"results":"211","hashOfConfig":"201"},{"size":6881,"mtime":1633349884572,"results":"212","hashOfConfig":"201"},{"size":4987,"mtime":1633526983838,"results":"213","hashOfConfig":"201"},{"size":183,"mtime":1633959414291,"results":"214","hashOfConfig":"201"},{"size":590,"mtime":1633959382976,"results":"215","hashOfConfig":"201"},{"size":1143,"mtime":1623198507057,"results":"216","hashOfConfig":"201"},{"size":2177,"mtime":1625013232145,"results":"217","hashOfConfig":"201"},{"size":12737,"mtime":1634036528661,"results":"218","hashOfConfig":"201"},{"size":1382,"mtime":1624581507523,"results":"219","hashOfConfig":"201"},{"size":950,"mtime":1632998921715,"results":"220","hashOfConfig":"201"},{"size":474,"mtime":1623198506977,"results":"221","hashOfConfig":"201"},{"size":2754,"mtime":1633068195385,"results":"222","hashOfConfig":"201"},{"size":10802,"mtime":1634105789772,"results":"223","hashOfConfig":"201"},{"size":2585,"mtime":1631508505548,"results":"224","hashOfConfig":"201"},{"size":5784,"mtime":1631077508334,"results":"225","hashOfConfig":"201"},{"size":13739,"mtime":1635225617898,"results":"226","hashOfConfig":"201"},{"size":24896,"mtime":1635233240965,"results":"227","hashOfConfig":"201"},{"size":5181,"mtime":1628573250397,"results":"228","hashOfConfig":"201"},{"size":388,"mtime":1623198506891,"results":"229","hashOfConfig":"230"},{"size":255,"mtime":1623198506906,"results":"231","hashOfConfig":"201"},{"size":4727,"mtime":1625460225083,"results":"232","hashOfConfig":"201"},{"size":5136,"mtime":1631781173368,"results":"233","hashOfConfig":"201"},{"size":1224,"mtime":1623893479508,"results":"234","hashOfConfig":"201"},{"size":8804,"mtime":1633406810234,"results":"235","hashOfConfig":"201"},{"size":7848,"mtime":1623287890068,"results":"236","hashOfConfig":"230"},{"size":1924,"mtime":1633654224428,"results":"237","hashOfConfig":"201"},{"size":3834,"mtime":1623198506966,"results":"238","hashOfConfig":"201"},{"size":1357,"mtime":1629162522603,"results":"239","hashOfConfig":"201"},{"size":4358,"mtime":1623835586251,"results":"240","hashOfConfig":"201"},{"size":1121,"mtime":1623198507093,"results":"241","hashOfConfig":"201"},{"size":2759,"mtime":1633424587295,"results":"242","hashOfConfig":"201"},{"size":583,"mtime":1631682469787,"results":"243","hashOfConfig":"201"},{"size":2815,"mtime":1633876217652,"results":"244","hashOfConfig":"201"},{"size":6243,"mtime":1634367386816,"results":"245","hashOfConfig":"201"},{"size":736,"mtime":1631508800841,"results":"246","hashOfConfig":"201"},{"size":1308,"mtime":1634274091288,"results":"247","hashOfConfig":"201"},{"size":401,"mtime":1628504220899,"results":"248","hashOfConfig":"201"},{"size":3029,"mtime":1633653393435,"results":"249","hashOfConfig":"201"},{"size":15720,"mtime":1633615789534,"results":"250","hashOfConfig":"201"},{"size":3476,"mtime":1633633002641,"results":"251","hashOfConfig":"201"},{"size":3601,"mtime":1634200655940,"results":"252","hashOfConfig":"201"},{"size":17534,"mtime":1634831636397,"results":"253","hashOfConfig":"201"},{"size":2387,"mtime":1633653112745,"results":"254","hashOfConfig":"201"},{"size":8094,"mtime":1633965915492,"results":"255","hashOfConfig":"201"},{"size":2751,"mtime":1635162380017,"results":"256","hashOfConfig":"201"},{"size":38714,"mtime":1635166996102,"results":"257","hashOfConfig":"201"},{"size":8125,"mtime":1629189945002,"results":"258","hashOfConfig":"201"},{"size":19690,"mtime":1634536796111,"results":"259","hashOfConfig":"201"},{"size":2078,"mtime":1629446195358,"results":"260","hashOfConfig":"201"},{"size":1742,"mtime":1629271666066,"results":"261","hashOfConfig":"201"},{"size":11204,"mtime":1635156975993,"results":"262","hashOfConfig":"201"},{"size":401,"mtime":1625628154746,"results":"263","hashOfConfig":"201"},{"size":8645,"mtime":1632982845864,"results":"264","hashOfConfig":"201"},{"size":2549,"mtime":1631508640072,"results":"265","hashOfConfig":"201"},{"size":74634,"mtime":1635162364656,"results":"266","hashOfConfig":"201"},{"size":9638,"mtime":1634367848117,"results":"267","hashOfConfig":"201"},{"size":32109,"mtime":1634369931728,"results":"268","hashOfConfig":"201"},{"size":36824,"mtime":1635162387472,"results":"269","hashOfConfig":"201"},{"size":2390,"mtime":1633653139760,"results":"270","hashOfConfig":"201"},{"size":7767,"mtime":1630374088248,"results":"271","hashOfConfig":"201"},{"size":3484,"mtime":1635162433103,"results":"272","hashOfConfig":"201"},{"size":518,"mtime":1630485105323,"results":"273","hashOfConfig":"201"},{"size":3574,"mtime":1631243139928,"results":"274","hashOfConfig":"201"},{"size":2388,"mtime":1633653126152,"results":"275","hashOfConfig":"201"},{"size":28523,"mtime":1635147488020,"results":"276","hashOfConfig":"201"},{"size":9035,"mtime":1633578155840,"results":"277","hashOfConfig":"201"},{"size":10780,"mtime":1631515530215,"results":"278","hashOfConfig":"201"},{"size":20041,"mtime":1631837046067,"results":"279","hashOfConfig":"201"},{"size":16623,"mtime":1634822172690,"results":"280","hashOfConfig":"201"},{"size":482,"mtime":1635157813752,"results":"281","hashOfConfig":"201"},{"size":572,"mtime":1633411428712,"results":"282","hashOfConfig":"201"},{"size":3965,"mtime":1633539103896,"results":"283","hashOfConfig":"201"},{"size":22680,"mtime":1633057469818,"results":"284","hashOfConfig":"201"},{"size":16479,"mtime":1635232614365,"results":"285","hashOfConfig":"201"},{"size":410,"mtime":1633046788866,"results":"286","hashOfConfig":"201"},{"size":12152,"mtime":1634831823300,"results":"287","hashOfConfig":"201"},{"size":8050,"mtime":1633530924758,"results":"288","hashOfConfig":"201"},{"size":2291,"mtime":1633404817506,"results":"289","hashOfConfig":"201"},{"size":36476,"mtime":1635232949094,"results":"290","hashOfConfig":"201"},{"size":2336,"mtime":1633424146344,"results":"291","hashOfConfig":"201"},{"size":1614,"mtime":1633653182243,"results":"292","hashOfConfig":"201"},{"size":1500,"mtime":1633537591014,"results":"293","hashOfConfig":"201"},{"size":5143,"mtime":1634143554257,"results":"294","hashOfConfig":"201"},{"size":8359,"mtime":1633966512611,"results":"295","hashOfConfig":"201"},{"size":3469,"mtime":1633583372095,"results":"296","hashOfConfig":"201"},{"size":1414,"mtime":1634115875523,"results":"297","hashOfConfig":"201"},{"size":1410,"mtime":1634115871277,"results":"298","hashOfConfig":"201"},{"size":10052,"mtime":1633494016369,"results":"299","hashOfConfig":"201"},{"size":1426,"mtime":1634115895072,"results":"300","hashOfConfig":"201"},{"size":75340,"mtime":1633759436320,"results":"301","hashOfConfig":"201"},{"size":70260,"mtime":1634054346241,"results":"302","hashOfConfig":"201"},{"size":70235,"mtime":1634088157862,"results":"303","hashOfConfig":"201"},{"size":504,"mtime":1634107070236,"results":"304","hashOfConfig":"201"},{"size":503,"mtime":1634366186560,"results":"305","hashOfConfig":"201"},{"size":14981,"mtime":1634634927472,"results":"306","hashOfConfig":"201"},{"size":73047,"mtime":1634720654234,"results":"307","hashOfConfig":"201"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},"1ai3dju",{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"317","messages":"318","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"310"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"310"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"310"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"310"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"310"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"310"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},"vmaov1",{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"409"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"409"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"409"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"409"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"409"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"471"},"4k3ehh",{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"471"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"409"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"409"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"409"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"409"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524","usedDeprecatedRules":"409"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"529","usedDeprecatedRules":"409"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"409"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"541","usedDeprecatedRules":"409"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"550","usedDeprecatedRules":"409"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"553","usedDeprecatedRules":"409"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556","usedDeprecatedRules":"409"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"409"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"574","usedDeprecatedRules":"409"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"577","usedDeprecatedRules":"409"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"580","messages":"581","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"582","usedDeprecatedRules":"409"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"409"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600","usedDeprecatedRules":"409"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"605","usedDeprecatedRules":"409"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"608","messages":"609","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"610","usedDeprecatedRules":"409"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"613","usedDeprecatedRules":"409"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620","usedDeprecatedRules":"409"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"633","usedDeprecatedRules":"409"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636","usedDeprecatedRules":"409"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"409"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"409"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"409"},"D:\\Project\\react\\src\\index.js",[],["650","651"],"D:\\Project\\react\\src\\Store\\Store.js",[],"D:\\Project\\react\\src\\App.js",[],"D:\\Project\\react\\src\\Login.js",["652","653","654"],"D:\\Project\\react\\src\\Home.js",["655"],"import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport SideBarMenuMain from './Component/Menu/SideBarMenu/SideBarMenuMain';\r\nimport TabList from './Component/Menu/tabMenu/TabList';\r\nimport WindowFrame from './Program/WindowFrame';\r\n\r\nimport './Home.css';\r\nimport {getSessionCookie} from \"./Cookies\";\r\n// import {ExampleApp} from './Component/Popup/TestPopup'\r\n\r\nlet isSession = false;\r\n\r\nconst Home = (props) => {  \r\n  const session = getSessionCookie(\"session\");\r\n  const leftWindow = useSelector((e) => e.SIDEBARMENU_REDUCER.State, (p, n) => {\r\n    return p.open === n.open;\r\n  });\r\n\r\n  const windowState = useSelector((e) => {\r\n    if(e.WINDOWFRAME_REDUCER === undefined) {\r\n      return null;\r\n    }else{\r\n      return e.WINDOWFRAME_REDUCER.windowState\r\n    }\r\n  }, (p, n) => {\r\n    return (p === null ? 0 : p.length) === (n === null ? 0 : n.length)\r\n  });\r\n\r\n  // const SideBarMenuState = useSelector((e) => e.SIDEBARMENU_REDUCER.State, (p, n) => {\r\n  //   return JSON.stringify(p) === JSON.stringify(n);\r\n  // });\r\n\r\n  // const width = SideBarMenuState[0].width;\r\n\r\n  let width = 343; \r\n  if(leftWindow.open) width = 90;\r\n  // if (session === \"SUCCESS\")\r\n  // {\r\n    isSession = true;\r\n  // }\r\n  return (\r\n    \r\n    <React.Fragment>      \r\n      {isSession ?\r\n      <>\r\n        <div style={{display:'inline-block', height:'100%'}} >\r\n          <SideBarMenuMain />\r\n        </div>\r\n        \r\n        <div style={{display:'inline-block', paddingRight:'17px', transition:'all 0.2s ease-in-out', position:'absolute', left:width, right:0, height:'100%'}}>\r\n          <div style={{display:'flex', flexDirection:'column', height:'100vh'}}>\r\n            <div style={{height:80}}>\r\n              <TabList />\r\n            </div>\r\n            <div style={{flex:1, display:'flex'}}> \r\n              <div style={{float:'left', width:'100%', position:'relative', zIndex:0, overflow:'hidden'}}>\r\n                {windowState != null &&\r\n                  windowState.map(e => \r\n                    <WindowFrame key={e.programId} programId={e.programId} programNam={e.programNam}/>\r\n                  )\r\n                }\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n      :\r\n        <div>LOGIN PLZZZ</div>\r\n      }\r\n      \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;","D:\\Project\\react\\src\\Cookies.js",["656"],"import React from \"react\";\r\nimport * as Cookies from \"js-cookie\";\r\n\r\nexport const setSessionCookie = (key, value, expire) => {\r\n  console.log(key + \":\" + value);\r\n  Cookies.remove(key); // 원래 쿠키 삭제\r\n  Cookies.set(key, value, {expires : expire} ); // 키, 값,  만료일\r\n};\r\n\r\nexport const getSessionCookie = (key) => {\r\n  const sessionCookie = Cookies.get(key);\r\n\r\n  if (sessionCookie === undefined) {\r\n    return {};\r\n  } \r\n  else \r\n  {\r\n    console.log(\"sessionCookie : \" + sessionCookie)\r\n    return sessionCookie;\r\n  }\r\n};","D:\\Project\\react\\src\\Method\\Store.js",[],"D:\\Project\\react\\src\\Program\\WindowFrame.js",[],"D:\\Project\\react\\src\\Component\\Control\\ExplainInput.js",[],"D:\\Project\\react\\src\\Component\\Control\\Button.js",[],"D:\\Project\\react\\src\\db\\Mysql\\Mysql.js",[],"D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuMain.js",[],"D:\\Project\\react\\src\\Component\\Menu\\tabMenu\\TabList.js",[],"D:\\Project\\react\\src\\db\\Mysql\\MysqlServer.js",[],"D:\\Project\\react\\src\\Method\\Comm.js",[],"D:\\Project\\react\\src\\Method\\Grid.js",[],"D:\\Project\\react\\src\\Program\\MES\\PgmTest.js",[],"D:\\Project\\react\\src\\JSON\\jsonControl.js",[],"D:\\Project\\react\\src\\Program\\MES\\Chart\\PgmTest2.js",[],"D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainView.js",[],"D:\\Project\\react\\src\\Program\\MES\\Menu.js",["657","658"],"import React, { Component } from 'react';\r\nimport Grid from '../../Component/Grid/Grid';\r\nimport Layout from '../../Component/Layout/Layout';\r\n\r\nimport { gfc_initPgm, gfc_getAtt, gfc_getMultiLang } from '../../Method/Comm';\r\nimport { gfg_getGrid, gfg_appendRow, gfg_setValue, gfg_setSelectRow } from '../../Method/Grid';\r\nimport { gfo_getInput, gfo_getCombo, gfo_getDateTime, gfo_getNumber } from '../../Method/Component';\r\nimport { gfs_getStoreValue } from '../../Method/Store';\r\nimport { getCallSP_Mysql } from '../../db/Mysql/Mysql';\r\n\r\nimport { Number as columnNumber } from '../../Component/Grid/Column/Number';\r\nimport { Input as columnInput } from '../../Component/Grid/Column/Input';\r\nimport { DateTime as columnDateTime } from '../../Component/Grid/Column/DateTime';\r\nimport { Combobox as columnCombobox} from '../../Component/Grid/Column/Combobox';\r\n\r\nimport SearchDiv from '../../Component/Control/SearchDiv';\r\nimport DetailDiv from '../../Component/Control/DetailDiv';\r\n\r\nimport Input from '../../Component/Control/Input';\r\nimport Combobox from '../../Component/Control/Combobox';\r\nimport DateTime from '../../Component/Control/DateTime';\r\nimport Number from '../../Component/Control/Number';\r\n\r\nimport store from \"../../Store/Store.js\";\r\n\r\nclass Menu extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        gfc_initPgm(props.pgm, props.nam, this);\r\n    }\r\n    Retrieve = () => {\r\n        const menu_id = gfo_getInput(this.props.pgm, 'search_menu_id').getValue();\r\n        const menu_nam = gfo_getInput(this.props.pgm, 'search_menu_nam').getValue();\r\n        const menu_use = gfo_getCombo(this.props.pgm, 'search_menu_use').getValue();                \r\n\r\n        getCallSP_Mysql(\r\n            [{SP        : 'SP_MENU_ED050',\r\n              ROWSTATUS : 'R',\r\n              COP_CD    : '10', \r\n              MENU_ID   : menu_id,\r\n              MENU_NAM  : menu_nam,\r\n              USE_YN    : menu_use,\r\n              MENU_LEVEL  : 0,\r\n              MENU_GRP_YN : '0',\r\n              UP_MENU_ID  : '',\r\n              PGM_ID      : '',\r\n              MENU_SEQ    : 0,\r\n              RETAUT_YN : '',\r\n              INSAUT_YN : '',\r\n              SAVAUT_YN : '',\r\n              DELAUT_YN : '',\r\n              PRNAUT_YN : '',\r\n              EXEAUT_YN : '',\r\n              APPAUT_YN : '',\r\n              XLSAUT_YN : '',\r\n              ETCAUT_YN : '',\r\n              UPDCHR_NO : '',\r\n            }]\r\n        ).then(\r\n            e=>{\r\n                const MSG_CODE = e.data.MSG_CODE;\r\n                const MSG_TEXT = e.data.MSG_TEXT;\r\n                if (e.data.result){\r\n                    const grid = gfg_getGrid(this.props.pgm, 'main50');\r\n                    grid.resetData(e.data.data);\r\n                    gfg_setSelectRow(grid);\r\n                  }\r\n                  else{\r\n                  }                  \r\n                  gfc_getMultiLang(MSG_CODE, MSG_TEXT);\r\n            }\r\n        )\r\n    }\r\n\r\n    Insert = () => {\r\n        const grid = gfg_getGrid(this.props.pgm, 'main50');\r\n        gfg_appendRow(grid, grid.getRowCount(), {}, 'MENU_NAM')\r\n    }\r\n    Save = () => {\r\n\r\n        const grid = gfg_getGrid(this.props.pgm, 'main50');\r\n        getCallSP_Mysql(\r\n            [],\r\n            [{grid,\r\n              SP          : 'SP_MENU_ED050',\r\n              COP_CD    : '10',              \r\n              MENU_ID     : 'VARCHAR',\r\n              MENU_NAM    : 'VARCHAR',\r\n              USE_YN      : 'VARCHAR',\r\n              MENU_LEVEL  : 'DECIMAL',\r\n              MENU_GRP_YN : 'VARCHAR',\r\n              UP_MENU_ID  : 'VARCHAR',\r\n              PGM_ID      : 'VARCHAR',\r\n              MENU_SEQ    : 'INT',\r\n              RETAUT_YN : 'VARCHAR',\r\n              INSAUT_YN : 'VARCHAR',\r\n              SAVAUT_YN : 'VARCHAR',\r\n              DELAUT_YN : 'VARCHAR',\r\n              PRNAUT_YN : 'VARCHAR',\r\n              EXEAUT_YN : 'VARCHAR',\r\n              APPAUT_YN : 'VARCHAR',\r\n              XLSAUT_YN : 'VARCHAR',\r\n              ETCAUT_YN : 'VARCHAR',\r\n              UPDCHR_NO : 'VARCHAR'\r\n            }],\r\n            [{\r\n                UPDCHR_NO : gfs_getStoreValue('USER_REDUCER', 'USER_ID') //gfs_getStoreValue\r\n            }]\r\n        ).then(\r\n            e=>{\r\n                const MSG_CODE = e.data.MSG_CODE;\r\n                const MSG_TEXT = e.data.MSG_TEXT;\r\n                if (e.data.result){\r\n                    grid.resetOriginData()\r\n                    grid.restore();\r\n                  }\r\n                  else{\r\n                    const COL_NAM = e.data.COL_NAM;\r\n                    const ROW_KEY = e.data.ROW_KEY;\r\n          \r\n                    gfg_setSelectRow(grid, COL_NAM, ROW_KEY);\r\n                  }                  \r\n                  gfc_getMultiLang(MSG_CODE, MSG_TEXT);\r\n            }\r\n        )\r\n    }\r\n    Delete = () => {\r\n        const grid = gfg_getGrid(this.props.pgm, 'main50');\r\n        getCallSP_Mysql(\r\n            [],\r\n            [{grid,\r\n              SP          : 'SP_MENU_ED050',\r\n              COP_CD    : '10',              \r\n              MENU_ID     : 'VARCHAR',\r\n              MENU_NAM    : 'VARCHAR',\r\n              USE_YN      : 'VARCHAR',\r\n              MENU_LEVEL  : 'DECIMAL',\r\n              MENU_GRP_YN : 'VARCHAR',\r\n              UP_MENU_ID  : 'VARCHAR',\r\n              PGM_ID      : 'VARCHAR',\r\n              MENU_SEQ    : 'INT',\r\n              RETAUT_YN : 'VARCHAR',\r\n              INSAUT_YN : 'VARCHAR',\r\n              SAVAUT_YN : 'VARCHAR',\r\n              DELAUT_YN : 'VARCHAR',\r\n              PRNAUT_YN : 'VARCHAR',\r\n              EXEAUT_YN : 'VARCHAR',\r\n              APPAUT_YN : 'VARCHAR',\r\n              XLSAUT_YN : 'VARCHAR',\r\n              ETCAUT_YN : 'VARCHAR',\r\n              UPDCHR_NO : 'VARCHAR'\r\n            }],\r\n            [{\r\n                UPDCHR_NO : gfs_getStoreValue('USER_REDUCER', 'USER_ID') //gfs_getStoreValue\r\n            }],\r\n            true\r\n        ).then(\r\n            e => {\r\n              const MSG_CODE = e.data.MSG_CODE;\r\n              const MSG_TEXT = e.data.MSG_TEXT;\r\n              const ROW_KEY = e.data.ROW_KEY;\r\n      \r\n              if(e.data.result){\r\n                grid.removeRow(ROW_KEY);\r\n                grid.resetOriginData();\r\n                grid.restore();\r\n                gfc_getMultiLang(MSG_CODE, MSG_TEXT);\r\n              }else{\r\n                if (MSG_CODE === 'PHANTOM'){\r\n      \r\n                }else{\r\n                  gfc_getMultiLang(MSG_CODE, MSG_TEXT);\r\n                }\r\n              }\r\n            }\r\n          )\r\n    }\r\n\r\n    onSelectChange = (e) => {\r\n        if(e === null) return;\r\n        gfo_getNumber(this.props.pgm, 'detail_menu_seq').setValue(e.MENU_SEQ);\r\n        gfo_getInput(this.props.pgm, 'detail_menu_comment').setValue(e.BIGO);\r\n        gfo_getInput(this.props.pgm, 'detail_crt_no').setValue(e.CRTCHR_NO);\r\n        gfo_getDateTime(this.props.pgm, 'detail_crt_dt').setValue(e.CRT_DT);\r\n        gfo_getInput(this.props.pgm, 'detail_up_no').setValue(e.UPDCHR_NO);\r\n        gfo_getDateTime(this.props.pgm, 'detail_up_dt').setValue(e.UPD_DT);        \r\n      }\r\n    \r\n      afterChange = (e) => {\r\n      }\r\n\r\n    render(){\r\n        return (\r\n        <Layout split   ='horizontal'\r\n                minSize     ={[54]}\r\n                defaultSize ={54}\r\n                // resizerStyle='none'\r\n                >\r\n        <SearchDiv>\r\n            <Input pgm={this.props.pgm}\r\n                    id='search_menu_id'\r\n                    label={gfc_getAtt('메뉴 ID')}\r\n            >\r\n            </Input>\r\n            <Input pgm={this.props.pgm}\r\n                    id='search_menu_nam'\r\n                    label={gfc_getAtt('메뉴 이름')}>\r\n            </Input>\r\n\r\n            <Combobox pgm={this.props.pgm}\r\n                        id='search_menu_use'\r\n                        location= 'Common/Common.js'\r\n                        fn      = 'use_yn'\r\n                        value   = 'USE_YN'\r\n                        display = 'YN_STR'\r\n                        field   = {[]}\r\n                        param   = {[]}\r\n                        width   = {500}\r\n                        >\r\n            </Combobox>            \r\n        </SearchDiv>\r\n\r\n            <Layout primary     = 'second'\r\n                    split       ='vertical'\r\n                    defaultSize = {'0%'}\r\n                    direction   = 'left'\r\n            >\r\n                <Grid pgm={this.props.pgm}\r\n                  id='main50'\r\n                  selectionChange={(e) => this.onSelectChange(e)}\r\n                  afterChange={(e) => this.afterChange(e)}\r\n                  columns = {[\r\n                                columnInput({name    : 'MENU_ID', \r\n                                            header  : gfc_getAtt('메뉴ID'), \r\n                                            width   : 120, \r\n                                            readOnly: false\r\n                                        }),\r\n                                columnInput({name    : 'MENU_NAM', \r\n                                            header  : gfc_getAtt('메뉴명'), \r\n                                            width   : 120, \r\n                                            readOnly: false\r\n                                        }),\r\n                                columnCombobox({name: 'USE_YN', \r\n                                                header: gfc_getAtt('사용여부'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),\r\n                                columnNumber({name : 'MENU_LEVEL',\r\n                                              header: gfc_getAtt('메뉴단계'),\r\n                                              readOnly : false,\r\n                                            }),\r\n                                columnCombobox({name: 'RETAUT_YN', \r\n                                                header: gfc_getAtt('조회권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),   \r\n                                columnCombobox({name: 'INSAUT_YN', \r\n                                                header: gfc_getAtt('등록권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),\r\n                                columnCombobox({name: 'SAVAUT_YN', \r\n                                                header: gfc_getAtt('저장권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),       \r\n                                columnCombobox({name: 'DELAUT_YN', \r\n                                                header: gfc_getAtt('삭제권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),   \r\n                                columnCombobox({name: 'PRNAUT_YN', \r\n                                                header: gfc_getAtt('출력권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),   \r\n                                columnCombobox({name: 'EXEAUT_YN', \r\n                                                header: gfc_getAtt('실행권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),   \r\n                                columnCombobox({name: 'APPAUT_YN', \r\n                                                header: gfc_getAtt('결재권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),   \r\n                                columnCombobox({name: 'XLSAUT_YN', \r\n                                                header: gfc_getAtt('엑셀권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),   \r\n                                columnCombobox({name: 'ETCAUT_YN', \r\n                                                header: gfc_getAtt('기타권한'),\r\n                                                readOnly: false,\r\n                                                width   : 150,\r\n                                                editor: {\r\n                                                    location: 'Common/Common.js',\r\n                                                    fn      : 'use_yn',\r\n                                                    value   : 'USE_YN',\r\n                                                    display : 'YN_STR',\r\n                                                    field   : [],\r\n                                                    param   : {},\r\n                                                    emptyRow: true,\r\n                                                    }\r\n                                                }),   \r\n                                columnNumber({name : 'MENU_SEQ',\r\n                                              header: gfc_getAtt('메뉴 SEQ'),\r\n                                              width : 0,\r\n                                              readOnly : true,                                              \r\n                                              }),\r\n                                columnInput({name  : 'BIGO', \r\n                                             header: gfc_getAtt('코멘트'), \r\n                                             width : 0,\r\n                                             readOnly: true\r\n                                             }),\r\n                                columnInput({name  : 'CRTCHR_NO', \r\n                                             header: gfc_getAtt('생성자'), \r\n                                             width : 0,\r\n                                             readOnly: true,\r\n                                             align   : 'center'\r\n                                            }),\r\n                                \r\n                                columnDateTime({name  : 'CRT_DT',\r\n                                                header: gfc_getAtt('생성일자'),\r\n                                                width : 0,\r\n                                                format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                                                time  : 'HH:mm',\r\n                                                editor: { \r\n                                                 timepicker: true\r\n                                                }\r\n                                              }),\r\n                                \r\n                                columnInput({name  : 'UPDCHR_NO', \r\n                                             header: gfc_getAtt('수정자'), \r\n                                             width : 0,\r\n                                             readOnly: true\r\n                                            }),\r\n  \r\n                                columnDateTime({name  : 'UPD_DT',\r\n                                                header: gfc_getAtt('수정일시'),\r\n                                                width : 0,\r\n                                                format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                                                time  : 'HH:mm',\r\n                                                readOnly: true\r\n                                              })\r\n                        \r\n                  ]}>\r\n\r\n                </Grid>\r\n                <DetailDiv title={gfc_getAtt('상세정보')}>\r\n                    <tr>\r\n                        <th>{gfc_getAtt('메뉴 SEQ')}</th>\r\n                        <td>\r\n                            <Number pgm={this.props.pgm}\r\n                                    id='detail_menu_seq'>\r\n                            </Number>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>{gfc_getAtt('비고')}</th>\r\n                        <td>\r\n                        <Input pgm={this.props.pgm}\r\n                                    id='detail_menu_comment'>\r\n                            </Input>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>{gfc_getAtt('생성자')}</th>\r\n                        <td>\r\n                        <Input pgm={this.props.pgm}\r\n                                    id='detail_crt_no'\r\n                                    readOnly={true}>\r\n                            </Input>\r\n                        </td>\r\n                        <th>{gfc_getAtt('생성일')}</th>\r\n                        <td>\r\n                            <DateTime pgm={this.props.pgm}\r\n                                        id='detail_crt_dt'\r\n                                        format= {`${gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT')} HH:mm`}\r\n                                        readOnly={true}>\r\n                            </DateTime>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>{gfc_getAtt('갱신자')}</th>\r\n                        <td>\r\n                        <Input pgm={this.props.pgm}\r\n                                    id='detail_up_no'\r\n                                    readOnly={true}>\r\n                            </Input>\r\n                        </td>\r\n                        <th>{gfc_getAtt('갱신일')}</th>\r\n                        <td>\r\n                            <DateTime pgm={this.props.pgm}\r\n                                        id='detail_up_dt'\r\n                                        format= {`${gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT')} HH:mm`}\r\n                                        readOnly={true}>                                            \r\n                            </DateTime>\r\n                        </td>\r\n                    </tr>\r\n                </DetailDiv>\r\n\r\n            </Layout>\r\n        </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainList.js",[],"D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuTitle.js",[],"D:\\Project\\react\\src\\Component\\Menu\\tabMenu\\TabListItem.js",[],"D:\\Project\\react\\src\\Component\\Control\\DetailDiv.js",[],"D:\\Project\\react\\src\\Component\\Control\\SearchDiv.js",[],"D:\\Project\\react\\src\\Method\\Popup.js",[],"D:\\Project\\react\\src\\Method\\Component.js",[],"D:\\Project\\react\\src\\Component\\Control\\Input.js",[],"D:\\Project\\react\\src\\Component\\Control\\Combobox.js",[],"D:\\Project\\react\\src\\Component\\Control\\DateTime.js",[],"D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart1.js",[],"D:\\Project\\react\\src\\Component\\Control\\Number.js",[],"D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart2.js",[],"D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart3.js",[],"D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetail.js",[],"D:\\Project\\react\\src\\Program\\MES\\Chart\\Chart4.js",["659","660"],"import React, { useRef } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport * as echarts from 'echarts';\r\n\r\nlet myChart;\r\n\r\nconst Chart4 = (props) => {\r\n  const chartDiv = useRef(null);\r\n  \r\n  const data = useSelector((e) => e.PGMTEST2_REDUCER.data4Org);\r\n\r\n  const dateList = data.map(function (item) {\r\n      return item.OTIME;\r\n  });\r\n  const valueList = data.map(function (item) {\r\n      return item.VALUE;\r\n  });\r\n\r\n  const option = {\r\n    xAxis: {\r\n        type: 'category',\r\n        boundaryGap: false\r\n    },\r\n    yAxis: {\r\n        type: 'value',\r\n        boundaryGap: [0, '30%']\r\n    },\r\n    visualMap: {\r\n        type: 'piecewise',\r\n        show: false,\r\n        dimension: 0,\r\n        seriesIndex: 0,\r\n        pieces: [{\r\n            gt: 1,\r\n            lt: 3,\r\n            color: 'rgba(0, 0, 180, 0.4)'\r\n        }, {\r\n            gt: 5,\r\n            lt: 7,\r\n            color: 'rgba(255, 0, 0)'\r\n        }]\r\n    },\r\n    series: [\r\n        {\r\n            type: 'line',\r\n            smooth: 0.6,\r\n            symbol: 'none',\r\n            lineStyle: {\r\n                color: '#5470C6',\r\n                width: 5\r\n            },\r\n            markLine: {\r\n                symbol: ['none', 'none'],\r\n                label: {show: false},\r\n                data: [\r\n                    {xAxis: 1},\r\n                    {xAxis: 3},\r\n                    {xAxis: 5},\r\n                    {xAxis: 7}\r\n                ]\r\n            },\r\n            areaStyle: {},\r\n            data: [\r\n                ['2019-10-10', 200],\r\n                ['2019-10-11', 560],\r\n                ['2019-10-12', 750],\r\n                ['2019-10-13', 580],\r\n                ['2019-10-14', 250],\r\n                ['2019-10-15', 300],\r\n                ['2019-10-16', 450],\r\n                ['2019-10-17', 300],\r\n                ['2019-10-18', 100]\r\n            ]\r\n        }\r\n    ]\r\n  };\r\n\r\n\r\n  if(myChart === undefined && chartDiv.current !== null){\r\n     myChart = echarts.init(chartDiv.current);\r\n  }\r\n\r\n  if(option && myChart) myChart.setOption(option);\r\n\r\n  return(\r\n    <div ref={chartDiv} style={{float:'left', width:'50%', height:'100%'}} ></div>\r\n  );\r\n}\r\n\r\nexport default Chart4;","D:\\Project\\react\\src\\Component\\Grid\\Column\\Number.js",[],"D:\\Project\\react\\src\\Component\\Grid\\Column\\Input.js",[],"D:\\Project\\react\\src\\Component\\Grid\\Grid.js",[],"D:\\Project\\react\\src\\Component\\Layout\\Layout.js",[],"D:\\Project\\react\\src\\Component\\Grid\\Column\\DateTime.js",[],"D:\\Project\\react\\src\\Component\\Grid\\Column\\Combobox.js",[],"D:\\Project\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetailComponent.js",[],"D:\\Project\\react\\src\\Component\\Popup\\PopupFrame.js",["661"],"import React from 'react';\r\nimport { Component } from 'react';\r\nimport { jsonMaxValue } from '../../JSON/jsonControl';\r\nimport { Rnd } from 'react-rnd';\r\nimport ReactDOM from 'react-dom';\r\nimport { gfs_PGM_REDUCER, gfs_dispatch, gfs_getStoreValue } from '../../Method/Store';\r\n\r\nclass PopupFrame extends Component {\r\n  popupOpenYn = null;\r\n  parentNode = null;\r\n  rootId = 0;\r\n\r\n  zIndex = 0;\r\n  state = {\r\n    width  : this.props.width,\r\n    height : this.props.height,\r\n    child  : undefined,\r\n    pgm    : '',\r\n    nam    : ''\r\n  }\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.rootId = this.props.rootId;\r\n\r\n    this.zIndex = jsonMaxValue(gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState'), 'windowZindex');\r\n\r\n    this.popupOpenYn = document.querySelector('[id^=\"POPUP_OWNER\"]');\r\n    \r\n    var bg = document.createElement('div');\r\n    bg.id = 'POPUP_OWNER_' + props.parent.props.pgm + '_' + this.rootId;\r\n    bg.style = `position: fixed;\r\n                z-index: ${this.zIndex};\r\n                left: 0px;\r\n                top: 0px;\r\n                width: 100%;\r\n                height: 100%;\r\n                overflow: auto;\r\n                background: rgba(0,0,0,0.4)`;\r\n    if(this.popupOpenYn === null){\r\n      document.body.append(bg);\r\n    }else{\r\n      this.parentNode = ReactDOM.findDOMNode(this.props.parent);\r\n      this.parentNode.append(bg);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    const pgm = this.state.pgm + this.props.rootId;\r\n    const rtnValue = gfs_getStoreValue(pgm);\r\n\r\n    // gfs_dispatch('WINDOWFRAME_REDUCER', 'CLOSEWINDOW', \r\n    //   ({\r\n    //     activeWindow: {programId: pgm\r\n    //                   }\r\n    //   })\r\n    // );\r\n\r\n    this.props.callback(rtnValue);\r\n  }\r\n\r\n  componentDidMount(){  \r\n    const popup = import(`../../Program/POPUP/${this.props.src}`);\r\n    popup.then(\r\n      e => {\r\n        //지금 팝업은 메뉴도 없고,\r\n        // 다국어 테이블도 없고해서 그냥 하드코딩한다.\r\n        // 차후에 결정되면 메뉴등록해서 nam가져올지 다국어에서 nam가져올지 결정\r\n        const pgm = e.default.name + this.props.rootId;\r\n        const nam = e.default.name;\r\n        gfs_PGM_REDUCER(pgm);\r\n\r\n        this.setState({pgm: e.default.name, nam: nam});\r\n\r\n        this.setState({\r\n          child: \r\n          <div className='win_body'>\r\n            <e.default pgm={pgm} nam={nam}/>\r\n          </div>\r\n        });\r\n      }\r\n    )\r\n  }\r\n  \r\n  render() {\r\n\r\n    return(     \r\n      <Rnd size={{\r\n        width: this.state.width,\r\n        height:this.state.height\r\n      }}\r\n      dragHandleClassName='win_header'\r\n      // bounds='parent'\r\n      style={{\r\n        zIndex: this.zIndex + 1\r\n      }}\r\n      onResizeStop= {(e, dir, ref, delta, position) => this.setState({width: this.state.width < delta.width ? this.state.width - delta.width : this.state.width + delta.width,\r\n                                                                      height: this.state.height < delta.height ? this.state.height - delta.height : this.state.height + delta.height})}\r\n      >\r\n        <div style={{width:'100%'}} \r\n             className='content'\r\n             >\r\n        \r\n          <div className='win_header' style={{cursor:'move'}}>\r\n            <h4>[{this.state.pgm}] {this.state.nam}</h4>\r\n            \r\n            <div className='win_controller'>\r\n\r\n              <button type='button' className='close' \r\n                      onClick={() => {\r\n                        ReactDOM.unmountComponentAtNode(document.getElementById('POPUP_' + this.props.parent.props.pgm + '_' + this.rootId));\r\n\r\n                        if(this.parentNode === null){\r\n                          document.body.removeChild(document.getElementById('POPUP_OWNER_' + this.props.parent.props.pgm + '_' + this.rootId));\r\n                        }else{\r\n                          this.parentNode.removeChild(document.getElementById('POPUP_OWNER_' + this.props.parent.props.pgm + '_' + this.rootId));\r\n                        }\r\n                      }}\r\n                      onMouseDown={e => e.stopPropagation()} >\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {this.state.child}\r\n        </div>\r\n      </Rnd>    \r\n    );\r\n  }\r\n}\r\n\r\nPopupFrame.propTypes = {\r\n\r\n};\r\n\r\nPopupFrame.defaultProps = {\r\n\r\n};\r\n\r\nexport default PopupFrame;","D:\\Project\\react\\src\\Program\\POPUP\\PopupTest.js",["662"],"import React from 'react';\r\nimport { Component } from 'react';\r\n\r\nimport Layout from '../../Component/Layout/Layout';\r\nimport SearchDiv from '../../Component/Control/SearchDiv';\r\nimport Input from '../../Component/Control/Input';\r\nimport { gfc_getAtt } from '../../Method/Comm';\r\nimport { gfp_openPopup } from '../../Method/Popup';\r\n\r\nclass PopupTest extends Component {\r\n\r\n  // constructor(props){\r\n  //   super(props);\r\n  // }\r\n  \r\n  render() {\r\n\r\n    return(        \r\n      <Layout split       ='horizontal'\r\n              minSize     ={[54]}\r\n              defaultSize ={54}\r\n              resizerStyle='none' \r\n      >\r\n        <SearchDiv>\r\n            <Input pgm={this.props.pgm}\r\n                   id='search_user_nam'\r\n                   label={gfc_getAtt('사용자명')} />\r\n            <Input pgm={this.props.pgm}\r\n                   id='search_user_id'\r\n                   label={gfc_getAtt('사용자ID')} />\r\n                   \r\n        </SearchDiv>\r\n        <div>HIHI</div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nPopupTest.propTypes = {\r\n\r\n};\r\n\r\nPopupTest.defaultProps = {\r\n\r\n};\r\n\r\nexport default PopupTest;","D:\\Project\\01.YK\\react\\src\\index.js",[],["663","664"],"D:\\Project\\01.YK\\react\\src\\Store\\Store.js",[],"D:\\Project\\01.YK\\react\\src\\App.js",[],"D:\\Project\\01.YK\\react\\src\\Home.js",["665","666","667","668","669"],"D:\\Project\\01.YK\\react\\src\\Login.js",[],"D:\\Project\\01.YK\\react\\src\\Cookies.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\WindowFrame.js",["670","671","672"],"import React, { useMemo, useState, useEffect } from 'react';\r\nimport { Rnd } from 'react-rnd';\r\nimport { useSelector } from 'react-redux';\r\nimport { gfs_getStoreValue, gfs_dispatch } from '../Method/Store';\r\nimport PropTypes from 'prop-types';\r\nimport './WindowFrame.css';\r\nimport { jsonMaxValue, jsonRtn } from '../JSON/jsonControl';\r\nimport { getDynamicSql_Oracle } from '../db/Oracle/Oracle';\r\nimport { gfc_set_oracle_column } from '../Method/Comm';\r\n\r\n//#region 이벤트 정의\r\nconst onWindowClick = (programId, programNam) => {\r\n  \r\n  gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n    ({\r\n      windowZindex: 0,\r\n      activeWindow: {programId,\r\n                     programNam\r\n                    }\r\n    })\r\n  );\r\n};\r\n\r\nconst onWindowCloseClick = (programId) => {\r\n  gfs_dispatch('WINDOWFRAME_REDUCER', 'CLOSEWINDOW', \r\n    ({\r\n      activeWindow: {programId\r\n                    }\r\n    })\r\n  );\r\n\r\n  gfs_dispatch(programId, 'DELPGM'\r\n  );\r\n\r\n  let maxZindex = jsonMaxValue(gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState'), 'windowZindex');\r\n  let selJson = jsonRtn(gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState'), 'windowZindex', maxZindex);\r\n  \r\n  if(selJson !== undefined){\r\n    gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n      ({\r\n        windowZindex: 0,\r\n        activeWindow: {programId : selJson[0]['programId'],\r\n                       programNam: selJson[0]['programNam']\r\n                      }\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\nconst onResizeClick = (type, programId, programNam) => {\r\n  gfs_dispatch('WINDOWFRAME_REDUCER', type, \r\n    ({\r\n      windowZindex: 0,\r\n      activeWindow: {programId,\r\n                     programNam\r\n                    }\r\n    })\r\n  );\r\n};\r\n\r\nconst onResize = (programId, programNam) => {\r\n  gfs_dispatch('WINDOWFRAME_REDUCER', 'RESIZESTART', \r\n    ({\r\n      windowZindex: 0,\r\n      activeWindow: {programId,\r\n                     programNam\r\n                    },\r\n      resizing    : true\r\n    })\r\n  );\r\n};\r\n\r\nconst onResizeStop = (width, height, x, y, programId, programNam) => {\r\n  gfs_dispatch('WINDOWFRAME_REDUCER', 'RESIZEWINDOW', \r\n    ({\r\n      windowZindex: 0,\r\n      activeWindow: {programId,\r\n                     programNam\r\n                    },\r\n      width       : width,\r\n      height      : height,\r\n      X           : x,\r\n      Y           : y,\r\n      resizing    : false\r\n    })\r\n  );\r\n};\r\n\r\nconst onDrag = (programId, programNam, width) => {\r\n  if(width !== '100%'){  \r\n    gfs_dispatch('WINDOWFRAME_REDUCER', 'DRAGSTART', \r\n      ({\r\n        windowZindex: 0,\r\n        activeWindow: {programId,\r\n                      programNam\r\n                      },\r\n        dragging    : true\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\nconst onDragStop = (x, y, width, programId, programNam) => {\r\n  if(width !== '100%'){\r\n    gfs_dispatch('WINDOWFRAME_REDUCER', 'DRAGWINDOW', \r\n      ({\r\n        windowZindex: 0,\r\n        activeWindow: {programId,\r\n                       programNam\r\n                      },\r\n        X           : x,\r\n        Y           : y,\r\n        dragging    : false\r\n      })\r\n    );\r\n  }\r\n};\r\n//#endregion\r\n\r\nconst getMenu = async(programId, programNam) => {\r\n  \r\n}\r\n\r\nconst applyWindow = async (programId, programNam) => {\r\n  // if(programId === 'ED000') return <PgmTest pgm={programId} nam={programNam}/>\r\n  // else if (programId === 'ED010') return <PgmTest2 pgm={programId} nam={programNam}/>\r\n  // else if (programId === 'ED050') return <Menu pgm={programId} nam={programNam}/>\r\n\r\n  let result = await getDynamicSql_Oracle(\r\n    'Common/Common',\r\n    'MENU_AUTH',\r\n    [{programId}]\r\n  ); \r\n\r\n  let data = gfc_set_oracle_column(result);\r\n  if(data.length > 0){\r\n    const pgm = require(`../Program/${data[0].PGM_ROOT}`);\r\n    return <pgm.default pgm={programId} nam={programNam} />\r\n  }else{\r\n    return null;\r\n  }\r\n  \r\n\r\n  // if(programId === 'COMM'){\r\n  //   const pgm = require(`../Program/COMM/${programId}/${programId}.js`);\r\n  //   return <pgm.default pgm={programId} nam={programNam} />\r\n  // }else if(programId === 'MENU'){\r\n  //   const pgm = require(`../Program/COMM/${programId}/${programId}.js`);\r\n  //   return <pgm.default pgm={programId} nam={programNam} />\r\n  // }else if(programId === 'AUTH'){\r\n  //   const pgm = require(`../Program/COMM/${programId}/${programId}.js`);\r\n  //   return <pgm.default pgm={programId} nam={programNam} />\r\n  // }else if(programId === 'USER'){\r\n  //   const pgm = require(`../Program/COMM/${programId}/${programId}.js`);\r\n  //   return <pgm.default pgm={programId} nam={programNam} />\r\n  // }else{\r\n  //   const pgm = require(`../Program/IMS/${programId}/${programId}.js`);\r\n  \r\n  //   return <pgm.default pgm={programId} nam={programNam} />\r\n  // }\r\n}\r\n\r\nconst WindowFrame = (props) => {\r\n  const [window, setWindow] = useState(null);\r\n  // const window = useMemo(() => applyWindow(props.programId, props.programNam), [props.programId, props.programNam])\r\n\r\n  useEffect(() => {\r\n    applyWindow(props.programId, props.programNam).then(e => {\r\n      setWindow(e);\r\n    })\r\n  }, [props.programId, props.programNam])\r\n\r\n  if(window !== null){\r\n    \r\n  }\r\n  const windowState = useSelector((e) => e.WINDOWFRAME_REDUCER.windowState, (p, n) => {\r\n    // return JSON.stringify(p) === JSON.stringify(n);\r\n    const before = jsonRtn(n, 'programId', props.programId);\r\n    const after = jsonRtn(p, 'programId', props.programId);\r\n    \r\n    let result = true;\r\n\r\n    if(before[0].programId !== after[0].programId) result = false;\r\n    else if(before[0].windowZindex !== after[0].windowZindex) result = false;\r\n    else if(before[0].windowWidth !== after[0].windowWidth) result = false;\r\n    else if(before[0].windowHeight !== after[0].windowHeight) result = false;\r\n    else if(before[0].X !== after[0].X) result = false;\r\n    else if(before[0].Y !== after[0].Y) result = false;\r\n    else if(before[0].resizing !== after[0].resizing) result = false;\r\n    else if(before[0].dragging !== after[0].dragging) result = false;\r\n\r\n    return result\r\n  });\r\n\r\n  const activeWindow = useSelector((e) => e.WINDOWFRAME_REDUCER.activeWindow, (p, n) => {\r\n    return p.programId === n.programId;\r\n  });\r\n  \r\n  const thisValue = jsonRtn(windowState, 'programId', props.programId);\r\n\r\n  if(thisValue !== undefined && window !== null){\r\n    const windowWidth  = thisValue[0]['windowWidth'];\r\n    const windowHeight = thisValue[0]['windowHeight'];\r\n    const x  = thisValue[0]['X'];\r\n    const y = thisValue[0]['Y'];\r\n    const isWindow = (activeWindow['programId'] === props.programId) ? true : false;\r\n    const resizing = thisValue[0]['resizing'];\r\n    const dragging = thisValue[0]['dragging'];\r\n\r\n    \r\n    return (\r\n      <Rnd\r\n        default={{\r\n          x: 0,\r\n          y: 0,\r\n          width: '100%',\r\n          height: '100%'\r\n        }}\r\n        size={{\r\n          width: windowWidth,\r\n          height: windowHeight\r\n        }}\r\n        position={{\r\n          x: x,\r\n          y: y\r\n        }}\r\n        style={{zIndex: thisValue[0]['windowZindex']}}\r\n        minWidth={60}\r\n        minHeight={60}\r\n        bounds='parent'\r\n        // enableResizing= {windowWidth === '100%' ? false : true}\r\n        enableResizing={false}\r\n        dragHandleClassName='win_header'\r\n        onResize={() => onResize(props.programId, props.programNam)}\r\n        onResizeStop= {(e, dir, ref, delta, position) => onResizeStop(delta.width, delta.height, position.x, position.y, props.programId, props.programNam)}\r\n        onDrag={() => onDrag(props.programId, props.programNam, windowWidth)}\r\n        onDragStop= {(e, data) => onDragStop(data.x, data.y, windowWidth, props.programId, props.programNam) }>\r\n \r\n        <div style={{width:'100%', boxShadow: isWindow && '0px 1px 5px 1px gray',\r\n                     borderStyle: ((resizing || dragging) && windowWidth !== '100%') && 'dotted', \r\n                     borderColor: ((resizing || dragging) && windowWidth !== '100%') && 'gray'}} \r\n             className='content'\r\n             onMouseUp={(e) => onWindowClick(props.programId, props.programNam)}>\r\n        \r\n          <div className='win_header' style={{cursor:'move'}}\r\n              //  onDoubleClick={(e) => onResizeClick(windowWidth === '100%' ? 'MINIMIZEWINDOW' : 'MAXIMIZEWINDOW', props.programId, props.programNam)}\r\n               >\r\n            <h4>[{props.programId}] {props.programNam}</h4>\r\n            \r\n            <div className='win_controller'>\r\n              {/* <button type='button' className='min'\r\n                      onMouseDown={e => e.stopPropagation()}>\r\n              </button>\r\n              \r\n              <button type='button' className='max'\r\n                      onClick={() => onResizeClick(windowWidth === '100%' ? 'MINIMIZEWINDOW' : 'MAXIMIZEWINDOW', props.programId, props.programNam)}  \r\n                      onMouseDown={e => e.stopPropagation()}>\r\n              </button> */}\r\n\r\n              <button type='button' className='close' \r\n                      onClick={() => onWindowCloseClick(props.programId)}\r\n                      onMouseDown={e => e.stopPropagation()} >\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* <div className='win_body' style={{position:'relative', display: ((resizing || dragging) && windowWidth !== '100%') && 'none'}}> */}\r\n          <div className='win_body' style={{display: ((resizing || dragging) && windowWidth !== '100%') && 'none'}}>\r\n            {/* <PgmTest pgm={props.programId} nam={props.programNam}/> */}\r\n            {window !== null && window}\r\n          </div>\r\n        </div>\r\n        \r\n      </Rnd>\r\n    );\r\n  }else{\r\n    return null;\r\n  }\r\n};\r\n\r\nWindowFrame.propTypes = {\r\n  programId: PropTypes.string.isRequired\r\n};\r\n\r\nWindowFrame.defaultProps = {\r\n\r\n};\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps) (WindowFrame);\r\n//커넥트 사용시 RND가 적용되지 않아서 커넥트 없이 리덕스 사용.\r\nexport default WindowFrame;","D:\\Project\\01.YK\\react\\src\\WebReq\\WebReq.js",[],"D:\\Project\\01.YK\\react\\src\\Method\\Store.js",[],"D:\\Project\\01.YK\\react\\src\\Method\\Component.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\Input.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Menu\\tabMenu\\TabList.js",["673"],"import React, { useState, useRef } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport TabListItem from './TabListItem';\r\nimport { gfc_sleep, gfc_set_oracle_column } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue } from '../../../Method/Store';\r\nimport { getDynamicSql_Oracle } from '../../../db/Oracle/Oracle';\r\n\r\nasync function onClick(flag, e){\r\n  if(e.target.parentNode.disabled) return;\r\n\r\n  // 1. Retrieve\r\n  // 2. Insert\r\n  // 3. Delete\r\n  // 4. Save\r\n  // 5. Init\r\n  // 6. Print\r\n  // 7. DtlInsert\r\n  // 8. DtlDelete\r\n  if(gfs_getStoreValue('WINDOWFRAME_REDUCER') === undefined) return;\r\n\r\n  // const pgm = store.getState().WINDOWFRAME_REDUCER.activeWindow['programId'];\r\n  // const window = store.getState().WINDOWFRAME_REDUCER.windowState.filter(e => e.programId === pgm)\r\n  const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER').activeWindow['programId'];\r\n  const window = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === pgm)\r\n\r\n  if(window.length === 0){\r\n    return;\r\n  }\r\n  \r\n  if(flag !== 1 && flag !== 5 && flag !== 3 && flag !== 7){\r\n    gfs_getStoreValue(pgm, 'Grid').map(e => \r\n      e.Grid.finishEditing()\r\n    );\r\n\r\n    await gfc_sleep(50);\r\n  }\r\n\r\n  if(flag === 1){\r\n    if(window[0].Retrieve !== undefined){\r\n      window[0].Retrieve();\r\n    }\r\n  }else if(flag === 2){\r\n    if(window[0].Insert !== undefined){\r\n      window[0].Insert();\r\n    }\r\n  }else if(flag === 3){\r\n    if(window[0].Delete !== undefined){\r\n      window[0].Delete();\r\n    }\r\n  }else if(flag === 4){\r\n    if(window[0].Save !== undefined){\r\n      window[0].Save();\r\n    }\r\n  }else if(flag === 5){\r\n    if(window[0].Init !== undefined){\r\n      window[0].Init();\r\n    }\r\n  }else if(flag === 6){\r\n    if(window[0].Print !== undefined){\r\n      window[0].Print();\r\n    }\r\n  }else if(flag === 7){\r\n    if(window[0].DtlInsert !== undefined){\r\n      window[0].DtlInsert();\r\n    }\r\n  }else{\r\n    if(window[0].DtlDelete !== undefined){\r\n      window[0].DtlDelete();\r\n    }\r\n  }\r\n}\r\n\r\nconst TabList = (props) => {\r\n  const insRef = useRef();\r\n  const dtlInsRef = useRef();\r\n  const dtlDelRef = useRef();\r\n  const savRef = useRef();\r\n  const delRef = useRef();\r\n  const retRef = useRef();\r\n\r\n  const windowState = useSelector((e) => {\r\n    if(e.WINDOWFRAME_REDUCER === undefined) {\r\n      return null\r\n    }else{\r\n      return e.WINDOWFRAME_REDUCER.windowState\r\n    }\r\n  }, (p, n) => {\r\n    return (p === null ? 0 : p.length) === (n === null ? 0 : n.length)\r\n  });\r\n\r\n  const activeWindow = useSelector((e) => {\r\n    if(e.WINDOWFRAME_REDUCER === undefined) {\r\n      return null\r\n    }else{\r\n      return e.WINDOWFRAME_REDUCER.activeWindow\r\n    }\r\n  }, (p, n) => {\r\n    return ((p === null || p === undefined) ? 0 : p.programId) === ((n === null || n === undefined) ? 0 : n.programId)\r\n  });\r\n\r\n  const authSelect = async(programId) => {\r\n    if(programId === undefined){\r\n      insRef.current.disabled = false;\r\n      dtlInsRef.current.disabled = false;\r\n      delRef.current.disabled = false;\r\n      dtlDelRef.current.disabled = false;\r\n      savRef.current.disabled = false;\r\n      retRef.current.disabled = false;\r\n\r\n      return;\r\n    }\r\n\r\n    let result = await getDynamicSql_Oracle(\r\n      'Common/Common',\r\n      'MENU_AUTH',\r\n      [{programId}]\r\n    ); \r\n\r\n    let data = gfc_set_oracle_column(result);\r\n    let auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n\r\n    if(auth.length !== undefined){\r\n      if(data[0].INSAUT_YN === 'Y'){\r\n        const eachAuth = auth.find(e => e.MENU_ID === programId);\r\n        if(eachAuth !== null){\r\n          if(eachAuth.INSAUT_YN === 'Y'){\r\n            insRef.current.disabled = false;\r\n            dtlInsRef.current.disabled = false;\r\n          }else{\r\n            insRef.current.disabled = true;\r\n            dtlInsRef.current.disabled = true;\r\n          }\r\n        }\r\n      }else{\r\n        insRef.current.disabled = true;\r\n        dtlInsRef.current.disabled = true;\r\n      }\r\n\r\n      if(data[0].DELAUT_YN === 'Y'){\r\n        const eachAuth = auth.find(e => e.MENU_ID === programId);\r\n        if(eachAuth !== null){\r\n          if(eachAuth.DELAUT_YN === 'Y'){\r\n            delRef.current.disabled = false;\r\n            dtlDelRef.current.disabled = false;\r\n          }else{\r\n            delRef.current.disabled = true;\r\n            dtlDelRef.current.disabled = true;\r\n          }\r\n        }\r\n      }else{\r\n        delRef.current.disabled = true;\r\n        dtlDelRef.current.disabled = true;\r\n      }\r\n\r\n      if(data[0].SAVAUT_YN === 'Y'){\r\n        const eachAuth = auth.find(e => e.MENU_ID === programId);\r\n        if(eachAuth !== null){\r\n          if(eachAuth.SAVAUT_YN === 'Y'){\r\n            savRef.current.disabled = false;\r\n          }else{\r\n            savRef.current.disabled = true;\r\n          }\r\n        }\r\n      }else{\r\n        savRef.current.disabled = true;\r\n      }\r\n\r\n      if(data[0].RETAUT_YN === 'Y'){\r\n        const eachAuth = auth.find(e => e.MENU_ID === programId);\r\n        if(eachAuth !== null){\r\n          if(eachAuth.RETAUT_YN === 'Y'){\r\n            retRef.current.disabled = false;\r\n          }else{\r\n            retRef.current.disabled = true;\r\n          }\r\n        }\r\n      }else{\r\n        retRef.current.disabled = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  if(activeWindow !== null){\r\n    authSelect(activeWindow.programId);\r\n  }\r\n\r\n  return (\r\n    <div className='content'>\r\n      <div className='header'>\r\n        <div className='tabs'>\r\n          <ul className='list'>\r\n            {windowState !== null &&\r\n              windowState.sort((a, b) => {\r\n                if (a.makeDttm.valueOf() >= b.makeDttm.valueOf()) {\r\n                  return 1;\r\n                }else{\r\n                  return -1;\r\n                }\r\n              }).map((e) => \r\n                <TabListItem key={e.programId}\r\n                             programId={e.programId}\r\n                             programNam={e.programNam}/>\r\n              )\r\n            }\r\n          </ul>\r\n        </div>\r\n        <div className='common_btns'>\r\n          <button ref={insRef}    type='button' className='save'  onClick={(e) => onClick(2, e)} ><span>추가</span></button>\r\n          <button ref={dtlInsRef} type='button' className='save'  onClick={(e) => onClick(7, e)} ><span>상세추가</span></button>\r\n          <button ref={dtlDelRef} type='button' className='save'  onClick={(e) => onClick(8, e)} ><span>상세삭제</span></button>\r\n          <button ref={savRef}    type='button' className='save' onClick={(e) => onClick(4, e)} ><span>저장</span></button>\r\n          <button ref={delRef}    type='button' className='del'   onClick={(e) => onClick(3, e)} ><span>삭제</span></button>\r\n          <button ref={retRef}    type='button' className='search' onClick={(e) => onClick(1, e)} ><span>조회</span></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TabList; ","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuMain.js",["674"],"import React, { useEffect, useState } from 'react';\r\nimport '../Menu.css';\r\nimport { useSelector } from 'react-redux';\r\nimport { gfs_dispatch, gfs_injectAsyncReducer } from '../../../Method/Store';\r\nimport { gfc_set_oracle_column } from '../../../Method/Comm';\r\nimport { getDynamicSql_Oracle } from '../../../db/Oracle/Oracle';\r\nimport Li from './SideBarMainView';\r\nimport Title from './SideBarMenuTitle';\r\nimport SideBarMainList from './SideBarMainList';\r\nimport SideBarUserName from './SideBarUserName';\r\n\r\n//#region 리듀서 생성\r\nconst sidebarmenuReducer = (nowState, action) => {\r\n\r\n  if(action.reducer !== 'SIDEBARMENU_REDUCER') {\r\n    return {\r\n      State: nowState === undefined ? {open: true, index: '', MENU_ID:'', nam: ''} : nowState.State\r\n    };\r\n  }\r\n\r\n  if(action.type === 'INIT'){\r\n    return Object.assign({}, nowState, {\r\n      State : {'open'   : action.open,\r\n               'index'  : action.index,\r\n               'MENU_ID': action.MENU_ID,\r\n               'nam'    : action.nam\r\n              }\r\n    })\r\n  }else if(action.type === 'MENUOPEN'){\r\n    const menuOpen = action.open === undefined ? (nowState.State.open ? false : true) : action.open;\r\n\r\n    return Object.assign({}, nowState, {\r\n      State : {'open'   : menuOpen,\r\n               'index'  : nowState.State.index,\r\n               'MENU_ID': nowState.State.MENU_ID,\r\n               'nam'    : nowState.State.nam\r\n              }\r\n    })\r\n  }else if(action.type === 'MENUCLICK'){\r\n    return Object.assign({}, nowState, {\r\n      State : {'open'   : nowState.State.open,\r\n               'index'  : action.index,\r\n               'MENU_ID': action.MENU_ID,\r\n               'nam'    : action.nam\r\n              }\r\n    })\r\n  }\r\n};\r\n//#endregion\r\ngfs_injectAsyncReducer('SIDEBARMENU_REDUCER', sidebarmenuReducer);\r\n\r\n//#region 이벤트\r\n\r\nconst onClick = (e) => {\r\n  gfs_dispatch('SIDEBARMENU_REDUCER', 'MENUOPEN');\r\n  e.target.blur();\r\n};\r\n\r\n//#endregion\r\n\r\nconst SideBarMenu = (props) => {\r\n  const [mainMenu, setMainMenu] = useState([]);\r\n  const [commMenu, setCommMenu] = useState([]);\r\n\r\n  const SideBarMenuState = useSelector((e) => e.SIDEBARMENU_REDUCER.State, (p, n) => {\r\n    return p.open === n.open;\r\n  });\r\n\r\n  const user_nam = useSelector((e) => {\r\n    if(e['USER_REDUCER'] === undefined){\r\n      return '';\r\n    }else{\r\n      return e['USER_REDUCER'].USER_NAM;\r\n    }\r\n  }, (p, n) => {\r\n    return p.USER_NAM === n.USER_NAM;\r\n  });\r\n\r\n  const menuOpen = SideBarMenuState.open;\r\n\r\n  const MENU_1 = async() => {\r\n    let result = await getDynamicSql_Oracle(\r\n      'Common/Common',\r\n      'MENU_1',\r\n      [{}]\r\n    ); \r\n\r\n    let menu = [];\r\n    let commMenu = [];\r\n    let data = gfc_set_oracle_column(result);\r\n\r\n    for(let i = 0; i < data.length; i++){\r\n      if(data[i].COMM_DTL_CD === 'COMM'){\r\n        commMenu.push(\r\n          <Li key={data[i].COMM_DTL_CD} MENU_ID={data[i].COMM_DTL_CD} index={data[i].SORT_SEQ} nam={data[i].COMM_DTL_NAM} />\r\n        )\r\n      }else{\r\n        menu.push(\r\n          <Li key={data[i].COMM_DTL_CD} MENU_ID={data[i].COMM_DTL_CD} index={data[i].SORT_SEQ - 1} nam={data[i].COMM_DTL_NAM} />\r\n        )\r\n      }\r\n    }\r\n\r\n    setMainMenu(menu);\r\n    setCommMenu(commMenu);\r\n  }\r\n\r\n  useEffect(() => {\r\n    MENU_1();\r\n  }, [])\r\n\r\n  return (\r\n    <div className={menuOpen? 'sidebarmenu open' : 'sidebarmenu'} id='moveOpen'>\r\n      <div className='left_menu'>\r\n        <div className='fixed_menu'>\r\n          <h1><img src={require('../../../Image/yk_08@2x.png').default} alt='로고'/></h1>\r\n          <button htmlFor='menuIcon' type='button' className='hmenu' onClick={(e) => onClick(e)}/>\r\n          <ul>\r\n            { mainMenu }\r\n            {/* <Li MENU_ID='INSP' index='1' nam='검수'></Li>\r\n            <Li MENU_ID='DISP' index='2' nam='출차'></Li>\r\n            <Li MENU_ID='ENTR' index='3' nam='입차'></Li>\r\n            <Li MENU_ID='CFRM' index='4' nam='확정'></Li> */}\r\n          </ul>\r\n          <div className='footer_menu'>\r\n            <SideBarUserName />\r\n            <ul>\r\n              {/* <Li MENU_ID='COMM' index='5' nam='설정'></Li> */}\r\n              { commMenu }\r\n            </ul>\r\n            {/* <div className='setting'><span onClick={e => {\r\n\r\n              gfs_PGM_REDUCER('CAMR_SETTING');\r\n              gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n              ({\r\n                windowZindex: 0,\r\n                activeWindow: {programId: 'CAMR_SETTING',\r\n                                programNam: '카메라정보'\r\n                              }\r\n              }));\r\n            }}>옵션</span></div> */}\r\n          </div>\r\n        </div>\r\n        <div className='move_menu'>\r\n          <Title />\r\n\r\n          <div className='search_box'>\r\n            <input type='text' placeholder='메뉴명을 입력하세요' />\r\n          </div>\r\n\r\n          <div className='sub_menu'>\r\n            <SideBarMainList />\r\n          </div>\r\n        </div>\r\n      </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default SideBarMenu;","D:\\Project\\01.YK\\react\\src\\db\\Mysql\\Mysql.js",[],"D:\\Project\\01.YK\\react\\src\\db\\Mysql\\MysqlServer.js",[],"D:\\Project\\01.YK\\react\\src\\JSON\\jsonControl.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Menu\\tabMenu\\TabListItem.js",[],"D:\\Project\\01.YK\\react\\src\\Method\\Comm.js",["675"],"import numeral from 'numeral';\r\nimport moment from 'moment';\r\nimport { gfs_dispatch } from '../Method/Store';\r\nimport html2canvas from 'html2canvas';\r\n// import html2canvas from 'html2canvas-render-offscreen'\r\nimport axios from 'axios';\r\nimport { getDynamicSql_Oracle, getSp_Oracle } from '../db/Oracle/Oracle';\r\n\r\nexport const gfc_now = async () => {\r\n  const result = await getDynamicSql_Oracle('Common/Common', 'SYSDATE', null);\r\n  return moment(result.data.rows[0][0]).format('yyyy-MM-DD HH:mm:ss');\r\n}\r\n\r\nexport const gfc_getMultiLang = (code, text) => {\r\n  // alert(code + '[' + text + ']');\r\n  console.log(code + '[' + text + ']');\r\n}\r\n\r\nexport const gfc_initPgm = (programId, programNam, init) => {\r\n\r\n  // 버전처리 로직 추가\r\n\r\n  gfs_dispatch('WINDOWFRAME_REDUCER', 'INITFUNCTION', \r\n    ({\r\n      activeWindow: {programId,\r\n                     programNam,\r\n                     Retrieve : init.Retrieve,\r\n                     Insert   : init.Insert,\r\n                     Delete   : init.Delete,\r\n                     Save     : init.Save,\r\n                     Init     : init.Init,\r\n                     DtlInsert: init.DtlInsert,\r\n                     DtlDelete: init.DtlDelete\r\n                    }\r\n    })\r\n  );\r\n}\r\n\r\nexport const gfc_oracleRetrieve = (result) => {\r\n  let data = [];\r\n  for(let i = 0; i < result.data.data.rows.length; i++){\r\n\r\n    let col = {};\r\n    for(let j = 0; j < result.data.data.rows[i].length; j++){\r\n      col[result.data.data.metaData[j].name] = result.data.data.rows[i][j];\r\n    }\r\n    data.push(col);\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nexport const gfc_yk_call_sp = async(sp, parameter) => {\r\n  let param = '';\r\n  if(parameter === undefined){\r\n    parameter = {};\r\n  }else{\r\n    for(let i = 0; i < Object.keys(parameter).length; i++){\r\n      param += `:${Object.keys(parameter)[i]},`;\r\n    }\r\n  }\r\n  \r\n  let SP = [];\r\n  SP.push({\r\n    sp   : `begin \r\n              ${sp}(\r\n                ${param}\r\n                :p_select,\r\n                :p_SUCCESS,\r\n                :p_MSG_CODE,\r\n                :p_MSG_TEXT,\r\n                :p_COL_NAM\r\n              );\r\n            end;\r\n            `,\r\n    data : parameter,\r\n    // data: {},\r\n    errSeq: 0\r\n  })\r\n\r\n  // const select = await getSp_Oracle(param);\r\n  const select = await getSp_Oracle(SP);\r\n  return select;\r\n}\r\n\r\nexport const gfc_getAtt = (code) => { \r\n  //추후 다국어 지원시 사용 xml or db 등등\r\n  let msg = '';\r\n  if(code === 'MSG01') msg = '조회된 건이 없습니다.';\r\n  else if(code === 'MSG02') msg = '해당건이 없습니다. 재조회 후 처리해주세요.';\r\n  else if(code === 'MSG03') msg = '중복값이 존재합니다.';\r\n  else if(code === 'MSG04') msg = '필수입력값이 없습니다.';\r\n  else if(code === 'MSG05') msg = '저장되었습니다.';\r\n  else if(code === 'MSG06') msg = '삭제되었습니다.';\r\n  else if(code === 'MSG07') msg = '데이터베이스처리중 에러가 발생했습니다.';\r\n  else msg = code;\r\n\r\n  return msg;\r\n}\r\n\r\n/**\r\n * \r\n * 사용할 함수는 async로 만들어야함\r\n * async function() {}\r\n * \r\n * await gfc_sleep(1000)\r\n */\r\nexport const gfc_sleep = (ms) => {\r\n  return new Promise(resolve=>setTimeout(resolve, ms));\r\n}\r\n\r\nexport const gfc_setNumberFormat = (value, format, round) => {\r\n  if(value !== null){\r\n    value = numeral(value)._value;\r\n    \r\n    if(round !== '' && round !== null){\r\n      const rndCode = round.substr(-1);\r\n      const length = round.substr(0, 1);\r\n      const digit = Math.pow(10, round.substr(0, 1));\r\n\r\n      value = gfc_unNumberFormat(value);\r\n      value = Number((value * digit).toFixed(6));\r\n\r\n      if(rndCode === 'R'){\r\n        value = Math.round(value) / digit;\r\n      }else if(rndCode === 'D'){\r\n        value = Math.floor(value) / digit;\r\n      }else if(rndCode === 'U'){\r\n        value = Math.ceil(value) / digit;\r\n      }\r\n\r\n      if(format !== '' && format !== null){\r\n        let setFormat = format;\r\n        if(length > 0){\r\n          if(!Number.isInteger(value)){\r\n            const decimal = value.toString().split('.')[1]\r\n\r\n            setFormat = setFormat + '.';\r\n  \r\n            for(let i = 0; i < length; i++){\r\n              setFormat = setFormat + '0';\r\n              if(decimal.length === i + 1) break;\r\n            }\r\n          }\r\n        }\r\n\r\n        value = numeral(value).format(setFormat);\r\n      }\r\n\r\n      return value;\r\n    }\r\n  }else{\r\n    return value;\r\n  }\r\n}\r\n\r\nexport const gfc_unNumberFormat = (value) => {\r\n  // console.log(numeral('1,000'));\r\n  // console.log(numeral('1 000'));\r\n  // console.log(numeral('1,000.001'));\r\n  // console.log(numeral('1 000.001'));\r\n  // console.log(numeral('1e000.001'));\r\n\r\n  // console.log(value.toString().split(',').join('') * 1);\r\n  // console.log(numeral(value));\r\n\r\n  // return value.toString().split(',').join('') * 1;\r\n  return numeral(value)._value;\r\n}\r\n\r\nexport const gfc_getParameter = (props, name) => {\r\n  name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\r\n  var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\r\n      results = regex.exec(props.location.search);\r\n  return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\r\n}\r\n\r\nexport const gfc_lpad = (str, padLen, padStr) => { \r\n  if (padStr.length > padLen) {\r\n      console.log(\"LENGTH ERROR\");\r\n      return str;\r\n  }\r\n  str += \"\"; // 문자로\r\n  padStr += \"\"; // 문자로\r\n  while (str.length < padLen)\r\n      str = padStr + str;\r\n  str = str.length >= padLen ? str.substring(0, padLen) : str;\r\n  return str;\r\n}\r\n\r\nexport const gfc_rpad = (str, padLen, padStr) => {\r\n  if (padStr.length > padLen) {\r\n    console.log(\"LENGTH ERROR\");\r\n      return str + \"\";\r\n  }\r\n  str += \"\"; // 문자로\r\n  padStr += \"\"; // 문자로\r\n  while (str.length < padLen)\r\n      str += padStr;\r\n  str = str.length >= padLen ? str.substring(0, padLen) : str;\r\n  return str;\r\n}\r\n\r\nexport const gfc_showMask = () => {\r\n  gfs_dispatch('MASK_REDUCER', 'MASK', \r\n    ({\r\n      MASK: true\r\n    })\r\n  );\r\n}\r\n\r\nexport const gfc_hideMask = () => {\r\n  gfs_dispatch('MASK_REDUCER', 'MASK', \r\n    ({\r\n      MASK: false\r\n    })\r\n  );\r\n}\r\n\r\nexport const gfc_addClass = (element, className) => {\r\n\telement.className += \" \" + className;\r\n\t\r\n}\r\n\r\nexport const gfc_removeClass = (element, className) => {\r\n\tvar check = new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\r\n\telement.className = element.className.replace(check, \" \").trim();\r\n}\r\n\r\nexport const gfc_hasClass = (element, className) => {\r\n\tif(element.className.indexOf(className) > -1){\r\n\t\treturn true;\r\n\t}else{\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nexport const gfc_screenshot = (element, filename) => {\r\n  html2canvas(element, {\r\n    scale: 3\r\n  }).then(canvas => {\r\n    const img = canvas.toDataURL('image/png');\r\n\r\n    var link = document.createElement('a');\r\n    if (typeof link.download === 'string') {\r\n      link.href = img;\r\n      link.download = filename;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    } else { \r\n      window.open(img);\r\n    }\r\n  });\r\n}\r\n\r\nexport const gfc_screenshot_srv_from_milestone = (device, scaleNo) => {\r\n\r\n  // const host = `http://211.231.136.182:3001/ScreenShot/Milestone`;\r\n  const host = 'http://ims.yksteel.co.kr:90/WebServer/ScreenShot/Milestone';\r\n  const option = {\r\n    url   : host,\r\n    method: 'POST',\r\n    // headers: {\r\n    //   'Access-Control-Allow-Origin': '*'\r\n    // },\r\n    data: {\r\n      device,\r\n      scaleNo\r\n    } \r\n  };\r\n\r\n  return axios(option)\r\n    .then(res => {\r\n      // console.log(res);\r\n      return res;\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n      return err;\r\n    })\r\n}\r\n\r\nexport const gfc_screenshot_srv = (element, filename, height, root) => {\r\n\r\n  return html2canvas(element, {\r\n    // width : 1000,\r\n    height: 1500\r\n  }).then(canvas => {\r\n    let img = canvas.toDataURL('image/png');\r\n\r\n    // const host = 'http://10.10.10.136:3001/ScreenShot';\r\n    const host = 'http://ims.yksteel.co.kr:90/WebServer/ScreenShot';\r\n    const option = {\r\n      url   : host,\r\n      method: 'POST',\r\n      // headers: {\r\n      //   'Access-Control-Allow-Origin': '*'\r\n      // },\r\n      data: {\r\n        img,\r\n        filename,\r\n        root,\r\n        height\r\n      } \r\n    };\r\n\r\n    return axios(option)\r\n      .then(res => {\r\n        // console.log(res);\r\n        return res;\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n        return err;\r\n      })\r\n  });\r\n}\r\n\r\nexport const gfc_chit_yn_YK_Tally = (scaleNumb) => {\r\n  // const host = 'http://10.10.10.136:3001/ScreenShot/YK_Chit_YN';\r\n  const host = 'http://ims.yksteel.co.kr:90/WebServer/ScreenShot/YK_Chit_YN_Tally';\r\n  // const host = `http://tally.yksteel.co.kr/Images/scaleChit/${scaleNumb.substring(0, 8)}/${scaleNumb}.jpg`;\r\n  \r\n  // console.log(host);\r\n\r\n  const option = {\r\n    url   : host,\r\n    method: 'GET',\r\n    headers: {\r\n      // 'Access-Control-Allow-Origin': '*',\r\n      // 'Content-Type': 'application/json',\r\n      // 'Accept': 'application/json'\r\n    },\r\n    data: {\r\n      scaleNumb\r\n    } \r\n  };\r\n\r\n  return axios(option)\r\n    .then(res => {\r\n      // console.log(res);\r\n      return res;\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n      return err;\r\n    })\r\n}\r\n\r\nexport const gfc_ftp_file_yn_YK = (scaleNumb) => {\r\n  const host = 'http://ims.yksteel.co.kr:90/WebServer/ScreenShot/Ftp_File_Yn';\r\n  \r\n  // console.log(host);\r\n\r\n  const option = {\r\n    url   : host,\r\n    method: 'POST',\r\n    // headers: {\r\n    //   'Access-Control-Allow-Origin': '*'\r\n    // },\r\n    data: {\r\n      scaleNumb\r\n    } \r\n  };\r\n\r\n  return axios(option)\r\n    .then(res => {\r\n      // console.log(res);\r\n      return res;\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n      return err;\r\n    })\r\n}\r\n\r\nexport const gfc_chit_yn_YK = (scaleNo) => {\r\n  // const host = 'http://10.10.10.136:3001/ScreenShot/YK_Chit_YN';\r\n  const host = 'http://ims.yksteel.co.kr:90/WebServer/ScreenShot/YK_Chit_YN';\r\n  // const host = `http://tally.yksteel.co.kr/Images/scaleChit/${scaleNo.substring(0, 8)}/${scaleNo}.jpg`;\r\n  \r\n  // console.log(host);\r\n\r\n  const option = {\r\n    url   : host,\r\n    method: 'GET',\r\n    // headers: {\r\n    //   'Access-Control-Allow-Origin': '*'\r\n    // },\r\n    data: {\r\n      scaleNo\r\n    } \r\n  };\r\n\r\n  return axios(option)\r\n    .then(res => {\r\n      // console.log(res);\r\n      return res;\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n      return err;\r\n    })\r\n}\r\n\r\nexport const gfc_screenshot_srv_YK = (element, filename) => {\r\n\r\n  return html2canvas(element, {\r\n    // width : 1000,\r\n    height: 1500,\r\n    scale: 3\r\n  }).then(canvas => {\r\n    let img = canvas.toDataURL('image/png');\r\n\r\n    // const host = 'http://10.10.10.136:3001/ScreenShot/YK_Chit';\r\n    const host = 'http://ims.yksteel.co.kr:90/WebServer/ScreenShot/YK_Chit';\r\n    const option = {\r\n      url   : host,\r\n      method: 'POST',\r\n      // headers: {\r\n      //   'Access-Control-Allow-Origin': '*'\r\n      // },\r\n      data: {\r\n        img,\r\n        filename\r\n      } \r\n    };\r\n\r\n    return axios(option)\r\n      .then(res => {\r\n        // console.log(res);\r\n        return res;\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n        return err;\r\n      })\r\n  });\r\n}\r\n\r\nexport const gfc_screenshot_del_yk = (filename) => {\r\n  // const host = 'http://10.10.10.136:3001/ScreenShot/YK_Chit_DEL';\r\n  const host = 'http://ims.yksteel.co.kr:90/WebServer/ScreenShot/YK_Chit_DEL';\r\n  const option = {\r\n    url   : host,\r\n    method: 'POST',\r\n    // headers: {\r\n    //   'Access-Control-Allow-Origin': '*'\r\n    // },\r\n    data: {\r\n      filename\r\n    } \r\n  };\r\n\r\n  return axios(option)\r\n    .then(res => {\r\n      // console.log(res);\r\n      return res;\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n      return err;\r\n    })\r\n}\r\n\r\nexport const gfc_test = (element, filename, root) => {    \r\n  const host = 'http://10.10.10.136:3001/ScreenShot/TEST';\r\n  const option = {\r\n    url   : host,\r\n    method: 'POST',\r\n    // headers: {\r\n    //   'Access-Control-Allow-Origin': '*'\r\n    // },\r\n    data: {\r\n\r\n    } \r\n  };\r\n\r\n  return axios(option)\r\n    .then(res => {\r\n      // console.log(res);\r\n      return res;\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n      return err;\r\n    })\r\n}\r\n\r\nexport const gfc_set_oracle_column = (result) => {\r\n  let data = [];\r\n\r\n  if(result.data === undefined) return data;\r\n  if(result.data === null) return data;\r\n  if(result.data.rows === undefined) return data;\r\n  if(result.data.rows === null) return data;\r\n\r\n  for(let i = 0; i < result.data.rows.length; i++){\r\n  \r\n    let col = {};\r\n    for(let j = 0; j < result.data.rows[i].length; j++){\r\n      col[result.data.metaData[j].name] = result.data.rows[i][j];\r\n    }\r\n    data.push(col);\r\n  }\r\n\r\n  return data;\r\n}","D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainView.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainList.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMenuTitle.js",[],"D:\\Project\\01.YK\\react\\src\\Method\\Grid.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\Combobox.js",["676"],"import React from 'react';\r\nimport Select from 'react-select';\r\nimport { gfs_dispatch } from '../../Method/Store';\r\nimport PropTypes from 'prop-types';\r\n// import { getDynamicSql_Mysql } from '../../db/Mysql/Mysql.js';\r\nimport { Component } from 'react';\r\nimport { gfo_getCombo } from '../../Method/Component';\r\nimport { gfc_getMultiLang } from '../../Method/Comm';\r\n\r\nclass Combobox extends Component{\r\n  originalValue = '';\r\n\r\n  state = {\r\n    value: '',\r\n    optionList: [],\r\n    data: this.props.data,\r\n    etcData: this.props.etcData,\r\n    oracleData: this.props.oracleData,\r\n    oracleSpData: this.props.oracleSpData,\r\n    isDisabled: this.props.isDisabled\r\n  }\r\n\r\n  width = 0\r\n\r\n  ComboCreate = async(props) => {\r\n    this.options = []\r\n    let result = {};\r\n\r\n    if(this.state.data !== undefined){\r\n      result.data = {};\r\n      result.data.result = true;\r\n      result.data.data = this.state.data;\r\n    }else if(this.state.etcData !== undefined){\r\n      result = await this.state.etcData;\r\n      if(Object.keys(result.data) !== 'result'){\r\n        result.data.result = true;\r\n        result.data.data = result.data[Object.keys(result.data)[0]];\r\n        delete result.data[Object.keys(result.data)[0]];\r\n      }\r\n    }else if(this.state.oracleData !== undefined){\r\n      result = await this.state.oracleData;\r\n      if(Object.keys(result.data) !== 'result'){\r\n        result.data.result = true;\r\n        let data = [];\r\n        for(let i = 0; i < result.data.rows.length; i++){\r\n    \r\n          let col = {};\r\n          for(let j = 0; j < result.data.rows[i].length; j++){\r\n            col[result.data.metaData[j].name.toUpperCase()] = result.data.rows[i][j];\r\n          }\r\n          data.push(col);\r\n        }\r\n\r\n        result.data.data = data;\r\n      }\r\n    }else if(this.state.oracleSpData !== undefined){\r\n      result = await this.state.oracleSpData;\r\n      if(result.data.SUCCESS === 'Y'){\r\n        result.data.result = true;\r\n        let data = [];\r\n        for(let i = 0; i < result.data.ROWS.length; i++){\r\n    \r\n          let col = {};\r\n          col = result.data.ROWS[i];\r\n          data.push(col);\r\n        }\r\n\r\n        result.data.data = data;\r\n      }\r\n    }else{\r\n      // result = await getDynamicSql_Mysql(\r\n      //   props.location,\r\n      //   props.fn,\r\n      //   [props.param]\r\n      // );\r\n    }\r\n\r\n    try{\r\n      if(result.data.result){\r\n        \r\n        for(let idx in result.data.data){\r\n          let canvas = document.createElement(\"canvas\");\r\n          let context = canvas.getContext(\"2d\");\r\n          context.font = props.fontSize + \"px bold\";\r\n          let metrics = context.measureText(result.data.data[idx][props.value.toUpperCase()]);\r\n\r\n          if(this.width < metrics.width + 10) {\r\n            if(props.fontSize >= 9)\r\n              this.width = Math.ceil(metrics.width) + 25\r\n            else\r\n              this.width = Math.ceil(metrics.width) + 20\r\n          };\r\n        }\r\n\r\n        for(let idx in result.data.data){\r\n          let arrValue = {};\r\n\r\n          const value = result.data.data[idx][props.value.toUpperCase()];\r\n          arrValue['value'] = value;\r\n\r\n          const text = result.data.data[idx][props.display.toUpperCase()];\r\n          // arrValue['labelText'] = setCode(value, maxCode) + text;\r\n          \r\n          arrValue['label'] = text;\r\n\r\n          for(let idx2 in props.field){\r\n            arrValue[props.field[idx2]] = result.data.data[idx][props.field[idx2]];\r\n          }\r\n\r\n          if(props.emptyRow){\r\n            if(idx === '0'){\r\n              this.options.push({'value': '', 'label': ''})\r\n            }\r\n          }\r\n\r\n          this.options.push(arrValue)\r\n        }\r\n\r\n        this.setState({\r\n          optionList: this.options\r\n        })\r\n      }\r\n    }catch{\r\n      let arrValue   = {};\r\n      arrValue['value'] = '';\r\n      // arrValue['labelText']  = '';\r\n      arrValue['label']  = '';\r\n      this.options.push(arrValue)\r\n    }\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n\r\n    if(gfo_getCombo(props.pgm, props.id) !== undefined){\r\n      gfc_getMultiLang('dup', '콤보 아이디 중복입니다. > ' + props.pgm + ', ' + props.id);\r\n      return \r\n    } \r\n  }\r\n\r\n  componentWillUnmount(){\r\n    gfs_dispatch(this.props.pgm, 'CLEARCOMBO', \r\n      ({\r\n        id: this.props.id\r\n      })\r\n    );\r\n  }\r\n\r\n  componentDidMount(){\r\n\r\n    this.ComboCreate(this.props);\r\n\r\n    gfs_dispatch(this.props.pgm, 'INITCOMBO', \r\n      ({\r\n        Combo  : {id   : this.props.id,\r\n                  Combo: this}\r\n      })\r\n    );\r\n  }\r\n\r\n  //#region 스타일  \r\n  dot = (text) => ({\r\n    display: 'flex',\r\n  \r\n    ':before': {\r\n      content: '\"' + text + '\"',\r\n      fontWeight:'bold',\r\n      width: this.width\r\n    },\r\n  });\r\n\r\n  customStyles = {\r\n    container: (base) => ({\r\n      ...base,\r\n      flex : 1,\r\n      width: this.props.width === undefined ? '100%' : this.props.width,\r\n      // width: '100%',\r\n      margin:0\r\n    }),\r\n  \r\n    control: (base) => ({\r\n      ...base,\r\n      margin:0,\r\n      height: this.props.height,\r\n      textAlign: this.align,\r\n      backgroundColor: this.state.isDisabled === true && '#FAFAFA',\r\n      borderColor:'#B5B5B5'\r\n    }),\r\n\r\n    valueContainer: (base) => ({\r\n      ...base,\r\n      padding:0,\r\n      margin: '0px 0px 0px 5px'\r\n      // zIndex: 100\r\n    }),\r\n\r\n    indicatorsContainer: (base) => ({\r\n      ...base,\r\n      padding: 0,\r\n      // display: isFoucs //'none', 'flex'\r\n    }),\r\n    \r\n    input: (base) => ({\r\n      ...base,\r\n      margin: '0px 0px 0px 3px'\r\n    }),\r\n    \r\n    menu: (base, e2) => ({\r\n      ...base,  \r\n      marginTop: 1,\r\n      // width: this.width,\r\n      width: '100%',\r\n      // width: this.width > this.props.width ? this.width : this.props.width, //지금 this.props.width를 구할수 없어 추후 수정\r\n      zIndex: 1000\r\n      // width: 400\r\n    }),\r\n\r\n    option: (base, state) => ({\r\n      ...base,\r\n      ...this.dot(state.data.value)\r\n    }),\r\n  \r\n    singleValue: (base) => ({\r\n      ...base,\r\n      margin: '0px 0px 0px 4px',\r\n      color: this.state.isDisabled === true && 'black',\r\n      // ...dot()\r\n    }),\r\n\r\n    placeholder: (base) => ({\r\n      ...base,\r\n      margin: '0px 0px 0px 4px',\r\n      // display: isFoucs //'none', 'flex'\r\n    })\r\n  }\r\n\r\n  onReset = async (e) => {\r\n    const Key = Object.keys(e);\r\n    const value = e[Key];\r\n    let values = {};\r\n\r\n    values[Key] = await value;\r\n    \r\n    this.setState(\r\n      values\r\n    )\r\n\r\n    await this.ComboCreate(this.props);\r\n  }\r\n\r\n  onFocusBase = (e) => {\r\n    if(this.props.onFocus !== undefined){\r\n      this.props.onFocus(this.ComboCreate);\r\n    }\r\n  }\r\n\r\n  onBlurBase = (e) => {\r\n    const value = this.ref.current.state.value;\r\n    if(value === null) return;\r\n    if(value === undefined) return;\r\n\r\n    const curValue = value.value;\r\n    this.props.onBlur(this.props.id, curValue, this.originalValue, this);\r\n    \r\n    if(curValue !== this.originalValue)\r\n      this.originalValue = curValue;\r\n  }\r\n\r\n  onChangeBase = (e) => {\r\n    if(this.props.onChange !== undefined){\r\n      this.props.onChange(e);\r\n    }\r\n  }\r\n\r\n  getValue = () => {\r\n    const value = this.ref.current.state.value;\r\n    if(value === null) return null;\r\n    if(value === undefined) return null;\r\n\r\n    return value.value;\r\n  }\r\n\r\n  getLabel = () => {\r\n    const label = this.ref.current.state.value;\r\n    if(label === null) return null;\r\n    if(label === undefined) return null;\r\n\r\n    return label.label;\r\n  }\r\n\r\n  setValue = (value) => {\r\n    if(value === null || value === undefined){\r\n      this.ref.current.select.setValue('');\r\n    }else{\r\n      this.ref.current.select.setValue(this.options.find(e => {\r\n        if(e.value !== undefined)\r\n          return e.value.toString() === value.toString()\r\n      }));\r\n    }\r\n  }\r\n\r\n  setFilter = (value) => {\r\n    console.log(value);\r\n  }\r\n\r\n  setDisabled = (value) => {\r\n    this.setState({\r\n      isDisabled: value\r\n    })\r\n  }\r\n  \r\n  render(){\r\n    this.ref = React.createRef();\r\n\r\n    return (\r\n      // <div style={{zIndex:1000}} className='item'>\r\n      <div className='item'>\r\n        {this.props.label !== '' && this.props.label !== undefined &&\r\n          <div style={{float:'left', marginRight:'3px'}}>\r\n            <label htmlFor={this.props.id}>{this.props.label}</label>\r\n          </div>\r\n        }\r\n  \r\n        <Select options      = {this.state.optionList}\r\n                styles       = {this.customStyles}\r\n                placeholder  = {this.props.placeholder}\r\n                menuPlacement= 'auto'\r\n                ref          = {this.ref}\r\n                isDisabled   = {this.state.isDisabled}\r\n                // isOptionDisabled={(option) => option.disabled}\r\n                onBlur       = {e => this.onBlurBase(e)}\r\n                onFocus      = {e => this.onFocusBase(e)}\r\n                onChange     = {e => this.onChangeBase(e)}\r\n                \r\n                // menuIsOpen\r\n                  \r\n                  // inputId={this.props.id}\r\n                  // filterOption={null}\r\n  \r\n                \r\n                  // // defaultValue={option[1]} //이건 이방법뿐인듯 따로 기능구현\r\n                  // onFocus={(e) => onFocusBase(e)}\r\n                  // onBlur={(e) => onBlurBase(e)}\r\n                \r\n                  // onInputChange={(value, action) => onInputChangeBase(value, action)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCombobox.propTypes = {\r\n  pgm         : PropTypes.string.isRequired,\r\n  id          : PropTypes.string.isRequired,\r\n  value       : PropTypes.string.isRequired,\r\n  display     : PropTypes.string.isRequired,\r\n  // location    : PropTypes.string.isRequired,\r\n  // fn          : PropTypes.string.isRequired,\r\n  // field       : PropTypes.array.isRequired,\r\n\r\n  width       : PropTypes.number,\r\n  height      : PropTypes.number,\r\n  fontSize    : PropTypes.number,\r\n  label       : PropTypes.string,\r\n  menuIsOpen  : PropTypes.bool,\r\n  isDisabled  : PropTypes.bool,\r\n  isRtl       : PropTypes.bool,\r\n  isSearchable: PropTypes.bool,\r\n  isMulti     : PropTypes.bool,\r\n  blurInputOnSelect: PropTypes.bool,\r\n  closeMenuOnSelect: PropTypes.bool,\r\n  placeholder : PropTypes.string,\r\n\r\n  onChange    : PropTypes.func,\r\n  onMenuOpen  : PropTypes.func,\r\n  onMenuClose : PropTypes.func,\r\n  onFocus     : PropTypes.func,\r\n  onBlur      : PropTypes.func\r\n};\r\n\r\nCombobox.defaultProps = {\r\n  // width       : 150,\r\n  height      : 23,\r\n  fontSize    : 14,\r\n  label       : '',\r\n  menuIsOpen  : false,\r\n  isDisabled  : false,\r\n  isRtl       : false,\r\n  isSearchable: true,\r\n  isMulti     : false,\r\n  blurInputOnSelect: false,\r\n  closeMenuOnSelect: false,\r\n  placeholder : '',\r\n\r\n  onChange    : (e) => {},\r\n  onMenuOpen  : () => {},\r\n  onMenuClose : () => {},\r\n  onFocus     : (e) => {},\r\n  onBlur      : (e) => {}\r\n};\r\n\r\nexport default Combobox;","D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Image.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Input.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Combobox.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Grid.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\TextArea.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\DetailDiv.js",[],["677","678"],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\SearchDiv.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\DateTime.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Number.js",[],"D:\\Project\\01.YK\\react\\src\\Method\\Popup.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\DateTime.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\Number.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetail.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Layout\\Layout.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarMainListDetailComponent.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Popup\\PopupFrame.js",["679"],"D:\\Project\\01.YK\\react\\src\\Program\\POPUP\\PopupTest.js",["680"],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\TextArea.js",[],"D:\\Project\\01.YK\\react\\src\\db\\Oracle\\Oracle.js",[],"D:\\Project\\01.YK\\react\\src\\db\\Oracle\\OracleServer.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Grid\\Column\\Checkbox.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Detailspan.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Mainspan.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Botspan.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\TabList.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\CAMR_SETTING\\CAMR_SETTING.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\Chit.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\ChitMemo.js",["681"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport TextArea from '../../../../Component/Control/TextArea';\r\nimport { gfs_dispatch } from '../../../../Method/Store';\r\nimport { gfo_getTextarea } from '../../../../Method/Component';\r\n\r\nfunction ChitMemo(props) {\r\n  const [focus, setFocus] = useState(false);\r\n  const textAreaRef = useRef();\r\n  const canvasRef = useRef();\r\n  \r\n  const value = useSelector((e) => {\r\n    return e[props.reducer].DETAIL_SCALE;\r\n  }, (p, n) => {\r\n    return p === n;\r\n  });\r\n\r\n  useEffect(e => {\r\n    // if(props.reducer !== 'INSP_PROC_MAIN') return;\r\n\r\n    // if(value.chit === 'N'){\r\n      gfo_getTextarea(props.pgm, 'chit_memo').setValue('');\r\n      let ctx = canvasRef.current.getContext(\"2d\");\r\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n      ctx.beginPath();\r\n    // }\r\n  }, [props.pgm, value])\r\n\r\n  const changeMemo = (e) => {\r\n    gfs_dispatch(props.reducer, 'CHIT_MEMO', {CHIT_MEMO: e.target.value});\r\n    drawTextBox(e.target.value, 4, 10, 305, 1.3)\r\n  }\r\n\r\n  const limitLine = (e) => {\r\n    const maxRows = textAreaRef.current.props.rows;\r\n    const spaces = textAreaRef.current.props.cols;\r\n    let lines = e.target.value.split('\\n');\r\n    for (var i = 0; i < lines.length; i++) \r\n    {\r\n      if (lines[i].length <= spaces) continue;\r\n\r\n      var j = 0;\r\n\r\n      var space = spaces;\r\n\r\n      while (j++ <= spaces) \r\n      {\r\n        if (lines[i].charAt(j) === \" \") space = j;  \r\n      }\r\n      \r\n      lines[i + 1] = lines[i].substring(space + 1) + (lines[i + 1] || \"\");\r\n      lines[i] = lines[i].substring(0, space);\r\n    }\r\n\r\n    if(lines.length > maxRows){\r\n      e.target.style.color = 'black';\r\n      setTimeout(function(){\r\n        e.target.style.color = 'red';\r\n      },200);\r\n    }    \r\n\r\n    e.target.value = lines.slice(0, maxRows).join(\"\\n\");\r\n    drawTextBox(e.target.value, 4, 10, 295, 1.2)\r\n  }\r\n  \r\n  function drawTextBox(text, x, y, fieldWidth, spacing) {\r\n    let ctx = canvasRef.current.getContext(\"2d\");\r\n    ctx.fillStyle = \"red\";  //<======= here\r\n    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n    ctx.beginPath();\r\n    ctx.font = '17px sans serif';\r\n    var line = \"\";\r\n    var currentY = y;\r\n    ctx.textBaseline = \"top\";\r\n    for(var i=0; i<text.length; i++) {\r\n      var tempLine = line + text[i];\r\n      var tempWidth = ctx.measureText(tempLine).width;\r\n   \r\n      if (tempWidth < fieldWidth && text[i] !== '\\n') {\r\n        line = tempLine;\r\n      }\r\n      else {\r\n        ctx.fillText(line, x, currentY);\r\n        if(text[i] !== '\\n') line = text[i];\r\n        else line = \"\";\r\n        currentY += 17 * spacing;\r\n      }\r\n    }\r\n    ctx.fillText(line, x, currentY);\r\n    // ctx.rect(x, y, fieldWidth, currentY-y+fontSize*spacing);\r\n    ctx.stroke();\r\n  }\r\n\r\n  return (\r\n    <>\r\n        <TextArea \r\n          ref={textAreaRef}\r\n          pgm={props.pgm} \r\n          id={props.id} \r\n          style={{display: focus === true ? 'block' : 'none', color:'red', fontSize:'18px'}}\r\n          rows={5} \r\n          cols={30}\r\n          wrap='soft' \r\n          defaultValue='' \r\n          onChange={e => changeMemo(e)} \r\n          // onKeyUp={e => limitLine(e)}\r\n          onBlur={e => {\r\n            setFocus(false)\r\n          }}\r\n        >\r\n        </TextArea> \r\n        <canvas \r\n          ref={canvasRef}\r\n          style={{width:'100%', height: '156px', display: focus === true ? 'none' : 'block'}}\r\n          onClick={e => setFocus(true)}>\r\n        </canvas> \r\n    </>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default ChitMemo;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\DISP_PROC\\CompleteBtn.js",["682"],"import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { gfs_getStoreValue, gfs_dispatch } from '../../../Method/Store';\r\nimport { gfc_showMask, gfc_hideMask, gfc_screenshot_srv_YK, gfc_ftp_file_yn_YK, gfc_sleep, gfc_screenshot_del_yk } from '../../../Method/Comm';\r\nimport { gfo_getCombo, gfo_getCheckbox, gfo_getInput } from '../../../Method/Component';\r\n\r\nimport { YK_WEB_REQ } from '../../../WebReq/WebReq';\r\nimport { getDynamicSql_Mysql } from '../../../db/Mysql/Mysql';\r\nimport { getDynamicSql_Oracle, getSp_Oracle_YK } from '../../../db/Oracle/Oracle';\r\n\r\nconst CompleteBtn = (props) => {\r\n  const value = useSelector((e) => {\r\n    return e.DISP_PROC_MAIN.CHIT_INFO;\r\n  }, (p, n) => {\r\n    return p.chit === n.chit;\r\n  });\r\n\r\n  //#region 계량표 재등록\r\n  const onChitProcess = async() => {\r\n    const scaleNumb = gfs_getStoreValue('DISP_PROC_MAIN', 'DETAIL_SCALE');\r\n\r\n    if(scaleNumb === ''){\r\n      alert('선택된 배차정보가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    //계량증명서 정보여부\r\n    const chitInfoYn = await YK_WEB_REQ(`tally_chit.jsp?scaleNumb=${scaleNumb}`);\r\n    if(!chitInfoYn.data.dataSend){\r\n      alert('계량증명서 정보가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    if(value.chit !== false){\r\n      if(window.confirm('계량표를 초기화 하시겠습니까?') === false){\r\n        return;\r\n      }\r\n\r\n      const result = await gfc_screenshot_del_yk(scaleNumb);\r\n      if(result.data.substring(0, 12) !== 'Successfully'){\r\n        alert('계량표 삭제에 실패했습니다.');\r\n      }else{\r\n        const itemFlag = gfs_getStoreValue('DISP_PROC_MAIN', 'CHIT_INFO').itemFlag;\r\n        gfs_dispatch('DISP_PROC_MAIN', 'CHIT_INFO', {\r\n          date     : chitInfoYn.data.dataSend[0].date,\r\n          scaleNumb: chitInfoYn.data.dataSend[0].scaleNumb,\r\n          carNumb  : chitInfoYn.data.dataSend[0].carNumb,\r\n          vender   : chitInfoYn.data.dataSend[0].vendor,\r\n          itemFlag : itemFlag,\r\n          Wgt      : chitInfoYn.data.dataSend[0].totalWgt,\r\n          loc      : chitInfoYn.data.dataSend[0].area,\r\n          user     : gfs_getStoreValue('USER_REDUCER', 'USER_NAM'),\r\n          chit     : false\r\n        });\r\n      }\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region 검수등록\r\n  const onProcess = async() => {\r\n    const scaleNumb = gfs_getStoreValue('DISP_PROC_MAIN', 'DETAIL_SCALE');\r\n\r\n    if(scaleNumb === ''){\r\n      alert('선택된 배차정보가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    gfc_showMask();\r\n\r\n    //#region 필수입력확인 및 변수세팅\r\n    const detail_grade1 = gfo_getCombo(props.pgm, 'detail_grade1'); //고철등급\r\n    if(detail_grade1.getValue() === null || detail_grade1.getValue() === '' || detail_grade1.getValue() === undefined){\r\n      alert('필수입력값이 없습니다. > 고철등급');\r\n      const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n      chitBtn.click(0);\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_grade2 = gfo_getCombo(props.pgm, 'detail_grade2'); //상세고철등급\r\n    if(detail_grade2.getValue() === null || detail_grade2.getValue() === '' || detail_grade2.getValue() === undefined){\r\n      alert('필수입력값이 없습니다. > 등급세부코드');\r\n      const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n      chitBtn.click(0);\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_subt = gfo_getCombo(props.pgm, 'detail_subt'); //감량중량\r\n    const detail_subt_leg = gfo_getCombo(props.pgm, 'detail_subt_leg'); //감량사유\r\n    if(detail_subt.getValue() !== null &&  detail_subt.getValue() !== '' &&  detail_subt.getValue() !== '0' &&  detail_subt.getValue() !== undefined){\r\n      if(detail_subt_leg.getValue() === null || detail_subt_leg.getValue() === '' || detail_subt_leg.getValue() === undefined){\r\n        alert('필수입력값이 없습니다. > 감량사유');\r\n        const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n        chitBtn.click(0);\r\n  \r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const detail_depr = gfo_getCombo(props.pgm, 'detail_depr'); //감가내역\r\n    const detail_depr2 = gfo_getCombo(props.pgm, 'detail_depr2'); //감가비율\r\n    if(detail_depr.getValue() !== null &&  detail_depr.getValue() !== '' &&  detail_depr.getValue() !== undefined){\r\n      if(detail_depr2.getValue() === null || detail_depr2.getValue() === '' || detail_depr2.getValue() === undefined){\r\n        alert('필수입력값이 없습니다. > 감가비율');\r\n        const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n        chitBtn.click(0);\r\n  \r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const detail_out = gfo_getCombo(props.pgm, 'detail_out'); //하차구역\r\n    if(detail_out.getValue() ===  null || detail_out.getValue() === '' || detail_out.getValue() === undefined){\r\n      alert('필수입력값이 없습니다. > 하차구역');\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_car = gfo_getCombo(props.pgm, 'detail_car'); //차종구분\r\n    if(detail_car.getValue() === null || detail_car.getValue() === '' || detail_car.getValue() === undefined){\r\n      alert('필수입력값이 없습니다. > 차종구분');\r\n      const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n      chitBtn.click(0);\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_rtn = gfo_getCombo(props.pgm, 'detail_rtn'); //반품구분\r\n    const detail_rtn2 = gfo_getCombo(props.pgm, 'detail_rtn2'); //반품구분사유\r\n    if(detail_rtn.getValue() !== null && detail_rtn.getValue() !== '' && detail_rtn.getValue() !== undefined){\r\n      if(detail_rtn2.getValue() === null || detail_rtn2.getValue() === '' || detail_rtn2.getValue() === undefined){\r\n        alert('필수입력값이 없습니다. > 반품구분사유');\r\n        const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n        chitBtn.click(0);\r\n  \r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const detail_warning = gfo_getCheckbox(props.pgm, 'detail_warning'); //경고\r\n    const detail_rain = gfo_getInput(props.pgm, 'detail_rain');\r\n    \r\n    //#endregion\r\n    \r\n    //#region 계량표저장\r\n    const chitYn = await gfc_ftp_file_yn_YK(scaleNumb);\r\n    const memo = gfs_getStoreValue('DISP_PROC_MAIN', 'CHIT_MEMO').trim();\r\n    if(chitYn.data === false){\r\n\r\n      if(memo.length === 0){\r\n        // if(window.confirm('계량표의 내용이 없습니다. 저장하시겠습니까?') === false){\r\n        //   gfc_hideMask();\r\n        //   return;\r\n        // }\r\n        document.getElementById(`tab2_${props.pgm}`).click(2);\r\n        await gfc_sleep(100);\r\n        alert('계량표의 내용이 없습니다.');\r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n\r\n      document.getElementById(`tab2_${props.pgm}`).click(2);\r\n      await gfc_sleep(100);\r\n\r\n      const img = document.getElementById(`content2_${props.pgm}`);\r\n      const result = await gfc_screenshot_srv_YK(img, scaleNumb);\r\n\r\n      console.log(result);\r\n      \r\n      if(result.data.substring(0, 8) === 'Uploaded'){\r\n        gfs_dispatch('DISP_PROC_MAIN', 'CHIT_INFO', {\r\n          scaleNumb,\r\n          chit     : 'Y'\r\n        });\r\n      }else{\r\n        alert('계량표 저장에 실패 했습니다.');\r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }else{\r\n      // 기존에 등록되 계량표와 다른곳에서 등록된 계량표의 차이를 알수없어 무조건 새로 만든다.\r\n      // if(memo.length > 0){\r\n      //   alert('저장된 계량표가있습니다. 다시 조회 후 확인바랍니다.');\r\n      //   gfc_hideMask();\r\n      //   return;\r\n      // }\r\n    }\r\n\r\n    // const msg = `dScaleNumb=${scaleNumb}&` + //검수번호(계근번호)\r\n    //             `dWorker=${gfs_getStoreValue('USER_REDUCER', 'USER_ID')}&` + //검수자(ERP ID)\r\n    //             `dWorkerName=${gfs_getStoreValue('USER_REDUCER', 'USER_NAM')}&` + //검수자 이름\r\n    //             `dOutageReasonCode=${detail_subt_leg.getValue() === null ? '' : detail_subt_leg.getValue()}&` + //감량사유\r\n    //             `dOutageWeightCode=${detail_subt.getValue() === null ? '' : detail_subt.getValue()}&` + //감량중량\r\n    //             `dScrapGradeCode=${detail_grade1.getValue()}&` + //등급코드\r\n    //             `dScrapGradeItemCode=${detail_grade2.getValue()}&` + //등급아이템\r\n    //             `dTallyHistoryCode=${detail_depr.getValue() === null ? '' : detail_depr.getValue()}&` + //감가내역\r\n                \r\n    //             `dTallyRatio=${detail_depr2.getValue()}&` + //감가비율???\r\n                \r\n    //             // `dScrapAreaCode=${detail_out.getValue()}&` + //하차구역(섹터), 옥내는E001고정\r\n    //             `dScrapAreaCode=E001&` + //하차구역(섹터), 옥내는E001고정\r\n    //             `dReturnDivisionCode=${detail_rtn.getValue() === null ? '' : detail_rtn.getValue()}&` + //반품구분\r\n    //             `dReturnHistoryCode=${detail_rtn2.getValue() === null ? '' : detail_rtn2.getValue()}&` + //반품구분사유\r\n                \r\n    //             `dOutageReasonEtcEdit=&` + //기타의견???\r\n\r\n    //             `dCarTypeCode=${detail_car.getValue()}&` +\r\n    //             `dWarning=${detail_warning.getValue() === true ? 'Y' : 'N'}&` +\r\n    //             `dRain=0`;\r\n\r\n    // const Data = await YK_WEB_REQ(`tally_process_erp_procedure.jsp?${msg}`);\r\n    // console.log(Data);\r\n\r\n    \r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                apps.EMM_INSPECT_MOBILE(\r\n                  :p_delivery_id,\r\n                  :p_sector_code,\r\n                  :p_reduce_code,\r\n                  :p_reduce_wgt,\r\n                  :p_return_gubun,\r\n                  :p_return_code,\r\n                  :p_file_yn,\r\n                  :p_iron_grade,\r\n                  :p_iron_grade_item,\r\n                  :p_discount_code,\r\n                  :p_erp_id,\r\n                  :p_erp_worker,\r\n                  :p_discount_rate,\r\n                  :p_cartype,\r\n                  :p_warning,\r\n                  :p_rain,\r\n                  :p_out\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_delivery_id     : scaleNumb,\r\n        p_sector_code     : detail_out.getValue(),\r\n        p_reduce_code     : (detail_subt_leg.getValue() === null || detail_subt_leg.getValue() === undefined) ? '' : detail_subt_leg.getValue(),\r\n        p_reduce_wgt      : (detail_subt.getValue() === null || detail_subt.getValue() === undefined) ? '' : detail_subt.getValue(),\r\n        p_return_gubun    : (detail_rtn.getValue() === null || detail_rtn.getValue() === undefined) ? '' : detail_rtn.getValue(),\r\n        p_return_code     : (detail_rtn2.getValue() === null || detail_rtn2.getValue() === undefined) ? '' : detail_rtn2.getValue(),\r\n        p_file_yn         : '',\r\n        p_iron_grade      : detail_grade1.getValue(),\r\n        p_iron_grade_item : detail_grade2.getValue(),\r\n        p_discount_code   : (detail_depr.getValue() === null || detail_depr.getValue() === undefined)? '' : detail_depr.getValue(),\r\n        p_erp_id          : gfs_getStoreValue('USER_REDUCER', 'ERP_ID'),\r\n        p_erp_worker      : gfs_getStoreValue('USER_REDUCER', 'USER_NAM'),\r\n        p_discount_rate   : (detail_depr2.getValue() === null || detail_depr2.getValue() === undefined) ? '' : detail_depr2.getValue(),\r\n        p_cartype         : detail_car.getValue(),\r\n        p_warning         : detail_warning.getValue() === true ? 'Y' : 'N',\r\n        p_rain            : (detail_rain.getValue() === null || detail_rain.getValue() === undefined) ? 0 : detail_rain.getValue(),\r\n      },\r\n      errSeq: 0\r\n    })\r\n\r\n    let result = await getSp_Oracle_YK(\r\n      param\r\n    ); \r\n\r\n    if(result.data.result !== 'OK'){\r\n      alert('검수수정중 오류가 발생했습니다. > ' + result.data.result);\r\n      gfc_hideMask();\r\n    }else{\r\n      getDynamicSql_Mysql(scaleNumb, (detail_subt.getValue() === null || detail_subt.getValue() === undefined || detail_subt.getValue() === '') ? 0 : detail_subt.getValue()).then(e => {\r\n        console.log(e)\r\n        \r\n        const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === 'INSP_PROC');\r\n        pgm[0].Retrieve();\r\n    \r\n        gfc_hideMask();\r\n      });\r\n      // if(detail_subt.getValue() === null || detail_subt.getValue() === undefined || detail_subt.getValue() === ''){\r\n        \r\n      //   const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === 'INSP_PROC');\r\n      //   pgm[0].Retrieve();\r\n      //   alert('저장되었습니다.');\r\n      //   gfc_hideMask();\r\n      // }else{   \r\n      //   getDynamicSql_Mysql(scaleNumb, (detail_subt.getValue() === null || detail_subt.getValue() === undefined || detail_subt.getValue() === '') ? 0 : detail_subt.getValue()).then(e => {\r\n      //     console.log(e)\r\n          \r\n      //     const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === 'INSP_PROC');\r\n      //     pgm[0].Retrieve();\r\n      \r\n      //     gfc_hideMask();\r\n      //   });\r\n      //   // getDynamicSql_Mysql(scaleNumb, detail_subt.getValue() === null ? '' : detail_subt.getValue()).then(e => {\r\n      //   //   console.log(e)\r\n\r\n      //   //   const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === 'INSP_PROC');\r\n      //   //   pgm[0].Retrieve();\r\n      //   //   alert('저장되었습니다.');\r\n      \r\n      //   //   gfc_hideMask();\r\n      //   // });\r\n      // }\r\n    }\r\n\r\n\r\n    // getDynamicSql_Oracle(\r\n    //   'Common/Common',\r\n    //   'EMM_INSPECT_MOBILEY',\r\n    //   [{strScaleNumb          : scaleNumb,\r\n    //     strErpId              : gfs_getStoreValue('USER_REDUCER', 'ERP_ID'),\r\n    //     strWorker             : gfs_getStoreValue('USER_REDUCER', 'USER_NAM'),\r\n    //     strOutageReasonCode   : detail_subt_leg.getValue() === null ? '' : detail_subt_leg.getValue(),\r\n    //     strOutageWeightCode   : detail_subt.getValue() === null ? '' : detail_subt.getValue(),\r\n    //     strScrapGradeCode     : detail_grade1.getValue(),\r\n    //     strScrapGradeItemCode : detail_grade2.getValue(),\r\n    //     strTallyHistoryCode   : detail_depr.getValue() === null ? '' : detail_depr.getValue(),\r\n    //     strTallyRatio         : detail_depr2.getValue() === null ? '' : detail_depr2.getValue(),\r\n    //     strScrapAreaCode      : detail_out.getValue(),\r\n    //     strReturnDivisionCode : detail_rtn.getValue() === null ? '' : detail_rtn.getValue(),\r\n    //     strReturnHistoryCode  : detail_rtn2.getValue() === null ? '' : detail_rtn2.getValue(),\r\n    //     strOutageReasonEtcEdit: '',\r\n    //     strCarType            : detail_car.getValue(),\r\n    //     strWarning            : detail_warning.getValue() === true ? 'Y' : 'N',\r\n    //     strRain               : '0'\r\n    //   }]\r\n    // ).then(e => {\r\n    //   console.log(e);\r\n      \r\n    //   getDynamicSql_Mysql(scaleNumb, detail_subt.getValue() === null ? '' : detail_subt.getValue()).then(e => {\r\n    //     console.log(e)\r\n        \r\n    //     const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === 'DISP_PROC');\r\n    //     pgm[0].Retrieve();\r\n    \r\n    //     gfc_hideMask();\r\n    //   });\r\n\r\n    // })\r\n\r\n    //#endregion\r\n\r\n    // alert('저장되었습니다.');\r\n\r\n    // const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === 'DISP_PROC');\r\n    // pgm[0].Retrieve();\r\n    \r\n    // gfc_hideMask();\r\n  }\r\n  //#endregion\r\n\r\n  //#region 계량표저장\r\n  // const onScaleChit = async() => {\r\n  //   const img = document.getElementById(`content2_${props.pgm}`);\r\n  //   const scaleNumb = gfs_getStoreValue('DISP_PROC_MAIN', 'CHIT_INFO');\r\n\r\n  //   if(scaleNumb.scaleNumb === ''){\r\n  //     alert('선택된 배차정보가 없습니다.');\r\n  //     return;\r\n  //   }\r\n\r\n  //   gfc_showMask();\r\n\r\n  //   const memo = gfs_getStoreValue('DISP_PROC_MAIN', 'CHIT_MEMO').trim();\r\n  //   if(memo.length === 0){\r\n  //     if(window.confirm('계량표의 내용이 없습니다. 저장하시겠습니까?') === false){\r\n  //       gfc_hideMask();\r\n  //       return;\r\n  //     }\r\n  //   }\r\n\r\n  //   //다른쪽에서 저장된 계량표가 있는지 한번더 확인한다.\r\n  //   const chitYn = await gfc_chit_yn_YK(scaleNumb.scaleNumb);\r\n  //   if(chitYn.data !== 'N'){\r\n  //     alert('이미처리된 계량표 입니다. 재조회 후 확인바랍니다.');\r\n  //     gfc_hideMask();\r\n  //     return;\r\n  //   }\r\n\r\n  //   const result = await gfc_screenshot_srv_YK(img, scaleNumb.scaleNumb);\r\n    \r\n  //   if(result.data === 'Y'){\r\n  //     const chitYn = await gfc_chit_yn_YK(scaleNumb.scaleNumb);\r\n  //     gfs_dispatch('DISP_PROC_MAIN', 'CHIT_INFO', {\r\n  //       chit     : chitYn.data\r\n  //     });\r\n  //   }else{\r\n  //     alert('계량표 저장에 실패 했습니다.')\r\n  //   }\r\n    \r\n  //   gfc_hideMask();\r\n  // }\r\n  //#endregion\r\n\r\n  return (\r\n    <div className='complete_btn'>\r\n      <button type='button' id={`btn1_${props.pgm}`} onClick={e => onProcess()} className='on'><span>수정완료</span></button>\r\n      <button type='button' id={`btn2_${props.pgm}`} onClick={e => {value.chit !== false ? onChitProcess() : onProcess()} }><span>{value.chit !== false ? '계량표삭제' : '수정완료'}</span></button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompleteBtn;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\DISP_PROC\\TabList.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\ENTR_PROC\\ENTR_PROC.js",["683","684","685","686"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_sleep, gfc_yk_call_sp } from '../../../Method/Comm';\r\nimport { gfs_injectAsyncReducer, gfs_dispatch, gfs_getStoreValue } from '../../../Method/Store';\r\nimport { gfg_getGrid, gfg_setSelectRow, gfg_appendRow } from '../../../Method/Grid';\r\nimport { gfo_getCombo, gfo_getInput } from '../../../Method/Component';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Combobox as columnCombobox }  from '../../../Component/Grid/Column/Combobox';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\nimport Botspan from '../Common/Botspan';\r\n\r\n//#endregion\r\n\r\nclass ENTR_PROC extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const ENTR_PROC_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'ENTR_PROC_MAIN') {\r\n        return {\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n        };\r\n      }\r\n\r\n      if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('ENTR_PROC_MAIN', ENTR_PROC_MAIN);\r\n    //#endregion\r\n  }\r\n\r\n  Retrieve = async () => {\r\n\r\n    gfc_showMask();\r\n    gfs_dispatch('ENTR_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n\r\n    const mainData = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE');\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    grid.clear();\r\n\r\n    if(mainData.data.SUCCESS === 'Y'){\r\n      const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n      const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n\r\n      const main = mainData.data.ROWS;\r\n  \r\n      const data = main.filter(e => {\r\n        if(search_tp !== null && search_tp !== ''){\r\n          //계근번호\r\n          if(search_tp === '1'){\r\n            if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          //차량번호\r\n          else if(search_tp === '2'){\r\n            if(e.carNumb.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          //사전등급\r\n          else if(search_tp === '3'){\r\n            if(e.itemGrade.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          //업체\r\n          else if(search_tp === '4'){\r\n            if(e.vendor.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          \r\n        }else{\r\n          return true;\r\n        }\r\n      })\r\n  \r\n      if(data.length > 0){\r\n  \r\n        grid.resetData(data);\r\n        gfs_dispatch('ENTR_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n        \r\n        await gfc_sleep(100);\r\n  \r\n        gfg_setSelectRow(grid);\r\n      }else{\r\n        gfs_dispatch('ENTR_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      }\r\n  \r\n      gfc_hideMask();\r\n    }else{\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.Retrieve();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager type3' >\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '배차번호'\r\n                            },{\r\n                              code: '2',\r\n                              name: '차량번호'\r\n                            },{\r\n                              code: '3',\r\n                              name: '사전등급'\r\n                            },{\r\n                              code: '4',\r\n                              name: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       onKeyDown   = {(e) => {\r\n                        if(e.keyCode === 13){\r\n                          this.Retrieve()\r\n                        }\r\n                       }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        rowHeight={41}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        columns={[\r\n                          columnInput({\r\n                            name: 'SCRP_ORD_NO',\r\n                            header: '배차번호',\r\n                            width : 160,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'VEHL_NO',\r\n                            header: '차량번호',\r\n                            width : 160,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'PRE_ITEM_GRADE',\r\n                            header: '사전등급',\r\n                            width : 130,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'VENDER_NAME',\r\n                            header: '업체명',\r\n                            width : 300,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'LOAD_AREA_ADDR',\r\n                            header: '상차주소',\r\n                            width : 420,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'GPSINFOP',\r\n                            header: '주소',\r\n                            width : 200,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>전체차량</span><Botspan reducer='ENTR_PROC_MAIN' />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ENTR_PROC;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\CompleteBtn.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\DISP_PROC\\DISP_PROC.js",["687","688","689"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\nimport Checkbox from '../../../Component/Control/Checkbox';\r\n\r\nimport { gfc_initPgm, gfc_yk_call_sp, gfc_showMask, gfc_hideMask, gfc_ftp_file_yn_YK, gfc_sleep } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue, gfs_injectAsyncReducer, gfs_dispatch, gfs_subscribe } from '../../../Method/Store';\r\nimport { gfo_getCombo, gfo_getInput, gfo_getCheckbox } from '../../../Method/Component';\r\nimport { gfg_getGrid, gfg_setSelectRow, gfg_appendRow } from '../../../Method/Grid';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { TextArea as columnTextArea } from '../../../Component/Grid/Column/TextArea';\r\nimport { DateTime as columnDateTime } from '../../../Component/Grid/Column/DateTime';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\nimport Detailspan from '../Common/Detailspan';\r\nimport Botspan from '../Common/Botspan';\r\nimport Chit from '../Common/Chit/Chit';\r\nimport CompleteBtn from './CompleteBtn';\r\nimport TabList from './TabList';\r\nimport RecImage from '../Common/RecImage';\r\n//#endregion\r\n\r\nclass DISP_PROC extends Component {\r\n\r\n  state = {\r\n    wait_list: [],\r\n    scaleNumb: ''\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#endregion\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const DISP_PROC_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'DISP_PROC_MAIN') {\r\n        return {\r\n          MAIN_WAIT    : nowState === undefined ? 0 : nowState.MAIN_WAIT,\r\n          MAIN_TOTAL   : nowState === undefined ? 0 : nowState.MAIN_TOTAL,\r\n          MAIN_WEIGHT  : nowState === undefined ? 0 : nowState.MAIN_WEIGHT,\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n          PROC_WAIT    : nowState === undefined ? 0 : nowState.PROC_WAIT,\r\n          DEPT_WAIT    : nowState === undefined ? 0 : nowState.DEPT_WAIT,\r\n          ENTR_WAIT    : nowState === undefined ? 0 : nowState.ENTR_WAIT,\r\n \r\n          DETAIL_SCALE : nowState === undefined ? '' : nowState.DETAIL_SCALE,\r\n          DETAIL_CARNO : nowState === undefined ? '' : nowState.DETAIL_CARNO,\r\n          DETAIL_WEIGHT: nowState === undefined ? '' : nowState.DETAIL_WEIGHT,\r\n          DETAIL_DATE  : nowState === undefined ? '' : nowState.DETAIL_DATE,\r\n\r\n          GRID_SCALE   : nowState === undefined ? '' : nowState.GRID_SCALE,\r\n\r\n          STD_CAM_IMG  : nowState === undefined ? null : nowState.STD_CAM_IMG,\r\n          DUM_CAM_IMG  : nowState === undefined ? null : nowState.DUM_CAM_IMG,\r\n\r\n          STD_CAM_OPEN : nowState === undefined ? false : nowState.STD_CAM_OPEN,\r\n          DUM_CAM_OPEN : nowState === undefined ? false : nowState.DUM_CAM_OPEN,\r\n\r\n          STD_CAM_FOCUS: nowState === undefined ? false : nowState.STD_CAM_FOCUS,\r\n          DUM_CAM_FOCUS: nowState === undefined ? false : nowState.DUM_CAM_FOCUS,\r\n\r\n          STD_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.STD_CAM_REC,\r\n          DUM_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.DUM_CAM_REC,\r\n\r\n          CHIT_MEMO    : nowState === undefined ? '' : nowState.CHIT_MEMO,\r\n          \r\n          CHIT_INFO    : nowState === undefined ? {\r\n                                                    date     : '',\r\n                                                    scaleNumb: '',\r\n                                                    carNumb  : '',\r\n                                                    vender   : '',\r\n                                                    itemFlag : '',\r\n                                                    Wgt      : '',\r\n                                                    loc      : '',\r\n                                                    user     : '',\r\n                                                    chit     : 'N',\r\n                                                  } : nowState.CHIT_INFO\r\n        };\r\n      }\r\n\r\n      if(action.type === 'MAIN_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WAIT : action.MAIN_WAIT\r\n        })\r\n      }else if(action.type === 'MAIN_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_TOTAL : action.MAIN_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WEIGHT : action.MAIN_WEIGHT\r\n        })\r\n      }else if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }else if(action.type === 'PROC_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          PROC_WAIT : action.PROC_WAIT\r\n        })\r\n      }else if(action.type === 'DEPT_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEPT_WAIT : action.DEPT_WAIT\r\n        })\r\n      }else if(action.type === 'ENTR_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ENTR_WAIT : action.ENTR_WAIT\r\n        })\r\n      }else if(action.type === 'DETAIL_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_SCALE : action.DETAIL_SCALE\r\n        })\r\n      }else if(action.type === 'GRID_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          GRID_SCALE : action.GRID_SCALE\r\n        })\r\n      }else if(action.type === 'DETAIL_CARNO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_CARNO : action.DETAIL_CARNO\r\n        })\r\n      }else if(action.type === 'DETAIL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_WEIGHT : action.DETAIL_WEIGHT\r\n        })\r\n      }else if(action.type === 'DETAIL_DATE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_DATE : action.DETAIL_DATE\r\n        })\r\n      }else if(action.type === 'STD_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_IMG : action.STD_CAM_IMG\r\n        })\r\n      }else if(action.type === 'DUM_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_IMG : action.DUM_CAM_IMG\r\n        })\r\n      }else if(action.type === 'STD_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_OPEN : action.STD_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'DUM_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_OPEN : action.DUM_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'STD_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_FOCUS : action.STD_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'DUM_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_FOCUS : action.DUM_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.STD_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.DUM_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec     : nowState.STD_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec     : nowState.DUM_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO_ITEM_FLAG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     :  nowState.CHIT_INFO.date,\r\n            scaleNumb:  nowState.CHIT_INFO.scaleNumb,\r\n            carNumb  :  nowState.CHIT_INFO.carNumb,\r\n            vender   :  nowState.CHIT_INFO.vender,\r\n            itemFlag :  action.itemFlag,\r\n            Wgt      :  nowState.CHIT_INFO.Wgt,\r\n            loc      :  nowState.CHIT_INFO.loc,\r\n            user     :  nowState.CHIT_INFO.user,\r\n            chit     :  nowState.CHIT_INFO.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     : action.date,\r\n            scaleNumb: action.scaleNumb,\r\n            carNumb  : action.carNumb,\r\n            vender   : action.vender,\r\n            itemFlag : action.itemFlag,\r\n            Wgt      : action.Wgt,\r\n            loc      : action.loc,\r\n            user     : action.user,\r\n            chit     : action.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_MEMO'){\r\n        return Object.assign({}, nowState, {\r\n          CHIT_MEMO : action.CHIT_MEMO\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('DISP_PROC_MAIN', DISP_PROC_MAIN);\r\n    //#endregion\r\n  }\r\n\r\n  \r\n  mainGrid = async() => {\r\n\r\n    try{\r\n      const select = await gfc_yk_call_sp('SP_ZM_MSTR_PASS');\r\n      const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n      \r\n      if(select.data.SUCCESS === 'Y'){\r\n        const main = select.data.ROWS;\r\n  \r\n        const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n        const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n        \r\n        const dataMod = [];\r\n        main.forEach(e => {\r\n          dataMod.push({\r\n            scaleNumb: e['DELIVERY_ID'].toString(),\r\n            carNumb: e['VEHICLE_NO'],\r\n            preItemGrade: e['PRE_ITEM_GRADE'],\r\n            itemGrade: e['ITEM_GRADE'],\r\n            date: e['CREATION_DATE'],\r\n            lastDate: e['LASTDATE'],\r\n            vendor: e['VENDOR_NAME']\r\n          })\r\n        })\r\n  \r\n        const data = dataMod.filter(e => {\r\n          if(search_tp !== null && search_tp !== ''){\r\n            //계근번호\r\n            if(search_tp === '1'){\r\n              if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //차량번호\r\n            else if(search_tp === '2'){\r\n              if(e.carNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //사전등급\r\n            else if(search_tp === '3'){\r\n              if(e.itemGrade.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //업체\r\n            else if(search_tp === '4'){\r\n              if(e.vendor.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            \r\n          }else{\r\n            return true;\r\n          }\r\n        })\r\n    \r\n        if(data.length > 0){\r\n          \r\n          //기존 그리드에서 scaleNumb기준으로 데이터가 없으면 추가한다.\r\n          for(let i = 0; i < data.length; i++){\r\n            const scaleNumb = data[i].scaleNumb;\r\n  \r\n            const oldData = grid.getData().find(e => e.scaleNumb === scaleNumb);\r\n            if(!oldData){\r\n              gfg_appendRow(grid, grid.getRowCount(), {\r\n                scaleNumb,\r\n                carNumb: data[i].carNumb,\r\n                preItemGrade: data[i].preItemGrade,\r\n                itemGrade: data[i].itemGrade,\r\n                date: data[i].date,\r\n                lastDate: data[i].lastDate,\r\n                vendor: data[i].vendor\r\n              }, 'scaleNumb', false);\r\n            }\r\n          }\r\n  \r\n          //새로운 정보 기준으로 데이터가 지워졌으면 삭제한다.\r\n          for(let i = 0; i < grid.getData().length; i++){\r\n            const scaleNumb =  grid.getData()[i].scaleNumb;\r\n  \r\n            const newData = data.find(e => e.scaleNumb === scaleNumb)\r\n            if(!newData){\r\n              grid.removeRow(i);\r\n  \r\n              //지워진 데이터가 기존에 선택된 데이터 이면 초기화 한다.\r\n              const selectScaleNumb = gfs_getStoreValue('DISP_PROC_MAIN', 'DETAIL_SCALE');\r\n              if(scaleNumb === selectScaleNumb){\r\n                gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n                gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n                gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: '0'});\r\n                gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n              }\r\n            }\r\n          }\r\n  \r\n          grid.resetOriginData();\r\n          grid.restore();\r\n  \r\n          const scaleNumb = gfs_getStoreValue('DISP_PROC_MAIN', 'DETAIL_SCALE');\r\n          if(scaleNumb !== ''){\r\n            const row = grid.getData().find(e => e.scaleNumb === scaleNumb);\r\n            if(row){\r\n              gfg_setSelectRow(grid, 'scaleNumb', row.rowKey, true);\r\n            }\r\n          }\r\n          \r\n          if(gfs_getStoreValue('DISP_PROC_MAIN', 'BOT_TOTAL') !== data.length)\r\n            gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n        }else{\r\n          grid.clear();\r\n          if(gfs_getStoreValue('DISP_PROC_MAIN', 'BOT_TOTAL') !== 0)\r\n            gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n        }\r\n      }else{\r\n        grid.clear();\r\n        if(gfs_getStoreValue('DISP_PROC_MAIN', 'BOT_TOTAL') !== 0)\r\n          gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      }\r\n    }catch(e){\r\n\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.mainGridInterval = setInterval(e => {\r\n      this.mainGrid();\r\n    }, 20000)\r\n\r\n    this.Retrieve();\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.mainGridInterval);\r\n  }\r\n\r\n  // Retrieve = async () => {\r\n\r\n  //   gfc_showMask();\r\n\r\n  //   gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(''); //사전등급\r\n  //   gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n  //   gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n  //   gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n  //   gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n  //   gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n  //   gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n  //   gfo_getCombo(this.props.pgm, 'detail_car').setValue('');      //차종구분\r\n  //   gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n  //   gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n  //   gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n  //   gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n  //   gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n  //   gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: ''});\r\n  //   gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n\r\n  //   gfs_dispatch('DISP_PROC_MAIN', 'CHIT_INFO', {\r\n  //     chit     : false,\r\n  //     scaleNumb: ''\r\n  //   });\r\n\r\n  //   const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n  //   const data = [{\r\n  //     scaleNumb: '202110070001',\r\n  //     carNumb  : '68무6308',\r\n  //     preItemGrade: '사전등급',\r\n  //     itemGrade   : '검수등급',\r\n  //     date        : new Date(),\r\n  //     lastDate    : new Date(),\r\n  //     vendor      : '벤더'\r\n  //   },{\r\n  //     scaleNumb: '202110070002',\r\n  //     carNumb  : '68무6308',\r\n  //     preItemGrade: '사전등급',\r\n  //     itemGrade   : '검수등급',\r\n  //     date        : new Date(),\r\n  //     lastDate    : new Date(),\r\n  //     vendor      : '벤더'\r\n  //   }]\r\n\r\n  //   if(data.length > 0){\r\n  //     grid.resetData(data);\r\n  //     gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n      \r\n  //     await gfc_sleep(100);\r\n\r\n  //     gfg_setSelectRow(grid);\r\n  //   }else{\r\n  //     gfs_dispatch('DISP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n  //   }\r\n\r\n  //   gfc_hideMask();\r\n  // }\r\n\r\n  Retrieve = async () => {\r\n\r\n    gfc_showMask();\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(''); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue('');      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: ''});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n\r\n    gfs_dispatch('DISP_PROC_MAIN', 'CHIT_INFO', {\r\n      chit     : false,\r\n      scaleNumb: ''\r\n    });\r\n\r\n    this.mainGrid();\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n\r\n  onSelectChange = async (e) => {\r\n    if(e === null) return;\r\n\r\n    gfs_dispatch('DISP_PROC_MAIN', 'GRID_SCALE', {GRID_SCALE: e.scaleNumb});\r\n\r\n    //계량증명서 정보여부\r\n    const chitInfoYn = await gfc_yk_call_sp('SP_ZM_CHIT', {\r\n      P_SCALENUMB: e.scaleNumb\r\n    });\r\n\r\n    if(chitInfoYn.data.SUCCESS === 'N'){\r\n      alert('계량증명서 정보가 없습니다.');\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n\r\n    //기존 등록된 정보\r\n    const dtlInfo = await gfc_yk_call_sp('SP_ZM_PROCESS_F_SEL', {\r\n      P_SCALENUMB: e.scaleNumb\r\n    });\r\n    \r\n    if(dtlInfo.data.SUCCESS === 'N'){\r\n      alert('검수정보를 불러올수 없습니다.');\r\n      return;\r\n    }\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(e.preItemGrade); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue(dtlInfo.data.ROWS[0].IRON_GRADE);   //고철등급\r\n    const detail_grade2 = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n    await detail_grade2.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n      p_division    : dtlInfo.data.ROWS[0].IRON_GRADE\r\n    })});\r\n    detail_grade2.setValue(dtlInfo.data.ROWS[0].IRON_GRADE_ITEM);   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue(dtlInfo.data.ROWS[0].REDUCE_WGT);     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(dtlInfo.data.ROWS[0].REDUCE_WGT_REASON_CODE); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue(dtlInfo.data.ROWS[0].DISCOUNT_CODE);     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue(dtlInfo.data.ROWS[0].DISCOUNT_RATE);    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue(dtlInfo.data.ROWS[0].CAR_TYPE);      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_out').setValue(dtlInfo.data.ROWS[0].SECTOR_CODE);      //하차구역\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue(dtlInfo.data.ROWS[0].RETURN_GUBUN);      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue(dtlInfo.data.ROWS[0].RETURN_CODE);     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue(dtlInfo.data.ROWS[0].WARNING);  //경고\r\n    gfo_getInput(this.props.pgm, 'detail_rain').setValue(dtlInfo.data.ROWS[0].RAIN); //강수량\r\n\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: e.scaleNumb});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: e.carNumb});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: e.totalWgt});\r\n    gfs_dispatch('DISP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: e.date});\r\n\r\n    //계량증명서 여부 확인.\r\n    const chitYn = await gfc_ftp_file_yn_YK(e.scaleNumb);\r\n\r\n    gfs_dispatch('DISP_PROC_MAIN', 'CHIT_INFO', {\r\n      date     : chitInfoYn.data.ROWS[0].CREATION_DATE,\r\n      scaleNumb: chitInfoYn.data.ROWS[0].DELIVERY_ID.toString(),\r\n      carNumb  : chitInfoYn.data.ROWS[0].VEHICLE_NO,\r\n      vender   : chitInfoYn.data.ROWS[0].VENDOR_NAME,\r\n      itemFlag : e.itemGrade,\r\n      Wgt      : chitInfoYn.data.ROWS[0].TOTAL_WEIGHT,\r\n      loc      : chitInfoYn.data.ROWS[0].AREA,\r\n      user     : gfs_getStoreValue('USER_REDUCER', 'USER_NAM'),\r\n      chit     : chitYn.data\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager' >\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '계근번호'\r\n                            },{\r\n                              code: '2',\r\n                              name: '차량번호'\r\n                            },{\r\n                              code: '3',\r\n                              name: '사전등급'\r\n                            },{\r\n                              code: '4',\r\n                              name: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       onKeyDown   = {(e) => {\r\n                        if(e.keyCode === 13){\r\n                          this.Retrieve()\r\n                        }\r\n                       }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        selectionChange={(e) => this.onSelectChange(e)}\r\n                        rowHeight={46}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        columns={[\r\n                          columnInput({\r\n                            name: 'scaleNumb',\r\n                            header: '계근번호',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'carNumb',\r\n                            header: '차량번호',\r\n                            width : 110,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'preItemGrade',\r\n                            header: '사전등급',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),     \r\n                          columnInput({\r\n                            name: 'itemGrade',\r\n                            header: '판정등급',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }), \r\n                          columnDateTime({\r\n                            name  : 'date',\r\n                            header: '입차시간',\r\n                            width : 120,\r\n                            height: 38,\r\n                            // paddingTop: ''\r\n                            readOnly: true,\r\n                            valign:'middle',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                            time  : 'HH:mm:ss'\r\n                          }),\r\n                          columnDateTime({\r\n                            name  : 'lastDate',\r\n                            header: '검수시간',\r\n                            width : 120,\r\n                            height: 38,\r\n                            // paddingTop: ''\r\n                            readOnly: true,\r\n                            valign:'middle',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                            time  : 'HH:mm:ss'\r\n                          }),\r\n                          columnTextArea({\r\n                            name: 'vendor',\r\n                            header: 'Vendor',\r\n                            width : 200,\r\n                            height: 38,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          })\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>전체차량</span><Botspan reducer='DISP_PROC_MAIN' />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div id={`car_info_${this.props.pgm}`} className='car_info'>\r\n            <div className='title'><span>계근번호</span><Detailspan flag={1}  reducer='DISP_PROC_MAIN'/></div>\r\n\r\n\r\n\r\n            <TabList pgm={this.props.pgm} id={this.props.id} reducer='DISP_PROC_MAIN'/>\r\n\r\n\r\n            <div className='tab_content' id='tabMain'>\r\n              <div className='input_list on' id={`content1_${this.props.pgm}`}>\r\n                <ul>\r\n                  <li>\r\n                    <h5>사전등급</h5>\r\n                      <Input pgm     = {this.props.pgm}\r\n                             id      = 'detail_pre_grade'\r\n                             width   = '100%'\r\n                             disabled\r\n                      />\r\n                  </li>\r\n                  <li>\r\n                    <h5>등급책정</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                                id      = 'detail_grade1'\r\n                                value   = 'itemCode'\r\n                                display = 'item'\r\n                                placeholder = '고철등급 검색'\r\n                                height  = {42}\r\n                                oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                  p_division    : 'P005'\r\n                                })}\r\n                                onChange = {async (e) => {\r\n                                  const combo = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n                                  combo.setValue(null);\r\n                                  combo.setDisabled(true);\r\n\r\n                                  if(e !== undefined && e.value !== ''){\r\n                                    await combo.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                      p_division    : e.value\r\n                                    })});\r\n                                    combo.setDisabled(false);\r\n                                  }else{\r\n                                    combo.setDisabled(true);\r\n                                  }\r\n                                }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_grade2'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>감량중량</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_subt'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감량중량 검색(KG)'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P535'\r\n                            })}\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_subt_leg');\r\n                              combo.setValue(null);\r\n                              combo.setDisabled(true);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value !== '0'){\r\n                                // await combo.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                //   p_division    : e.value\r\n                                // })});\r\n                                combo.setDisabled(false);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_subt_leg'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '감량사유 검색'\r\n                          oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                            p_division    : 'P620'\r\n                          })}\r\n                          isDisabled\r\n                    /> \r\n                  </li>\r\n                  <li>\r\n                    <h5>감가내역</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_depr'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감가내역 검색'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P130'\r\n                            })}\r\n                            emptyRow\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_depr2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e !== undefined && e.value !== ''){\r\n                                combo.setDisabled(false);\r\n                              }else{\r\n                                combo.setDisabled(true);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm = {this.props.pgm}\r\n                          id      = 'detail_depr2'\r\n                          value   = 'CODE'\r\n                          display = 'NAME'\r\n                          placeholder = '감가비율'\r\n                          isDisabled\r\n                          data    = {[{\r\n                            'CODE': '10',\r\n                            'NAME': '10%'\r\n                          },{\r\n                            'CODE': '20',\r\n                            'NAME': '20%'\r\n                          },{\r\n                            'CODE': '30',\r\n                            'NAME': '30%'\r\n                          },{\r\n                            'CODE': '40',\r\n                            'NAME': '40%'\r\n                          },{\r\n                            'CODE': '50',\r\n                            'NAME': '50%'\r\n                          },{\r\n                            'CODE': '60',\r\n                            'NAME': '60%'\r\n                          },{\r\n                            'CODE': '70',\r\n                            'NAME': '70%'\r\n                          },{\r\n                            'CODE': '80',\r\n                            'NAME': '80%'\r\n                          },{\r\n                            'CODE': '90',\r\n                            'NAME': '90%'\r\n                          },{\r\n                            'CODE': '100',\r\n                            'NAME': '100%'\r\n                          }]}\r\n                          // emptyRow\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>차종구분</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_car'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '차종선택'\r\n                          oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                            p_division    : 'P700'\r\n                          })}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>하차구역</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_out'\r\n                          value   = 'itemCode'\r\n                          display = 'itemCode'\r\n                          placeholder = '차종선택'\r\n                          oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                            p_division    : 'P530'\r\n                          })}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>반품구분</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '일부,전량 선택'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P110'\r\n                            })}\r\n                            emptyRow\r\n                            onChange = {e => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_rtn2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value === ''){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                combo.setDisabled(false);\r\n                              }\r\n                            }}\r\n                    />\r\n                    </div>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn2'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P120'\r\n                            })}\r\n                            isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>경고</h5>\r\n                    <Checkbox pgm   = {this.props.pgm}\r\n                              id    = 'detail_warning'\r\n                              width = '30px'\r\n                              height= '30px'\r\n\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>강수량</h5>\r\n                      <Input pgm     = {this.props.pgm}\r\n                             id      = 'detail_rain'\r\n                             width   = '100%'\r\n                             disabled\r\n                      />\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              \r\n              <Chit pgm={this.props.pgm} id={'chit_memo'} reducer='DISP_PROC_MAIN'/>\r\n              \r\n\r\n\r\n              \r\n            </div>\r\n            <CompleteBtn pgm={this.props.pgm}/>\r\n\r\n\r\n\r\n\r\n          </div>\r\n            <div className='cctv_viewer'>\r\n              <h4>녹화영상</h4>\r\n              <div className='cctv_list'>\r\n                  <RecImage \r\n                    seq     = {1}\r\n                    reducer = 'DISP_PROC_MAIN'\r\n                    cam     = 'STD_CAM_OPEN' \r\n                    focus   = 'STD_CAM_FOCUS' \r\n                    rec     = 'STD_CAM_REC' \r\n                    image   = 'STD_CAM_IMG'/> \r\n                  <RecImage \r\n                    seq     = {2}\r\n                    reducer = 'DISP_PROC_MAIN'\r\n                    cam     = 'DUM_CAM_OPEN' \r\n                    focus   = 'DUM_CAM_FOCUS' \r\n                    rec     = 'DUM_CAM_REC' \r\n                    image   = 'DUM_CAM_IMG'/> \r\n              </div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DISP_PROC;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_HIST\\CompleteBtn.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_HIST\\INSP_HIST.js",["690","691"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_yk_call_sp, gfc_sleep, gfc_now } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue, gfs_injectAsyncReducer, gfs_dispatch, gfs_subscribe } from '../../../Method/Store';\r\nimport { gfo_getCombo, gfo_getInput } from '../../../Method/Component';\r\nimport { gfg_getGrid, gfg_setSelectRow } from '../../../Method/Grid';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport moment from 'moment';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { TextArea as columnTextArea } from '../../../Component/Grid/Column/TextArea';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\nimport Detailspan from '../Common/Detailspan';\r\nimport Botspan from '../Common/Botspan';\r\nimport Chit from '../Common/Chit/Chit';\r\nimport RecImage from '../Common/RecImage';\r\n//#endregion\r\n\r\nclass INSP_HIST extends Component {\r\n\r\n  state = {\r\n    wait_list: [],\r\n    scaleNumb: ''\r\n  }\r\n\r\n  onTabChg = async() => {\r\n\r\n    const activeWindow = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'activeWindow');\r\n    if(activeWindow.programId !== 'INSP_HIST'){\r\n      return;\r\n    }\r\n\r\n    await gfc_sleep(500);\r\n\r\n    const carNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_CARNO');\r\n    if(carNumb !== undefined && carNumb !== ''){\r\n\r\n      const befCarNumb = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n\r\n      if(befCarNumb !== carNumb){\r\n        gfo_getInput(this.props.pgm, 'search_txt').setValue(carNumb);\r\n        await gfc_sleep(100);\r\n        \r\n        this.Retrieve();\r\n\r\n        //차량번호, 총중량, 입차시간 세팅\r\n        const scaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n        const totalWgt = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_WEIGHT');\r\n        const date = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_DATE');\r\n\r\n        gfs_dispatch('INSP_HIST_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: scaleNumb});\r\n        gfs_dispatch('INSP_HIST_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: carNumb});\r\n        gfs_dispatch('INSP_HIST_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: totalWgt});\r\n        gfs_dispatch('INSP_HIST_MAIN', 'DETAIL_DATE', {DETAIL_DATE: date});\r\n      }\r\n    }\r\n  }\r\n\r\n  //#region onActiveWindow 스토어 subscribe로 실행됨.\r\n  onActiveWindow = () => {\r\n    const activeWindow = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'activeWindow');\r\n    if(activeWindow.programId === 'INSP_HIST'){\r\n      this.onTabChg();\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#endregion\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const INSP_HIST_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'INSP_HIST_MAIN') {\r\n        return {\r\n          MAIN_WAIT    : nowState === undefined ? 0 : nowState.MAIN_WAIT,\r\n          MAIN_TOTAL   : nowState === undefined ? 0 : nowState.MAIN_TOTAL,\r\n          MAIN_WEIGHT  : nowState === undefined ? 0 : nowState.MAIN_WEIGHT,\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n          PROC_WAIT    : nowState === undefined ? 0 : nowState.PROC_WAIT,\r\n          DEPT_WAIT    : nowState === undefined ? 0 : nowState.DEPT_WAIT,\r\n          ENTR_WAIT    : nowState === undefined ? 0 : nowState.ENTR_WAIT,\r\n \r\n          DETAIL_SCALE : nowState === undefined ? '' : nowState.DETAIL_SCALE,\r\n          DETAIL_CARNO : nowState === undefined ? '' : nowState.DETAIL_CARNO,\r\n          DETAIL_WEIGHT: nowState === undefined ? '' : nowState.DETAIL_WEIGHT,\r\n          DETAIL_DATE  : nowState === undefined ? '' : nowState.DETAIL_DATE,\r\n\r\n          GRID_SCALE   : nowState === undefined ? '' : nowState.GRID_SCALE,\r\n\r\n          STD_CAM_IMG  : nowState === undefined ? null : nowState.STD_CAM_IMG,\r\n          DUM_CAM_IMG  : nowState === undefined ? null : nowState.DUM_CAM_IMG,\r\n\r\n          STD_CAM_OPEN : nowState === undefined ? false : nowState.STD_CAM_OPEN,\r\n          DUM_CAM_OPEN : nowState === undefined ? false : nowState.DUM_CAM_OPEN,\r\n\r\n          STD_CAM_FOCUS: nowState === undefined ? false : nowState.STD_CAM_FOCUS,\r\n          DUM_CAM_FOCUS: nowState === undefined ? false : nowState.DUM_CAM_FOCUS,\r\n\r\n          STD_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.STD_CAM_REC,\r\n          DUM_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.DUM_CAM_REC,\r\n\r\n          CHIT_MEMO    : nowState === undefined ? '' : nowState.CHIT_MEMO,\r\n          \r\n          CHIT_INFO    : nowState === undefined ? {\r\n                                                    date     : '',\r\n                                                    scaleNumb: '',\r\n                                                    carNumb  : '',\r\n                                                    vender   : '',\r\n                                                    itemFlag : '',\r\n                                                    Wgt      : '',\r\n                                                    loc      : '',\r\n                                                    user     : '',\r\n                                                    chit     : 'N',\r\n                                                  } : nowState.CHIT_INFO\r\n        };\r\n      }\r\n\r\n      if(action.type === 'MAIN_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WAIT : action.MAIN_WAIT\r\n        })\r\n      }else if(action.type === 'MAIN_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_TOTAL : action.MAIN_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WEIGHT : action.MAIN_WEIGHT\r\n        })\r\n      }else if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }else if(action.type === 'PROC_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          PROC_WAIT : action.PROC_WAIT\r\n        })\r\n      }else if(action.type === 'DEPT_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEPT_WAIT : action.DEPT_WAIT\r\n        })\r\n      }else if(action.type === 'ENTR_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ENTR_WAIT : action.ENTR_WAIT\r\n        })\r\n      }else if(action.type === 'DETAIL_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_SCALE : action.DETAIL_SCALE\r\n        })\r\n      }else if(action.type === 'GRID_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          GRID_SCALE : action.GRID_SCALE\r\n        })\r\n      }else if(action.type === 'DETAIL_CARNO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_CARNO : action.DETAIL_CARNO\r\n        })\r\n      }else if(action.type === 'DETAIL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_WEIGHT : action.DETAIL_WEIGHT\r\n        })\r\n      }else if(action.type === 'DETAIL_DATE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_DATE : action.DETAIL_DATE\r\n        })\r\n      }else if(action.type === 'STD_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_IMG : action.STD_CAM_IMG\r\n        })\r\n      }else if(action.type === 'DUM_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_IMG : action.DUM_CAM_IMG\r\n        })\r\n      }else if(action.type === 'STD_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_OPEN : action.STD_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'DUM_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_OPEN : action.DUM_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'STD_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_FOCUS : action.STD_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'DUM_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_FOCUS : action.DUM_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.STD_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.DUM_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec     : nowState.STD_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec     : nowState.DUM_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO_ITEM_FLAG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     :  nowState.CHIT_INFO.date,\r\n            scaleNumb:  nowState.CHIT_INFO.scaleNumb,\r\n            carNumb  :  nowState.CHIT_INFO.carNumb,\r\n            vender   :  nowState.CHIT_INFO.vender,\r\n            itemFlag :  action.itemFlag,\r\n            Wgt      :  nowState.CHIT_INFO.Wgt,\r\n            loc      :  nowState.CHIT_INFO.loc,\r\n            user     :  nowState.CHIT_INFO.user,\r\n            chit     :  nowState.CHIT_INFO.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     : action.date,\r\n            scaleNumb: action.scaleNumb,\r\n            carNumb  : action.carNumb,\r\n            vender   : action.vender,\r\n            itemFlag : action.itemFlag,\r\n            Wgt      : action.Wgt,\r\n            loc      : action.loc,\r\n            user     : action.user,\r\n            chit     : action.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_MEMO'){\r\n        return Object.assign({}, nowState, {\r\n          CHIT_MEMO : action.CHIT_MEMO\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('INSP_HIST_MAIN', INSP_HIST_MAIN);\r\n    gfs_subscribe(this.onActiveWindow);\r\n    //#endregion\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    gfo_getCombo(this.props.pgm, 'search_tp').setValue('1');\r\n    this.Retrieve();\r\n  }\r\n\r\n  Retrieve = async () => {\r\n    const carNumb = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n    if(carNumb === undefined || carNumb === ''){\r\n      return;\r\n    }\r\n\r\n    gfc_showMask();\r\n\r\n    const now = await (gfc_now());\r\n    const fr_dt = moment(now).subtract(2, 'month').format('YYYYMMDD');\r\n    const to_dt = moment(now).format('YYYYMMDD');\r\n\r\n    const mainData = await gfc_yk_call_sp(`SP_ZM_PROCESS_F2`, {\r\n      P_CAR_NO: carNumb\r\n    });\r\n    \r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    grid.clear();\r\n    \r\n    gfs_dispatch('INSP_HIST_MAIN', 'CHIT_INFO', {\r\n      scaleNumb: ''\r\n    });\r\n\r\n    if(mainData.data.SUCCESS === 'Y'){\r\n      const main = mainData.data.ROWS;\r\n\r\n      const dataMod = [];\r\n      main.forEach(e => {\r\n        dataMod.push({\r\n          totalWgt : e['WGT'],\r\n          grade    : e['IRON_GRADE'],\r\n          scaleNumb: e['SCALE_NUMB'].toString(),\r\n          date     : e['WGHT_DATE'],\r\n          rtn      : e['RETURN_GUBUN'] === '010' ? '일부반품' : e['RETURN_GUBUN'] === '020' ? '전량반품' : '',\r\n          vendor   : e['VENDER_NAME'],\r\n          carNumb  : e['VEHL_NO'],\r\n          loc      : e['LOAD_AREA_ADDR'],\r\n          warning  : e['WARNING'] === 'N' ? 'N' : 'Y'\r\n        })\r\n      })\r\n\r\n      grid.resetData(dataMod);\r\n      gfs_dispatch('INSP_HIST_MAIN', 'BOT_TOTAL', {BOT_TOTAL: main.length});\r\n      \r\n      await gfc_sleep(100);\r\n\r\n      gfg_setSelectRow(grid);\r\n    }else{\r\n      gfs_dispatch('INSP_HIST_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n    }\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n\r\n  onSelectChange = async (e) => {\r\n    if(e === null) return;\r\n\r\n    gfs_dispatch('INSP_HIST_MAIN', 'GRID_SCALE', {GRID_SCALE: e.scaleNumb});\r\n\r\n    //계량증명서 여부 확인.\r\n    // const chitYn = await gfc_chit_yn_YK(e.scaleNumb);\r\n    gfs_dispatch('INSP_HIST_MAIN', 'CHIT_INFO', {\r\n      scaleNumb: e.scaleNumb\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager' >\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            isDisabled\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '차량번호'\r\n                            },{\r\n                              code: '2',\r\n                              name: '실공급사'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                      //  readOnly\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        selectionChange={(e) => this.onSelectChange(e)}\r\n                        rowHeight={41}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        columns={[\r\n                          columnInput({\r\n                            name: 'scaleNumb',\r\n                            header: '계근번호',\r\n                            width : 100,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center',\r\n                            fontSize: '12'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'carNumb',\r\n                            header: '차량번호',\r\n                            width : 90,\r\n                            readOnly: true,\r\n                            align : 'center',\r\n                            fontSize: '12'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'grade',\r\n                            header: '검수등급',\r\n                            width : 90,\r\n                            readOnly: true,\r\n                            align : 'left',\r\n                            fontSize: '12'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'date',\r\n                            header: '계근일자',\r\n                            width : 80,\r\n                            readOnly: true,\r\n                            align : 'center',\r\n                            fontSize: '12'\r\n                          }),   \r\n                          columnTextArea({\r\n                            name: 'vendor',\r\n                            header: '업체명',\r\n                            width : 95,\r\n                            height: 38,\r\n                            readOnly: true,\r\n                            align : 'left',\r\n                            fontSize: '12'\r\n                          }),\r\n                          columnTextArea({\r\n                            name: 'loc',\r\n                            header: '상차주소',\r\n                            width : 120,\r\n                            height: 38,\r\n                            readOnly: true,\r\n                            align : 'left',\r\n                            fontSize: '12'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'totalWgt',\r\n                            header: '감량',\r\n                            width : 35,\r\n                            readOnly: true,\r\n                            align : 'right',\r\n                            fontSize: '12'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'warning',\r\n                            header: '경고',\r\n                            width : 40,\r\n                            readOnly: true,\r\n                            align : 'center',\r\n                            fontSize: '12'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'rtn',\r\n                            header: '반품구분',\r\n                            width : 70,\r\n                            readOnly: true,\r\n                            align : 'center',\r\n                            fontSize: '12'\r\n                          })\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>전체차량</span><Botspan reducer='INSP_HIST_MAIN' />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div style={{paddingBottom:'10px', paddingTop:'60px'}} className='car_info'>\r\n            <div className='title'><span>계근번호</span><Detailspan flag={1}  reducer='INSP_HIST_MAIN'/></div>\r\n            <Chit pgm={this.props.pgm} id={'chit_memo'}  reducer='INSP_HIST_MAIN'/>\r\n          </div>\r\n            <div className='cctv_viewer'>\r\n              <h4>녹화영상</h4>\r\n              <div className='cctv_list'>\r\n                <RecImage \r\n                  seq     = {1}\r\n                  reducer = 'INSP_HIST_MAIN'\r\n                  cam     = 'STD_CAM_OPEN' \r\n                  focus   = 'STD_CAM_FOCUS' \r\n                  rec     = 'STD_CAM_REC' \r\n                  image   = 'STD_CAM_IMG'/> \r\n                <RecImage\r\n                  seq     = {2}\r\n                  reducer = 'INSP_HIST_MAIN'\r\n                  cam     = 'DUM_CAM_OPEN' \r\n                  focus   = 'DUM_CAM_FOCUS' \r\n                  rec     = 'DUM_CAM_REC' \r\n                  image   = 'DUM_CAM_IMG'/> \r\n              </div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default INSP_HIST;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\DispImg.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\DispInfo.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\CompleteBtn.js",["692","693"],"import React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { gfs_getStoreValue, gfs_dispatch } from '../../../Method/Store';\r\nimport { gfc_showMask, gfc_hideMask, gfc_screenshot_srv_YK, gfc_ftp_file_yn_YK, gfc_sleep } from '../../../Method/Comm';\r\nimport { gfo_getCombo, gfo_getCheckbox } from '../../../Method/Component';\r\n\r\nimport { YK_WEB_REQ, YK_WEB_REQ_RAIN } from '../../../WebReq/WebReq';\r\nimport { getDynamicSql_Oracle, getSp_Oracle_YK } from '../../../db/Oracle/Oracle';\r\nimport { getDynamicSql_Mysql } from '../../../db/Mysql/Mysql';\r\n\r\nconst CompleteBtn = (props) => {\r\n  const value = useSelector((e) => {\r\n    return e.INSP_PROC_MAIN.CHIT_INFO;\r\n  }, (p, n) => {\r\n    return p.scaleNumb === n.scaleNumb;\r\n  });\r\n\r\n\r\n  const getRain = async() => {\r\n    const result = await YK_WEB_REQ_RAIN();\r\n    let value = 0;\r\n\r\n    if(result){\r\n      gfs_dispatch('INSP_PROC_MAIN', 'RAIN_INFO', {RAIN_INFO: result.data});\r\n      value = result.data;\r\n    }\r\n    \r\n    return value;\r\n  }\r\n\r\n  //#region 검수등록\r\n  const onProcess = async() => {\r\n\r\n    const scaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n\r\n    if(scaleNumb === ''){\r\n      alert('선택된 배차정보가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    gfc_showMask();\r\n\r\n    //#region 필수입력확인 및 변수세팅\r\n    const detail_grade1 = gfo_getCombo(props.pgm, 'detail_grade1'); //고철등급\r\n    if(detail_grade1.getValue() === null || detail_grade1.getValue() === '' || detail_grade1.getValue() === undefined){\r\n      alert('필수입력값이 없습니다. > 고철등급');\r\n      const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n      chitBtn.click(0);\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_grade2 = gfo_getCombo(props.pgm, 'detail_grade2'); //상세고철등급\r\n    if(detail_grade2.getValue() === null || detail_grade2.getValue() === '' || detail_grade2.getValue() === undefined){\r\n      alert('필수입력값이 없습니다. > 등급세부코드');\r\n      const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n      chitBtn.click(0);\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_subt = gfo_getCombo(props.pgm, 'detail_subt'); //감량중량\r\n    const detail_subt_leg = gfo_getCombo(props.pgm, 'detail_subt_leg'); //감량사유\r\n    if(detail_subt.getValue() !== null &&  detail_subt.getValue() !== '' && detail_subt.getValue() !== '0' && detail_subt.getValue() !== undefined){\r\n      if(detail_subt_leg.getValue() === null || detail_subt_leg.getValue() === '' || detail_subt_leg.getValue() === undefined){\r\n        alert('필수입력값이 없습니다. > 감량사유');\r\n        const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n        chitBtn.click(0);\r\n  \r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const detail_depr = gfo_getCombo(props.pgm, 'detail_depr'); //감가내역\r\n    const detail_depr2 = gfo_getCombo(props.pgm, 'detail_depr2'); //감가비율\r\n    if(detail_depr.getValue() !== null &&  detail_depr.getValue() !== ''&&  detail_depr.getValue() !== undefined){\r\n      if(detail_depr2.getValue() === null || detail_depr2.getValue() === '' || detail_depr2.getValue() === undefined){\r\n        alert('필수입력값이 없습니다. > 감가비율');\r\n        const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n        chitBtn.click(0);\r\n  \r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const detail_car = gfo_getCombo(props.pgm, 'detail_car'); //차종구분\r\n    if(detail_car.getValue() === null || detail_car.getValue() === '' || detail_car.getValue() === undefined){\r\n      alert('필수입력값이 없습니다. > 차종구분');\r\n      const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n      chitBtn.click(0);\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    \r\n    const detail_rtn = gfo_getCombo(props.pgm, 'detail_rtn'); //반품구분\r\n    const detail_rtn2 = gfo_getCombo(props.pgm, 'detail_rtn2'); //반품구분사유\r\n    if(detail_rtn.getValue() !== null && detail_rtn.getValue() !== '' && detail_rtn.getValue() !== undefined){\r\n      if(detail_rtn2.getValue() === null || detail_rtn2.getValue() === '' || detail_rtn2.getValue() === undefined){\r\n        alert('필수입력값이 없습니다. > 반품구분사유');\r\n        const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n        chitBtn.click(0);\r\n  \r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const detail_warning = gfo_getCheckbox(props.pgm, 'detail_warning'); //경고\r\n    \r\n    //#endregion\r\n    \r\n    //#region 계량표저장\r\n    const chitYn = await gfc_ftp_file_yn_YK(scaleNumb);\r\n    const memo = gfs_getStoreValue('INSP_PROC_MAIN', 'CHIT_MEMO').trim();\r\n    if(chitYn.data === false){\r\n\r\n      if(memo.length === 0){\r\n        // if(window.confirm('계량표의 내용이 없습니다. 저장하시겠습니까?') === false){\r\n        //   gfc_hideMask();\r\n        //   return;\r\n        // }\r\n        document.getElementById(`tab2_${props.pgm}`).click(2);\r\n        await gfc_sleep(100);\r\n        alert('계량표의 내용이 없습니다.');\r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n\r\n      document.getElementById(`tab2_${props.pgm}`).click(2);\r\n      await gfc_sleep(100);\r\n\r\n      const img = document.getElementById(`content2_${props.pgm}`);\r\n      const result = await gfc_screenshot_srv_YK(img, scaleNumb);\r\n      \r\n      if(result.data.substring(0, 8) === 'Uploaded'){\r\n        // const chitYn = await gfc_chit_yn_YK(scaleNumb);\r\n        gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n          scaleNumb,\r\n          chit     : 'Y'\r\n        });\r\n      }else{\r\n        alert('계량표 저장에 실패 했습니다.');\r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }else{\r\n      if(memo.length > 0){\r\n        alert('저장된 계량표가있습니다. 다시 조회 후 확인바랍니다.');\r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const rain = await getRain();\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                apps.EMM_INSPECT_MOBILE(\r\n                  :p_delivery_id,\r\n                  :p_sector_code,\r\n                  :p_reduce_code,\r\n                  :p_reduce_wgt,\r\n                  :p_return_gubun,\r\n                  :p_return_code,\r\n                  :p_file_yn,\r\n                  :p_iron_grade,\r\n                  :p_iron_grade_item,\r\n                  :p_discount_code,\r\n                  :p_erp_id,\r\n                  :p_erp_worker,\r\n                  :p_discount_rate,\r\n                  :p_cartype,\r\n                  :p_warning,\r\n                  :p_rain,\r\n                  :p_out\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_delivery_id     : scaleNumb,\r\n        p_sector_code     : 'E001',\r\n        p_reduce_code     : (detail_subt_leg.getValue() === null || detail_subt_leg.getValue() === undefined) ? '' : detail_subt_leg.getValue(),\r\n        p_reduce_wgt      : (detail_subt.getValue() === null || detail_subt.getValue() === undefined) ? '' : detail_subt.getValue(),\r\n        p_return_gubun    : (detail_rtn.getValue() === null || detail_rtn.getValue() === undefined) ? '' : detail_rtn.getValue(),\r\n        p_return_code     : (detail_rtn2.getValue() === null || detail_rtn2.getValue() === undefined) ? '' : detail_rtn2.getValue(),\r\n        p_file_yn         : '',\r\n        p_iron_grade      : detail_grade1.getValue(),\r\n        p_iron_grade_item : detail_grade2.getValue(),\r\n        p_discount_code   : (detail_depr.getValue() === null || detail_depr.getValue() === undefined)? '' : detail_depr.getValue(),\r\n        p_erp_id          : gfs_getStoreValue('USER_REDUCER', 'ERP_ID'),\r\n        p_erp_worker      : gfs_getStoreValue('USER_REDUCER', 'USER_NAM'),\r\n        p_discount_rate   : (detail_depr2.getValue() === null || detail_depr2.getValue() === undefined) ? '' : detail_depr2.getValue(),\r\n        p_cartype         : detail_car.getValue(),\r\n        p_warning         : detail_warning.getValue() === true ? 'Y' : 'N',\r\n        p_rain            : rain,\r\n      },\r\n      errSeq: 0\r\n    })\r\n\r\n    let result = await getSp_Oracle_YK(\r\n      param\r\n    ); \r\n\r\n    if(result.data.result !== 'OK'){\r\n      alert('검수등록중 오류가 발생했습니다. > ' + result.data.result);\r\n      gfc_hideMask();\r\n    }else{\r\n\r\n      getDynamicSql_Mysql(scaleNumb, (detail_subt.getValue() === null || detail_subt.getValue() === undefined || detail_subt.getValue() === '') ? 0 : detail_subt.getValue()).then(e => {\r\n        console.log(e)\r\n        \r\n        const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === 'INSP_PROC');\r\n        pgm[0].Retrieve();\r\n    \r\n        gfc_hideMask();\r\n      });\r\n    }\r\n\r\n    //#endregion\r\n  }\r\n\r\n  useEffect(() => {\r\n    getRain();\r\n\r\n    //1분에 한번씩 강수량 체크한다.\r\n    const interval = setInterval(() => {\r\n      getRain();\r\n    }, 60000 * 1);\r\n\r\n    return() => {\r\n      clearInterval(interval);\r\n    }\r\n\r\n  }, [])\r\n  //#endregion\r\n\r\n  //#region 계량표저장\r\n  // const onScaleChit = async() => {\r\n  //   const img = document.getElementById(`content2_${props.pgm}`);\r\n  //   const scaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'CHIT_INFO');\r\n\r\n  //   if(scaleNumb.scaleNumb === ''){\r\n  //     alert('선택된 배차정보가 없습니다.');\r\n  //     return;\r\n  //   }\r\n\r\n  //   gfc_showMask();\r\n\r\n  //   const memo = gfs_getStoreValue('INSP_PROC_MAIN', 'CHIT_MEMO').trim();\r\n  //   if(memo.length === 0){\r\n  //     if(window.confirm('계량표의 내용이 없습니다. 저장하시겠습니까?') === false){\r\n  //       gfc_hideMask();\r\n  //       return;\r\n  //     }\r\n  //   }\r\n\r\n  //   //다른쪽에서 저장된 계량표가 있는지 한번더 확인한다.\r\n  //   const chitYn = await gfc_chit_yn_YK(scaleNumb.scaleNumb);\r\n  //   if(chitYn.data !== 'N'){\r\n  //     alert('이미처리된 계량표 입니다. 재조회 후 확인바랍니다.');\r\n  //     gfc_hideMask();\r\n  //     return;\r\n  //   }\r\n\r\n  //   const result = await gfc_screenshot_srv_YK(img, scaleNumb.scaleNumb);\r\n    \r\n  //   if(result.data === 'Y'){\r\n  //     const chitYn = await gfc_chit_yn_YK(scaleNumb.scaleNumb);\r\n  //     gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n  //       chit     : chitYn.data\r\n  //     });\r\n  //   }else{\r\n  //     alert('계량표 저장에 실패 했습니다.')\r\n  //   }\r\n    \r\n  //   gfc_hideMask();\r\n  // }\r\n  //#endregion\r\n\r\n  return (\r\n    <div className='complete_btn'>\r\n      <button type='button' id={`btn1_${props.pgm}`} onClick={e => onProcess()} className='on'><span>등록완료</span></button>\r\n      {/* <button type='button' id={`btn2_${props.pgm}`} onClick={e => onProcess()}><span>등록완료</span></button> */}\r\n      <button style={{display: value.chit !== false && 'none' }} type='button' id={`btn2_${props.pgm}`} onClick={e => onProcess()}><span>등록완료</span></button>\r\n      <button style={{display:'none'}} id={`btn3_${props.pgm}`}></button>\r\n      <button style={{display:'none'}} id={`btn4_${props.pgm}`}></button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompleteBtn;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\Botspan.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RecImage.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RecTimer.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\INSP_PROC.js",["694","695","696","697"],"//#region import\r\nimport React, { Component } from 'react';\r\nimport Input from '../../../Component/Control/Input';\r\nimport Checkbox from '../../../Component/Control/Checkbox';\r\n\r\nimport { gfc_initPgm, gfc_sleep, gfc_showMask, gfc_yk_call_sp, gfc_hideMask, gfc_chit_yn_YK, gfc_ftp_file_yn_YK } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue, gfs_injectAsyncReducer, gfs_dispatch, gfs_subscribe, gfs_PGM_REDUCER } from '../../../Method/Store';\r\nimport { gfo_getCombo, gfo_getInput, gfo_getCheckbox } from '../../../Method/Component';\r\nimport { gfg_appendRow, gfg_getGrid, gfg_setSelectRow } from '../../../Method/Grid';\r\nimport { getDynamicSql_Oracle, getSp_Oracle } from '../../../db/Oracle/Oracle';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport Layout from '../../../Component/Layout/Layout';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Image as columnImage } from '../../../Component/Grid/Column/Image';\r\nimport { Combobox as columnCombobox }  from '../../../Component/Grid/Column/Combobox';\r\nimport { TextArea as columnTextArea } from '../../../Component/Grid/Column/TextArea';\r\nimport { DateTime as columnDateTime } from '../../../Component/Grid/Column/DateTime';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\nimport Mainspan from '../Common/Mainspan';\r\nimport Detailspan from '../Common/Detailspan';\r\nimport Botspan from '../Common/Botspan';\r\nimport Chit from '../Common/Chit/Chit';\r\nimport CompleteBtn from './CompleteBtn';\r\nimport TabList from '../Common/TabList';\r\nimport DispInfo from './DispInfo';\r\nimport DispImg from './DispImg';\r\nimport RecImage from './RecImage';\r\nimport RainInfo from './RainInfo';\r\n\r\nimport GifPlayer from 'react-gif-player';\r\n\r\nimport { ReRec, RecodingList } from '../../../WebReq/WebReq';\r\nimport { TOKEN, MILESTONE } from '../../../WebReq/WebReq';\r\nimport { throttle } from 'lodash';\r\nimport { setSessionCookie } from '../../../Cookies';\r\nimport { getDynamicSql_Mysql } from '../../../db/Mysql/Mysql';\r\n//#endregion\r\n\r\nclass INSP_PROC extends Component {\r\n\r\n  state = {\r\n    wait_list: [],\r\n    device: []\r\n  }\r\n\r\n  milestoneInfo = async() => {\r\n\r\n    // 선택된 공정의 카메라를 찾아서 스트리밍 받는다\r\n    // 지금은 하드코딩 되어있지만 나중엔 로컬스토리지와 콤보박스를 써서 선택된 공정의 아이피를 가지고 카메라를 가져온다.\r\n    // 1. 선택된 공정의 카메라 정보를 가지고온다.\r\n    // const milestone = TOKEN({reqAddr: 'LOGIN', MilestoneIP: gfs_getStoreValue('CAMERA_REDUCER', 'MilestoneIP')});\r\n    const milestone = await TOKEN({});\r\n    this.token  = milestone.data.TOKEN;\r\n    this.device = milestone.data.DEVICE;\r\n    if(this.token === ''){\r\n      alert('마일스톤 서버에 접속할 수 없습니다.'); \r\n    }else if(this.device === ''){\r\n      alert('마일스톤 서버에 접속할 수 없습니다.');\r\n    }else{\r\n      const areaTp = gfs_getStoreValue('USER_REDUCER', 'AREA_TP');\r\n      const select = await this.callOracle('Common/Common', 'ZM_IMS_CAMERA_SELECT_EACH', [{AREA_TP:areaTp}]);\r\n      if(select.data === undefined){\r\n        alert('설정된 카메라가 없습니다.');\r\n        return;\r\n      }\r\n\r\n      if(select.data.rows.length === 0){\r\n        alert('설정된 카메라가 없습니다.');\r\n        return;\r\n      }\r\n      let data = [];\r\n      for(let i = 0; i < select.data.rows.length; i++){\r\n  \r\n        let col = {};\r\n        for(let j = 0; j < select.data.rows[i].length; j++){\r\n          col[select.data.metaData[j].name] = select.data.rows[i][j];\r\n        }\r\n        data.push(col);\r\n      }\r\n\r\n      let ipArr = [];\r\n      let cameraPort = [];\r\n      let cameraNam = [];\r\n      let rtspAddr = [];\r\n\r\n      for(let i = 0; i < data.length; i++){\r\n        ipArr.push(data[i].CAMERA_IP);\r\n        cameraPort.push(data[i].CAMERA_PORT);\r\n        cameraNam.push(data[i].CAMERA_NAM);\r\n        rtspAddr.push(data[i].RTSP_ADDR);\r\n      }\r\n\r\n      // let ipArr = ['10.10.136.112', '10.10.136.128'];\r\n      // let rtspUrl = ['rtsp://admin:admin13579@10.10.136.112:554/profile2/media.smp', 'rtsp://admin:pass@10.10.136.128:554/video1'];\r\n      // let rtspPort = [3100, 3101];\r\n      this.infoArr = [];\r\n\r\n      for(let i = 0; i < ipArr.length; i++){\r\n        const camera = this.device.find(e1 => e1.Name.indexOf(ipArr[i]) >= 0);\r\n        if(camera){\r\n          this.infoArr.push({\r\n            camera, \r\n            ipArr: ipArr[i], \r\n            cameraPort: cameraPort[i], \r\n            cameraNam: cameraNam[i], \r\n            rtspAddr: rtspAddr[i]\r\n          }); \r\n        }\r\n      }\r\n\r\n      if(this.infoArr.length > 0){\r\n        // this.setState(this.state.device = this.infoArr);\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DEVICE', {DEVICE: this.infoArr});\r\n      }\r\n    }\r\n  }\r\n\r\n  //#region onActivePage 스토어 subscribe로 실행됨.\r\n  onActivePage = () => {\r\n    const activeWindow = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'activeWindow');\r\n    if(activeWindow.programId === 'INSP_PROC'){\r\n      window.onkeydown = e => this.onKeyDown(e);\r\n      window.onmousewheel = e => this.onMouseWheel(e);\r\n    }\r\n  }\r\n\r\n  onCameraChange = () => {\r\n    const cameraDevice = gfs_getStoreValue('INSP_PROC_MAIN', 'DEVICE');\r\n    if(cameraDevice !== undefined){\r\n      if(cameraDevice === 0) return;\r\n\r\n      if(JSON.stringify(cameraDevice) !== JSON.stringify(this.state.device)){\r\n        this.setState({\r\n          device: cameraDevice\r\n        });\r\n      }\r\n    } \r\n  }\r\n  //#endregion\r\n\r\n  //#region PTZ\r\n  debounceKeyDown = throttle((e, device) => {\r\n    let ptz = '';\r\n    if(e.keyCode === 37) ptz = 'left';\r\n    else if(e.keyCode === 38) ptz = 'up';\r\n    else if(e.keyCode === 39) ptz = 'right';\r\n    else if(e.keyCode === 40) ptz = 'down';\r\n\r\n    if(ptz !== ''){\r\n      MILESTONE({reqAddr: 'PTZ',\r\n      device: device.Guid,\r\n      ptz})\r\n    }\r\n  }, 1000);\r\n\r\n  // debounceMouseWheel = throttle((e, device) => {\r\n  //   let ptz = '';\r\n  //   if(e.deltaX === -0){\r\n  //     if (e.wheelDelta > 0){\r\n  //       ptz = 'zoomin';\r\n  //     }else{\r\n  //       ptz = 'zoomout';\r\n  //     }\r\n  //   }\r\n\r\n  //   if(ptz !== ''){\r\n  //     MILESTONE({reqAddr: 'PTZ',\r\n  //     device: device.Guid,\r\n  //     ptz})\r\n  //   }\r\n  // }, 1000);\r\n\r\n\r\n  // debounceKeyDown = (e, device) => {\r\n  //   let ptz = '';\r\n  //   if(e.keyCode === 37) ptz = 'left';\r\n  //   else if(e.keyCode === 38) ptz = 'up';\r\n  //   else if(e.keyCode === 39) ptz = 'right';\r\n  //   else if(e.keyCode === 40) ptz = 'down';\r\n\r\n  //   if(ptz !== ''){\r\n  //     MILESTONE({reqAddr: 'PTZ',\r\n  //     device: device.Guid,\r\n  //     ptz})\r\n  //   }\r\n  // };\r\n\r\n  debounceMouseWheel = (e, device) => {\r\n    let ptz = '';\r\n    if(e.deltaX === -0){\r\n      if (e.wheelDelta > 0){\r\n        ptz = 'zoomin';\r\n      }else{\r\n        ptz = 'zoomout';\r\n      }\r\n    }\r\n\r\n    if(ptz !== ''){\r\n      MILESTONE({reqAddr: 'PTZ',\r\n      device: device.Guid,\r\n      ptz})\r\n    }\r\n  };\r\n\r\n  onKeyDown = (e) => {\r\n    e.stopPropagation();\r\n\r\n    const STD_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'STD_CAM_FOCUS');\r\n    const DUM_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'DUM_CAM_FOCUS');\r\n    \r\n    if(STD_CAM_FOCUS || DUM_CAM_FOCUS){\r\n      this.debounceKeyDown(e, STD_CAM_FOCUS ? this.infoArr[0].camera : this.infoArr[1].camera);\r\n    }\r\n  }\r\n\r\n  onMouseWheel = (e) => {\r\n    e.stopPropagation();\r\n\r\n    const STD_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'STD_CAM_FOCUS');\r\n    const DUM_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'DUM_CAM_FOCUS');\r\n\r\n    if(STD_CAM_FOCUS || DUM_CAM_FOCUS){\r\n      this.debounceMouseWheel(e, STD_CAM_FOCUS ? this.infoArr[0].camera : this.infoArr[1].camera);\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region 녹화제어\r\n  startRec = async () => {\r\n    \r\n    const scaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n    const camera_no = gfs_getStoreValue('USER_REDUCER', 'CAMERA_NO');\r\n    if(scaleNumb === ''){\r\n      alert('선택된 계근번호가 없습니다.');\r\n      return;\r\n    }\r\n    if(camera_no === '' || camera_no === null){\r\n      alert('설정된 차량인식 카메라가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    //기존저장된 파일있는지 확인.\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_REC(\r\n                  :p_RowStatus,\r\n                  :p_scaleNumb,\r\n                  :p_seq,\r\n                  :p_cameraNo,\r\n                  :p_cameraDevice,\r\n                  :p_cameraName,\r\n                  :p_UserId,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_RowStatus    : 'R2',\r\n        p_scaleNumb    : scaleNumb,\r\n        p_seq          : 0,\r\n        p_cameraNo     : '',\r\n        p_cameraDevice : '',\r\n        p_cameraName   : '',\r\n        p_UserId       : ''\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS === 'N'){\r\n      if(result.data.MSG_CODE === '1'){\r\n        if(window.confirm(result.data.MSG_TEXT) === true){\r\n          const recYn = await ReRec(scaleNumb);\r\n          //0. 파일명은 변경된 상태\r\n          if(recYn.data.Response === 'OK'){\r\n            //1. DB에 녹화시작으로 저장\r\n            let param = [];\r\n            param.push({\r\n              sp   : `begin \r\n                        SP_ZM_IMS_REC(\r\n                          :p_RowStatus,\r\n                          :p_scaleNumb,\r\n                          :p_seq,\r\n                          :p_cameraNo,\r\n                          :p_cameraDevice,\r\n                          :p_cameraName,\r\n                          :p_UserId,\r\n                          \r\n                          :p_select,\r\n                          :p_SUCCESS,\r\n                          :p_MSG_CODE,\r\n                          :p_MSG_TEXT,\r\n                          :p_COL_NAM\r\n                        );\r\n                      end;\r\n                      `,\r\n              data : {\r\n                p_RowStatus    : 'I2',\r\n                p_scaleNumb    : scaleNumb,\r\n                p_seq          : 0,\r\n                p_cameraNo     : camera_no,\r\n                p_cameraDevice : '',\r\n                p_cameraName   : '',\r\n                p_UserId       : ''\r\n              },\r\n              errSeq: 0\r\n            })\r\n            \r\n            const result = await getSp_Oracle(param);\r\n\r\n            if(result.data.SUCCESS === 'N'){\r\n              alert('수동녹화 시작에 실패했습니다.');\r\n            }\r\n          }\r\n        }else{\r\n          return;\r\n        }\r\n      }else{\r\n        if(window.confirm(result.data.MSG_TEXT) === true){\r\n          //1. DB에 녹화시작으로 저장\r\n          let param = [];\r\n          param.push({\r\n            sp   : `begin \r\n                      SP_ZM_IMS_REC(\r\n                        :p_RowStatus,\r\n                        :p_scaleNumb,\r\n                        :p_seq,\r\n                        :p_cameraNo,\r\n                        :p_cameraDevice,\r\n                        :p_cameraName,\r\n                        :p_UserId,\r\n                        \r\n                        :p_select,\r\n                        :p_SUCCESS,\r\n                        :p_MSG_CODE,\r\n                        :p_MSG_TEXT,\r\n                        :p_COL_NAM\r\n                      );\r\n                    end;\r\n                    `,\r\n            data : {\r\n              p_RowStatus    : 'I3',\r\n              p_scaleNumb    : scaleNumb,\r\n              p_seq          : 0,\r\n              p_cameraNo     : camera_no,\r\n              p_cameraDevice : '',\r\n              p_cameraName   : '',\r\n              p_UserId       : ''\r\n            },\r\n            errSeq: 0\r\n          })\r\n          \r\n          const result = await getSp_Oracle(param);\r\n\r\n          if(result.data.SUCCESS === 'N'){\r\n            alert('수동녹화 시작에 실패했습니다.');\r\n          }\r\n        }else{\r\n          return;\r\n        }\r\n      }\r\n    }else{\r\n        //1. DB에 녹화시작으로 저장\r\n        let param = [];\r\n        param.push({\r\n          sp   : `begin \r\n                    SP_ZM_IMS_REC(\r\n                      :p_RowStatus,\r\n                      :p_scaleNumb,\r\n                      :p_seq,\r\n                      :p_cameraNo,\r\n                      :p_cameraDevice,\r\n                      :p_cameraName,\r\n                      :p_UserId,\r\n                      \r\n                      :p_select,\r\n                      :p_SUCCESS,\r\n                      :p_MSG_CODE,\r\n                      :p_MSG_TEXT,\r\n                      :p_COL_NAM\r\n                    );\r\n                  end;\r\n                  `,\r\n          data : {\r\n            p_RowStatus    : 'I2',\r\n            p_scaleNumb    : scaleNumb,\r\n            p_seq          : 0,\r\n            p_cameraNo     : camera_no,\r\n            p_cameraDevice : '',\r\n            p_cameraName   : '',\r\n            p_UserId       : ''\r\n          },\r\n          errSeq: 0\r\n        })\r\n        \r\n        const result = await getSp_Oracle(param);\r\n\r\n        if(result.data.SUCCESS === 'N'){\r\n          alert('수동녹화 시작에 실패했습니다.');\r\n        }\r\n    }\r\n  }\r\n\r\n  stopRec = async () => {\r\n    const scaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n    const camera_no = gfs_getStoreValue('USER_REDUCER', 'CAMERA_NO');\r\n    if(scaleNumb === ''){\r\n      alert('선택된 계근번호가 없습니다.');\r\n      return;\r\n    }\r\n    if(camera_no === '' || camera_no === null){\r\n      alert('설정된 차량인식 카메라가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    //기존저장된 파일있는지 확인.\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_REC(\r\n                  :p_RowStatus,\r\n                  :p_scaleNumb,\r\n                  :p_seq,\r\n                  :p_cameraNo,\r\n                  :p_cameraDevice,\r\n                  :p_cameraName,\r\n                  :p_UserId,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_RowStatus    : 'R4',\r\n        p_scaleNumb    : scaleNumb,\r\n        p_seq          : 0,\r\n        p_cameraNo     : '',\r\n        p_cameraDevice : '',\r\n        p_cameraName   : '',\r\n        p_UserId       : ''\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS === 'N'){\r\n      alert('녹화중인 계량번호가 아닙니다.');\r\n      return;\r\n    }else{\r\n\r\n      let param = [];\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_REC(\r\n                    :p_RowStatus,\r\n                    :p_scaleNumb,\r\n                    :p_seq,\r\n                    :p_cameraNo,\r\n                    :p_cameraDevice,\r\n                    :p_cameraName,\r\n                    :p_UserId,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_RowStatus    : 'D3',\r\n          p_scaleNumb    : scaleNumb,\r\n          p_seq          : 0,\r\n          p_cameraNo     : '',\r\n          p_cameraDevice : '',\r\n          p_cameraName   : '',\r\n          p_UserId       : ''\r\n        },\r\n        errSeq: 0\r\n      })\r\n      \r\n      const result = await getSp_Oracle(param);\r\n\r\n      if(result.data.SUCCESS === 'N'){\r\n        alert('수동녹화 중지에 실패했습니다.');\r\n      }\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this);\r\n\r\n    //#region 리듀서\r\n    const INSP_PROC_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'INSP_PROC_MAIN') {\r\n        return {\r\n          ON_ACTIVE    : nowState === undefined ? {\r\n            active : true,\r\n            time   : new Date() \r\n          } : nowState.ON_ACTIVE,\r\n\r\n          DEVICE       : nowState === undefined ? 0 : nowState.DEVICE,\r\n\r\n          RAIN_INFO    : nowState === undefined ? 0 : nowState.RAIN_INFO,\r\n\r\n          MAIN_WAIT    : nowState === undefined ? 0 : nowState.MAIN_WAIT,\r\n          MAIN_TOTAL   : nowState === undefined ? 0 : nowState.MAIN_TOTAL,\r\n          MAIN_WEIGHT  : nowState === undefined ? 0 : nowState.MAIN_WEIGHT,\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n          PROC_WAIT    : nowState === undefined ? 0 : nowState.PROC_WAIT,\r\n          DEPT_WAIT    : nowState === undefined ? 0 : nowState.DEPT_WAIT,\r\n          ENTR_WAIT    : nowState === undefined ? 0 : nowState.ENTR_WAIT,\r\n          DRIV_WAIT    : nowState === undefined ? 0 : nowState.DRIV_WAIT,\r\n          CAR_TOTAL    : nowState === undefined ? 0 : nowState.CAR_TOTAL,\r\n          \r\n          DETAIL_SCALE : nowState === undefined ? '' : nowState.DETAIL_SCALE,\r\n          DETAIL_CARNO : nowState === undefined ? '' : nowState.DETAIL_CARNO,\r\n          DETAIL_WEIGHT: nowState === undefined ? '' : nowState.DETAIL_WEIGHT,\r\n          DETAIL_DATE  : nowState === undefined ? '' : nowState.DETAIL_DATE,\r\n\r\n          STD_CAM_IMG  : nowState === undefined ? null : nowState.STD_CAM_IMG,\r\n          DUM_CAM_IMG  : nowState === undefined ? null : nowState.DUM_CAM_IMG,\r\n          ETC1_CAM_IMG : nowState === undefined ? false : nowState.ETC1_CAM_IMG,\r\n          ETC2_CAM_IMG : nowState === undefined ? false : nowState.ETC2_CAM_IMG,\r\n\r\n          STD_CAM_OPEN : nowState === undefined ? false : nowState.STD_CAM_OPEN,\r\n          DUM_CAM_OPEN : nowState === undefined ? false : nowState.DUM_CAM_OPEN,\r\n          ETC1_CAM_OPEN : nowState === undefined ? false : nowState.ETC1_CAM_OPEN,\r\n          ETC2_CAM_OPEN : nowState === undefined ? false : nowState.ETC2_CAM_OPEN,\r\n\r\n          STD_CAM_FOCUS: nowState === undefined ? false : nowState.STD_CAM_FOCUS,\r\n          DUM_CAM_FOCUS: nowState === undefined ? false : nowState.DUM_CAM_FOCUS,\r\n          ETC1_CAM_FOCUS : nowState === undefined ? false : nowState.ETC1_CAM_FOCUS,\r\n          ETC2_CAM_FOCUS : nowState === undefined ? false : nowState.ETC2_CAM_FOCUS,\r\n\r\n          STD_CAM_REC  : nowState === undefined ? {\r\n            rec     : false,\r\n            time    : '00:00'\r\n          } : nowState.STD_CAM_REC,\r\n\r\n          DUM_CAM_REC  : nowState === undefined ? {\r\n            rec     : false,\r\n            time    : '00:00'\r\n          } : nowState.DUM_CAM_REC,\r\n\r\n          CHIT_MEMO    : nowState === undefined ? '' : nowState.CHIT_MEMO,\r\n          \r\n          CHIT_INFO    : nowState === undefined ? {\r\n            date     : '',\r\n            scaleNumb: '',\r\n            carNumb  : '',\r\n            vender   : '',\r\n            itemFlag : '',\r\n            Wgt      : '',\r\n            loc      : '',\r\n            user     : '',\r\n            chit     : 'N'\r\n          } : nowState.CHIT_INFO,\r\n          \r\n          DISP_INFO    : nowState === undefined ? {\r\n            scaleNumb       : '',\r\n            scrp_ord_no     : '',\r\n            scrp_grd_nm     : '',\r\n            real_vender_name: '',\r\n            load_area_nm    : '',\r\n            load_area_addr  : ''\r\n          } : nowState.DISP_INFO,\r\n\r\n          DISP_PIC    : nowState === undefined ? {\r\n            scaleNumb           : '',\r\n            scrp_ord_no         : '',\r\n            empty_front_date    : '',\r\n            empty_front         : '',\r\n            empty_front_gps_addr: '',\r\n            empty_rear_date     : '',\r\n            empty_rear          : '',\r\n            empty_rear_gps_addr : '',\r\n            cargo_front_date    : '',\r\n            cargo_front         : '',\r\n            cargo_front_gps_addr: '',\r\n            cargo_rear_date     : '',\r\n            cargo_rear          : '',\r\n            cargo_rear_gps_addr : ''\r\n          } : nowState.DISP_PIC\r\n        };\r\n      }\r\n\r\n      if(action.type === 'DEVICE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEVICE : action.DEVICE\r\n        })\r\n      }else if(action.type === 'RAIN_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          RAIN_INFO : action.RAIN_INFO\r\n        })\r\n      }else if(action.type === 'CAR_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CAR_TOTAL : action.CAR_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WAIT : action.MAIN_WAIT\r\n        })\r\n      }else if(action.type === 'DRIV_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DRIV_WAIT : action.DRIV_WAIT\r\n        })\r\n      }else if(action.type === 'MAIN_TOTAL'){\r\n        \r\n        return Object.assign({}, nowState, {\r\n          MAIN_TOTAL : action.MAIN_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WEIGHT : action.MAIN_WEIGHT\r\n        })\r\n      }else if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }else if(action.type === 'PROC_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          PROC_WAIT : action.PROC_WAIT\r\n        })\r\n      }else if(action.type === 'DEPT_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEPT_WAIT : action.DEPT_WAIT\r\n        })\r\n      }else if(action.type === 'ENTR_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ENTR_WAIT : action.ENTR_WAIT\r\n        })\r\n      }else if(action.type === 'DETAIL_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_SCALE : action.DETAIL_SCALE\r\n        })\r\n      }else if(action.type === 'DETAIL_CARNO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_CARNO : action.DETAIL_CARNO\r\n        })\r\n      }else if(action.type === 'DETAIL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_WEIGHT : action.DETAIL_WEIGHT\r\n        })\r\n      }else if(action.type === 'DETAIL_DATE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_DATE : action.DETAIL_DATE\r\n        })\r\n      }else if(action.type === 'STD_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_IMG : action.STD_CAM_IMG\r\n        })\r\n      }else if(action.type === 'DUM_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_IMG : action.DUM_CAM_IMG\r\n        })\r\n      }else if(action.type === 'ETC1_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC1_CAM_IMG : action.ETC1_CAM_IMG\r\n        })\r\n      }else if(action.type === 'ETC2_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC2_CAM_IMG : action.ETC2_CAM_IMG\r\n        })\r\n      }else if(action.type === 'STD_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_OPEN : action.STD_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'DUM_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_OPEN : action.DUM_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'ETC1_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC1_CAM_OPEN : action.ETC1_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'ETC2_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC2_CAM_OPEN : action.ETC2_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'STD_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_FOCUS : action.STD_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'DUM_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_FOCUS : action.DUM_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'ETC1_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC1_CAM_FOCUS : action.ETC1_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'ETC2_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC2_CAM_FOCUS : action.ETC2_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.STD_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.DUM_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec     : nowState.STD_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec     : nowState.DUM_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }\r\n      // else if(action.type === 'CHIT_INFO_ITEM_FLAG'){\r\n\r\n      //   return Object.assign({}, nowState, {\r\n      //     CHIT_INFO : {\r\n      //       date     :  nowState.CHIT_INFO.date,\r\n      //       scaleNumb:  nowState.CHIT_INFO.scaleNumb,\r\n      //       carNumb  :  nowState.CHIT_INFO.carNumb,\r\n      //       vender   :  nowState.CHIT_INFO.vender,\r\n      //       itemFlag :  action.itemFlag,\r\n      //       Wgt      :  nowState.CHIT_INFO.Wgt,\r\n      //       loc      :  nowState.CHIT_INFO.loc,\r\n      //       user     :  nowState.CHIT_INFO.user,\r\n      //       chit     :  nowState.CHIT_INFO.chit\r\n      //     }\r\n      //   })\r\n      // }\r\n      else if(action.type === 'CHIT_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     : action.date,\r\n            scaleNumb: action.scaleNumb,\r\n            carNumb  : action.carNumb,\r\n            vender   : action.vender,\r\n            itemFlag : action.itemFlag,\r\n            Wgt      : action.Wgt,\r\n            loc      : action.loc,\r\n            user     : action.user,\r\n            chit     : action.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_MEMO'){\r\n        return Object.assign({}, nowState, {\r\n          CHIT_MEMO : action.CHIT_MEMO\r\n        })\r\n      }else if(action.type === 'DISP_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DISP_INFO : {\r\n            scaleNumb       : action.scaleNumb,\r\n            scrp_ord_no     : action.scrp_ord_no,\r\n            scrp_grd_nm     : action.scrp_grd_nm,\r\n            real_vender_name: action.real_vender_name,\r\n            load_area_nm    : action.load_area_nm,\r\n            load_area_addr  : action.load_area_addr  \r\n          }\r\n        })\r\n      }else if(action.type === 'DISP_PIC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DISP_PIC : {\r\n            scaleNumb           : action.scaleNumb,\r\n            scrp_ord_no         : action.scrp_ord_no,\r\n            empty_front_date    : action.empty_front_date,\r\n            empty_front         : action.empty_front,\r\n            empty_front_gps_addr: action.empty_front_gps_addr,\r\n            empty_rear_date     : action.empty_rear_date,\r\n            empty_rear          : action.empty_rear,\r\n            empty_rear_gps_addr : action.empty_rear_gps_addr,\r\n            cargo_front_date    : action.cargo_front_date,\r\n            cargo_front         : action.cargo_front,\r\n            cargo_front_gps_addr: action.cargo_front_gps_addr,\r\n            cargo_rear_date     : action.cargo_rear_date,\r\n            cargo_rear          : action.cargo_rear,\r\n            cargo_rear_gps_addr : action.cargo_rear_gps_addr \r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('INSP_PROC_MAIN', INSP_PROC_MAIN);\r\n    gfs_subscribe(this.onActivePage);\r\n    gfs_subscribe(this.onCameraChange);\r\n    //#endregion\r\n  }\r\n\r\n  callOracle = async(file, fn, param) => {\r\n    let result = await getDynamicSql_Oracle(\r\n      file,\r\n      fn,\r\n      param\r\n    ); \r\n\r\n    return result;\r\n  }\r\n\r\n  Init = async() => {\r\n    await this.milestoneInfo();\r\n  }\r\n\r\n  //#region 개별조회\r\n  mainHeader = async() => {\r\n  \r\n    // const select = await gfc_yk_call_sp('sp_zm_mstr_header');\r\n    const select = await gfc_yk_call_sp('sp_zm_mstr_header');\r\n\r\n    if(select.data.SUCCESS === 'Y'){\r\n      const R_CARSU = select.data.ROWS[0].R_CARSU === null ? 0 : select.data.ROWS[0].R_CARSU;\r\n      const E_CARSU = select.data.ROWS[0].E_CARSU === null ? 0 : select.data.ROWS[0].E_CARSU;\r\n      const E_KG = select.data.ROWS[0].E_KG === null ? 0 : select.data.ROWS[0].E_KG;\r\n      const CAR_TOTAL = select.data.ROWS[0].CAR_TOTAL === null ? 0 : select.data.ROWS[0].CAR_TOTAL;\r\n\r\n      if(R_CARSU !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WAIT', {MAIN_WAIT: R_CARSU});\r\n\r\n      if(E_CARSU !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_TOTAL'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_TOTAL', {MAIN_TOTAL: E_CARSU});\r\n\r\n      if(E_KG !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WEIGHT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WEIGHT', {MAIN_WEIGHT: E_KG});\r\n\r\n      if(CAR_TOTAL !== gfs_getStoreValue('INSP_PROC_MAIN', 'CAR_TOTAL'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'CAR_TOTAL', {CAR_TOTAL: CAR_TOTAL});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WAIT', {MAIN_WAIT: 0});\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_TOTAL') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_TOTAL', {MAIN_TOTAL: 0});\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WEIGHT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WEIGHT', {MAIN_WEIGHT: 0});\r\n        if(gfs_getStoreValue('INSP_PROC_MAIN', 'CAR_TOTAL') !== 0)\r\n          gfs_dispatch('INSP_PROC_MAIN', 'CAR_TOTAL', {CAR_TOTAL: 0});\r\n    }\r\n  }\r\n\r\n  mainHeader2 = async() => {\r\n    //출차대기\r\n    // const select = await gfc_yk_call_sp('sp_zm_mstr_pass');\r\n    const select = await gfc_yk_call_sp('sp_zm_mstr_pass');\r\n\r\n    if(select.data.SUCCESS === 'Y'){\r\n      if(select.data.ROWS.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'DEPT_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DEPT_WAIT', {DEPT_WAIT: select.data.ROWS.length});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'DEPT_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DEPT_WAIT', {DEPT_WAIT: 0});\r\n    }\r\n\r\n    //입차대기\r\n    // const select2 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE');\r\n    const select2 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE');\r\n\r\n    if(select2.data.SUCCESS === 'Y'){\r\n      if(select2.data.ROWS.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'ENTR_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'ENTR_WAIT', {ENTR_WAIT: select2.data.ROWS.length});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'ENTR_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'ENTR_WAIT', {ENTR_WAIT: 0});\r\n    }\r\n\r\n    // //운송대기\r\n    // const select3 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE_WAIT');\r\n    const select3 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE_WAIT');\r\n\r\n    if(select3.data.SUCCESS === 'Y'){\r\n      if(select3.data.ROWS.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'DRIV_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DRIV_WAIT', {DRIV_WAIT: select3.data.ROWS.length});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'DRIV_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DRIV_WAIT', {DRIV_WAIT: 0});\r\n    }\r\n  }\r\n\r\n  mainGrid = async() => {\r\n    try{\r\n      const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n      // await grid.restore();\r\n  \r\n      // //김경현\r\n      // gfg_appendRow(grid, grid.getRowCount(), {\r\n      //   scaleNumb: '202110140010',\r\n      //   carNumb: 'data[i].carNumb',\r\n      //   itemGrade: 'data[i].itemGrade',\r\n      //   date: 'data[i].date',\r\n      //   vendor: 'data[i].vendor',\r\n      //   rec: '0'\r\n      // }, 'scaleNumb', false);\r\n      //   if(grid.getData().length !== gfs_getStoreValue('INSP_PROC_MAIN', 'PROC_WAIT'))\r\n      //     gfs_dispatch('INSP_PROC_MAIN', 'PROC_WAIT', {PROC_WAIT: grid.getData().length});\r\n  \r\n  \r\n  \r\n  \r\n      const select = await gfc_yk_call_sp('SP_ZM_MSTR_WAIT');\r\n      if(select.data.SUCCESS === 'Y'){\r\n        const main = select.data.ROWS;\r\n          \r\n        if(main.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'PROC_WAIT'))\r\n          gfs_dispatch('INSP_PROC_MAIN', 'PROC_WAIT', {PROC_WAIT: main.length});\r\n  \r\n        const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n        const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n    \r\n        const dataMod = [];\r\n        main.forEach(e => {\r\n          dataMod.push({\r\n            scaleNumb: e['DELIVERY_ID'].toString(),\r\n            carNumb: e['VEHICLE_NO'],\r\n            itemGrade: e['ITEM_GRADE'],\r\n            date: e['CREATION_DATE'],\r\n            vendor: e['VENDOR_NAME'],\r\n            warning: e['WARNING'],\r\n            carType: e['CAR_TYPE']\r\n          })\r\n        })\r\n  \r\n        let data = dataMod.filter(e => {\r\n          if(search_tp !== null && search_tp !== ''){\r\n            //계근번호\r\n            if(search_tp === '1'){\r\n              if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //차량번호\r\n            else if(search_tp === '2'){\r\n              if(e.carNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //사전등급\r\n            else if(search_tp === '3'){\r\n              if(e.itemGrade.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //업체\r\n            else if(search_tp === '4'){\r\n              if(e.vendor.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            \r\n          }else{\r\n            return true;\r\n          }\r\n        })\r\n  \r\n        if(data.length > 0){\r\n          \r\n          //기존 그리드에서 scaleNumb기준으로 데이터가 없으면 추가한다.\r\n          for(let i = 0; i < data.length; i++){\r\n            const scaleNumb = data[i].scaleNumb;\r\n  \r\n            const oldData = grid.getData().find(e => e.scaleNumb === scaleNumb);\r\n            if(!oldData){\r\n              gfg_appendRow(grid, grid.getRowCount(), {\r\n                scaleNumb,\r\n                carNumb: data[i].carNumb,\r\n                itemGrade: data[i].itemGrade,\r\n                date: data[i].date,\r\n                vendor: data[i].vendor,\r\n                carType: data[i].carType,\r\n                rec: '0'\r\n              }, 'scaleNumb', false);\r\n            }\r\n          }\r\n  \r\n          //새로운 정보 기준으로 데이터가 지워졌으면 삭제한다.\r\n          for(let i = 0; i < grid.getData().length; i++){\r\n            const scaleNumb =  grid.getData()[i].scaleNumb;\r\n  \r\n            const newData = data.find(e => e.scaleNumb === scaleNumb)\r\n            if(!newData){\r\n              grid.removeRow(i);\r\n  \r\n              //지워진 데이터가 기존에 선택된 데이터 이면 초기화 한다.\r\n              const selectScaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n              if(scaleNumb === selectScaleNumb){\r\n                gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n                gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n                gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: '0'});\r\n                gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n              }\r\n            }\r\n          }\r\n          \r\n          grid.resetOriginData();\r\n          grid.restore();\r\n    \r\n          if(data.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'BOT_TOTAL'))\r\n            gfs_dispatch('INSP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n          \r\n          // await grid.resetOriginData();\r\n          // await grid.refreshLayout();\r\n        }\r\n      }else{\r\n        grid.clear();\r\n        if(gfs_getStoreValue('INSP_PROC_MAIN', 'BOT_TOTAL') !== 0)\r\n          gfs_dispatch('INSP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      }\r\n  \r\n      await this.mainHeader();\r\n      await this.mainHeader2();\r\n    }catch(e){\r\n\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  rec = async() => {\r\n\r\n    try{\r\n      RecodingList().then(recScaleNumb => {\r\n        const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n  \r\n        for(let i = 0; i < recScaleNumb.data.Response.length; i++){\r\n  \r\n          const data = grid.getData().find(e => e.scaleNumb === recScaleNumb.data.Response[i])\r\n          if(data){\r\n            //녹화 on만 설정\r\n            grid.setValue(data.rowKey, 'rec', '1');\r\n          }\r\n        }\r\n  \r\n        const recGrid = grid.getData().filter(e => e.rec === '1');\r\n        for(let i = 0; i < recGrid.length; i++){\r\n          const data = recScaleNumb.data.Response.find(e => e === recGrid[i].scaleNumb);\r\n          if(!data){\r\n            //녹화 off만 설정\r\n            grid.setValue(recGrid[i].rowKey, 'rec', '0');\r\n          }\r\n        }\r\n      })\r\n    }catch(e){\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(){\r\n\r\n    this.mainGridInterval = setInterval(e => {\r\n      this.mainGrid();\r\n    }, 20000)\r\n\r\n    this.recInterval = setInterval(e => {\r\n      this.rec();\r\n    }, 1000)\r\n\r\n    this.Retrieve();\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.Init();\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    // clearInterval(this.mainHeaderInterval);\r\n    // clearInterval(this.mainHeaderInterval2);\r\n    clearInterval(this.mainGridInterval);\r\n    clearInterval(this.recInterval);\r\n  }\r\n\r\n  Retrieve = async () => {\r\n    gfc_showMask();\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(''); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue('');      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_ord_no').setValue('');      //배차번호\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_grd_nm').setValue('');      //배차등급\r\n    gfo_getInput(this.props.pgm, 'disp_real_vender_name').setValue(''); //실공급자\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_nm').setValue('');     //실상차지\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_addr').setValue('');   //주소\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n      chit     : false\r\n    });\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DISP_INFO', {\r\n      scaleNumb       : '',\r\n      scrp_ord_no     : '',\r\n      scrp_grd_nm     : '',\r\n      real_vender_name: '',\r\n      load_area_nm    : '',\r\n      load_area_addr  : ''\r\n    });\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DISP_PIC', {\r\n      scaleNumb           : '',\r\n      scrp_ord_no         : '',\r\n  \r\n      empty_front_date    : '',\r\n      empty_front         : '',\r\n      empty_front_gps_addr: '',\r\n      empty_rear_date     : '',\r\n      empty_rear          : '',\r\n      empty_rear_gps_addr : '',\r\n      cargo_front_date    : '',\r\n      cargo_front         : '',\r\n      cargo_front_gps_addr: '',\r\n      cargo_rear_date     : '',\r\n      cargo_rear          : '',\r\n      cargo_rear_gps_addr : ''\r\n    });\r\n\r\n    this.mainGrid();\r\n    // this.mainHeader();\r\n    // this.mainHeader2();\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n  dblclick = async(e) => {\r\n    gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n      ({\r\n        windowZindex: 0,\r\n        activeWindow: {programId:  'INSP_HIST',\r\n                       programNam: '검수이력'\r\n                      }\r\n      })\r\n    );\r\n  }\r\n\r\n  onSelectChange = async (e) => {\r\n    if(e === null) return;\r\n\r\n    // gfc_showMask();\r\n\r\n    document.getElementById('tab1_INSP_PROC').click(0);\r\n    await gfc_sleep(100);\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(e.itemGrade); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue(e.carType);      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_ord_no').setValue('');      //배차번호\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_grd_nm').setValue('');      //배차등급\r\n    gfo_getInput(this.props.pgm, 'disp_real_vender_name').setValue(''); //실공급자\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_nm').setValue('');     //실상차지\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_addr').setValue('');   //주소\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: e.scaleNumb});\r\n    setSessionCookie('DETAIL_SCALE', e.scaleNumb);\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: e.carNumb});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: e.totalWgt});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: e.date});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n      chit     : false\r\n    });\r\n\r\n    //계량증명서 정보여부\r\n    const chitInfoYn = await gfc_yk_call_sp('SP_ZM_CHIT', {\r\n      P_SCALENUMB: e.scaleNumb\r\n    });\r\n\r\n    if(chitInfoYn.data.SUCCESS === 'N'){\r\n      alert('계량증명서 정보가 없습니다.');\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n\r\n    //계량증명서\r\n    const chitYn = await gfc_ftp_file_yn_YK(e.scaleNumb);\r\n    gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n      date     : chitInfoYn.data.ROWS[0].CREATION_DATE,\r\n      scaleNumb: chitInfoYn.data.ROWS[0].DELIVERY_ID.toString(),\r\n      carNumb  : chitInfoYn.data.ROWS[0].VEHICLE_NO,\r\n      vender   : chitInfoYn.data.ROWS[0].VENDOR_NAME,\r\n      itemFlag : e.itemGrade,\r\n      Wgt      : chitInfoYn.data.ROWS[0].TOTAL_WEIGHT,\r\n      loc      : chitInfoYn.data.ROWS[0].AREA,\r\n      user     : gfs_getStoreValue('USER_REDUCER', 'USER_NAM'),\r\n      chit     : chitYn.data\r\n      // chit     : false\r\n    });\r\n\r\n    //배차정보\r\n    const dispInfo = await gfc_yk_call_sp('SP_ZM_PROCESS_F3', {\r\n      P_SCALENUMB: e.scaleNumb\r\n    });\r\n\r\n    if(dispInfo.data.SUCCESS === 'Y'){\r\n      gfs_dispatch('INSP_PROC_MAIN', 'DISP_INFO', {\r\n        scaleNumb       : chitInfoYn.data.ROWS[0].DELIVERY_ID.toString(),\r\n        scrp_ord_no     : dispInfo.data.ROWS[0].SCRP_ORD_NO,\r\n        scrp_grd_nm     : dispInfo.data.ROWS[0].SCRP_GRD_NM,\r\n        real_vender_name: dispInfo.data.ROWS[0].REAL_VENDER_NAME,\r\n        load_area_nm    : dispInfo.data.ROWS[0].LOAD_AREA_NM,\r\n        load_area_addr  : dispInfo.data.ROWS[0].LOAD_AREA_ADDR\r\n      });\r\n\r\n      const scrp_ord_no = dispInfo.data.ROWS[0].SCRP_ORD_NO;\r\n      const yyyy = scrp_ord_no.substr(2, 4);\r\n      const mm = scrp_ord_no.substr(6, 2);\r\n      const dd = scrp_ord_no.substr(8, 2);\r\n\r\n      gfs_dispatch('INSP_PROC_MAIN', 'DISP_PIC', {\r\n        scaleNumb           : chitInfoYn.data.ROWS[0].DELIVERY_ID.toString(),\r\n        scrp_ord_no         : dispInfo.data.ROWS[0].SCRP_ORD_NO,\r\n    \r\n        empty_front_date    : dispInfo.data.ROWS[0].EMPTY_FRONT_DATE,\r\n        empty_front         : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].EMPTY_FRONT}`,\r\n        empty_front_gps_addr: dispInfo.data.ROWS[0].EMPTY_FRONT_GPS_ADDR,\r\n        \r\n        empty_rear_date     : dispInfo.data.ROWS[0].EMPTY_REAR_DATE,\r\n        empty_rear          : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].EMPTY_REAR}`,\r\n        empty_rear_gps_addr : dispInfo.data.ROWS[0].EMPTY_REAR_GPS_ADDR,\r\n        \r\n        cargo_front_date    : dispInfo.data.ROWS[0].CARGO_FRONT_DATE,\r\n        cargo_front         : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].CARGO_FRONT}`,\r\n        cargo_front_gps_addr: dispInfo.data.ROWS[0].CARGO_FRONT_GPS_ADDR,\r\n        \r\n        cargo_rear_date     : dispInfo.data.ROWS[0].CARGO_REAR_DATE,\r\n        cargo_rear          : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].CARGO_REAR}`,\r\n        cargo_rear_gps_addr : dispInfo.data.ROWS[0].CARGO_REAR_GPS_ADDR\r\n      });\r\n    }\r\n    \r\n    // gfc_hideMask();\r\n  }\r\n\r\n  render() {\r\n\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager'>\r\n\r\n          <Layout split       ='vertical'\r\n                  minSize     ={[370]}\r\n                  defaultSize ={1225}\r\n          >\r\n            <div style={{width:'100%'}}>\r\n              <div className='car_list' style={{width:'calc(100% - 365px)',overflow:'hidden'}}>\r\n                <div className='search_line'>\r\n                  <div className='wp'>\r\n                    <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                                id      = 'search_tp'\r\n                                value   = 'code'\r\n                                display = 'name'\r\n                                width   = {124}\r\n                                height  = {42}\r\n                                emptyRow\r\n                                data    = {[{\r\n                                  code: '1',\r\n                                  name: '계근번호'\r\n                                },{\r\n                                  code: '2',\r\n                                  name: '차량번호'\r\n                                },{\r\n                                  code: '3',\r\n                                  name: '사전등급'\r\n                                },{\r\n                                  code: '4',\r\n                                  name: '업체'\r\n                                }]}\r\n                      />\r\n                    </div>\r\n                    <Input pgm         = {this.props.pgm}\r\n                          id          = 'search_txt'\r\n                          height      = '42'\r\n                          placeHolder = '검색어를 입력하세요'\r\n                          paddingLeft = '14'\r\n                          width       = '100%'\r\n                          type        = 'textarea'\r\n                          onKeyDown   = {(e) => {\r\n                            if(e.keyCode === 13){\r\n                              this.Retrieve()\r\n                            }\r\n                          }}\r\n                          //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                            />\r\n                    <button>검색</button>\r\n                  </div>\r\n                </div>\r\n                <div className='grid'>\r\n                  <div className='wp'>\r\n                    <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                      <Grid pgm={this.props.pgm}\r\n                            id ='main10'\r\n                            selectionChange={(e) => this.onSelectChange(e)}\r\n                            dblclick={(e) => this.dblclick(e)}\r\n                            rowHeight={46}\r\n                            rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                            columns={[\r\n                              columnInput({\r\n                                name: 'scaleNumb',\r\n                                header: '계근번호',\r\n                                width : 110,\r\n                                readOnly: true,\r\n                                color : '#0063A9',\r\n                                align : 'center'\r\n                              }),\r\n                              columnInput({\r\n                                name: 'carNumb',\r\n                                header: '차량번호',\r\n                                width : 90,\r\n                                readOnly: true,\r\n                                align : 'center'\r\n                              }),   \r\n                              columnInput({\r\n                                name: 'itemGrade',\r\n                                header: '사전등급',\r\n                                width : 135,\r\n                                readOnly: true,\r\n                                align : 'center'\r\n                              }),   \r\n                              columnDateTime({\r\n                                name  : 'date',\r\n                                header: '입차시간',\r\n                                width : 120,\r\n                                height: 38,\r\n                                // paddingTop: ''\r\n                                readOnly: true,\r\n                                valign:'middle',\r\n                                format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                                time  : 'HH:mm:ss'\r\n                              }),\r\n                              columnTextArea({\r\n                                name: 'vendor',\r\n                                header: 'Vendor',\r\n                                width : 160,\r\n                                height: 38,\r\n                                readOnly: true,\r\n                                align : 'left'\r\n                              }),\r\n                              columnImage({\r\n                                name: 'rec',\r\n                                header: '녹화중',\r\n                                width: 85,\r\n                                imgItem:[\r\n                                  {'code':'0', 'value': ''},\r\n                                  {'code':'1', 'value': <GifPlayer height='30' width='70' gif={require('../../../Image/yk_rec01.gif').default} autoplay/>}\r\n                                ]\r\n                              }),   \r\n                              columnCombobox({\r\n                                name: 'warning', \r\n                                header: '경고',\r\n                                value   : 'COMM_DTL_CD',\r\n                                display : 'COMM_DTL_NAM',\r\n                                width   : 80, \r\n                                readOnly: true,\r\n                                oracleData : getDynamicSql_Oracle(\r\n                                  'COMM/COMM',\r\n                                  'ZM_IMS_CODE_SELECT',\r\n                                  [{COMM_CD: '5'}]),\r\n                                editor: {\r\n                                  value   : 'COMM_DTL_CD',\r\n                                  display : 'COMM_DTL_NAM'\r\n                                }\r\n                              })\r\n                            ]}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className='grid_info'>\r\n                    <span className='title'>잔여차량</span><Botspan reducer='INSP_PROC_MAIN' />\r\n                  </div>\r\n                </div>\r\n                <div className='total_info'>\r\n                  <ul className='four'>\r\n                    <li><span className='title'>운송차량 전체</span><Mainspan reducer='INSP_PROC_MAIN' flag={8} /></li>\r\n                    <li><span className='title'>잔류 차량</span><Mainspan reducer='INSP_PROC_MAIN' flag={1} /></li>\r\n                    <li onClick={e => {\r\n                      const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                      if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                      const openAuth = auth.find(e => e.MENU_ID === 'DAILY_PROC');\r\n                      if(openAuth !== null){\r\n                        if(openAuth.PGMAUT_YN === 'Y'){\r\n\r\n                          //#region 프로그램 리듀서 생성\r\n                          gfs_PGM_REDUCER('DAILY_PROC');\r\n                          //#endregion\r\n\r\n                          gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                            ({\r\n                              windowZindex: 0,\r\n                              activeWindow: {programId: 'DAILY_PROC',\r\n                                            programNam: '검수일계표'\r\n                                            }\r\n                            })\r\n                          );\r\n                        }\r\n                      }\r\n                    }}><span className='title'>전체 검수 차량</span><Mainspan reducer='INSP_PROC_MAIN' flag={2} /></li>\r\n                    <li onClick={e => {\r\n                      const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                      if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                      const openAuth = auth.find(e => e.MENU_ID === 'DAILY_PROC');\r\n                      if(openAuth !== null){\r\n                        if(openAuth.PGMAUT_YN === 'Y'){\r\n\r\n                          //#region 프로그램 리듀서 생성\r\n                          gfs_PGM_REDUCER('DAILY_PROC');\r\n                          //#endregion\r\n\r\n                          gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                            ({\r\n                              windowZindex: 0,\r\n                              activeWindow: {programId: 'DAILY_PROC',\r\n                                            programNam: '검수일계표'\r\n                                            }\r\n                            })\r\n                          );\r\n                        }\r\n                      }\r\n                    }}><span className='title'>입고량(KG)</span><Mainspan reducer='INSP_PROC_MAIN' flag={3} /></li>\r\n                  </ul>\r\n                  <ul className='four'>\r\n                    <li><span className='title'>검수대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={4} /></li>\r\n                    <li onClick={e => {\r\n                      const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                      if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                      const openAuth = auth.find(e => e.MENU_ID === 'DISP_PROC');\r\n                      if(openAuth !== null){\r\n                        if(openAuth.PGMAUT_YN === 'Y'){\r\n\r\n                          //#region 프로그램 리듀서 생성\r\n                          gfs_PGM_REDUCER('DISP_PROC');\r\n                          //#endregion\r\n\r\n                          gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                            ({\r\n                              windowZindex: 0,\r\n                              activeWindow: {programId: 'DISP_PROC',\r\n                                            programNam: '출차대기'\r\n                                            }\r\n                            })\r\n                          );\r\n                        }\r\n                      }\r\n                    }}><span className='title'>출차대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={5} /></li>\r\n                    <li onClick={e => {\r\n                      const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                      if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                      const openAuth = auth.find(e => e.MENU_ID === 'ENTR_PROC');\r\n                      if(openAuth !== null){\r\n                        if(openAuth.PGMAUT_YN === 'Y'){\r\n                      \r\n                          //#region 프로그램 리듀서 생성\r\n                          gfs_PGM_REDUCER('ENTR_PROC');\r\n                          //#endregion\r\n\r\n                          gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                            ({\r\n                              windowZindex: 0,\r\n                              activeWindow: {programId: 'ENTR_PROC',\r\n                                            programNam: '입차대기'\r\n                                            }\r\n                            })\r\n                          );\r\n                        }\r\n                      }\r\n                    }}><span className='title'>입차대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={6} /></li>\r\n                    <li onClick={e => {\r\n                      const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                      if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                      const openAuth = auth.find(e => e.MENU_ID === 'ENTR_PROC');\r\n                      if(openAuth !== null){\r\n                        if(openAuth.PGMAUT_YN === 'Y'){\r\n                      \r\n                          //#region 프로그램 리듀서 생성\r\n                          gfs_PGM_REDUCER('ENTR_WAIT');\r\n                          //#endregion\r\n\r\n                          gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                            ({\r\n                              windowZindex: 0,\r\n                              activeWindow: {programId: 'ENTR_WAIT',\r\n                                            programNam: '운송대기'\r\n                                            }\r\n                            })\r\n                          );\r\n                        }\r\n                      }\r\n                    }}><span className='title'>운송대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={7} /></li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            <div className='car_info' id='car_info'>\r\n              <div className='title'><span>계근번호</span><Detailspan reducer='INSP_PROC_MAIN' flag={1} /></div>\r\n\r\n              <TabList pgm={this.props.pgm} id={this.props.id} reducer='INSP_PROC_MAIN'/>\r\n\r\n              <div className='tab_content' id='tabMain'>\r\n                <div className='input_list on' id={`content1_${this.props.pgm}`}>\r\n                  <ul>\r\n                    <li>\r\n                      <h5>사전등급</h5>\r\n                        <Input pgm     = {this.props.pgm}\r\n                              id      = 'detail_pre_grade'\r\n                              width   = '100%'\r\n                              disabled\r\n                        />\r\n                    </li>\r\n                    <li>\r\n                      <h5>등급책정</h5>\r\n                      <div style={{marginBottom:'5px'}}>\r\n                        <Combobox pgm     = {this.props.pgm}\r\n                                  id      = 'detail_grade1'\r\n                                  value   = 'itemCode'\r\n                                  display = 'item'\r\n                                  placeholder = '고철등급 검색'\r\n                                  height  = {42}\r\n                                  oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                    p_division    : 'P005'\r\n                                  })}\r\n                                  onChange = {async (e) => {\r\n                                    const combo = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n                                    combo.setValue(null);\r\n                                    combo.setDisabled(true);\r\n\r\n                                    if(e !== undefined && e.value !== ''){\r\n                                      await combo.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                        p_division    : e.value\r\n                                      })});\r\n                                      combo.setDisabled(false);\r\n                                    }else{\r\n                                      combo.setDisabled(true);\r\n                                    }\r\n                                  }}\r\n                        />\r\n                      </div>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                                id      = 'detail_grade2'\r\n                                value   = 'itemCode'\r\n                                display = 'item'\r\n                                isDisabled\r\n                      />\r\n                    </li>\r\n                    <li>\r\n                      <h5>감량중량</h5>\r\n                      <div style={{marginBottom:'5px'}}>\r\n                        <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_subt'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              placeholder = '감량중량 검색(KG)'\r\n                              oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                p_division    : 'P535'\r\n                              })}\r\n                              onChange = {async (e) => {\r\n                                const combo = gfo_getCombo(this.props.pgm, 'detail_subt_leg');\r\n                                combo.setValue(null);\r\n                                combo.setDisabled(true);\r\n\r\n                                if(e === undefined) return;\r\n\r\n                                if(e.value !== '0'){\r\n                                  await combo.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                    p_division    : e.value\r\n                                  })});\r\n                                  combo.setDisabled(false);\r\n                                }\r\n                              }}\r\n                        />\r\n                      </div>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_subt_leg'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감량사유 검색'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P620'\r\n                            })}\r\n                            isDisabled\r\n                      /> \r\n                    </li>\r\n                    <li>\r\n                      <h5>감가내역</h5>\r\n                      <div style={{marginBottom:'5px'}}>\r\n                        <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_depr'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              placeholder = '감가내역 검색'\r\n                              oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                p_division    : 'P130'\r\n                              })}\r\n                              emptyRow\r\n                              onChange = {async (e) => {\r\n                                const combo = gfo_getCombo(this.props.pgm, 'detail_depr2');\r\n                                combo.setValue(null);\r\n\r\n                                if(e === undefined) return;\r\n\r\n                                if(e !== undefined && e.value !== ''){\r\n                                  combo.setDisabled(false);\r\n                                }else{\r\n                                  combo.setDisabled(true);\r\n                                }\r\n                              }}\r\n                        />\r\n                      </div>\r\n                      <Combobox pgm = {this.props.pgm}\r\n                            id      = 'detail_depr2'\r\n                            value   = 'CODE'\r\n                            display = 'NAME'\r\n                            placeholder = '감가비율'\r\n                            isDisabled\r\n                            data    = {[{\r\n                              'CODE': '10',\r\n                              'NAME': '10%'\r\n                            },{\r\n                              'CODE': '20',\r\n                              'NAME': '20%'\r\n                            },{\r\n                              'CODE': '30',\r\n                              'NAME': '30%'\r\n                            },{\r\n                              'CODE': '40',\r\n                              'NAME': '40%'\r\n                            },{\r\n                              'CODE': '50',\r\n                              'NAME': '50%'\r\n                            },{\r\n                              'CODE': '60',\r\n                              'NAME': '60%'\r\n                            },{\r\n                              'CODE': '70',\r\n                              'NAME': '70%'\r\n                            },{\r\n                              'CODE': '80',\r\n                              'NAME': '80%'\r\n                            },{\r\n                              'CODE': '90',\r\n                              'NAME': '90%'\r\n                            },{\r\n                              'CODE': '100',\r\n                              'NAME': '100%'\r\n                            }]}\r\n                            // emptyRow\r\n                      />\r\n                    </li>\r\n                    {/* <li>\r\n                      <h5>하차구역</h5>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_out'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '하차구역 검색(SECTOR)'\r\n                            data    = ''\r\n                            onFocus = {ComboCreate => {\r\n                              YK_WEB_REQ('tally_process_pop.jsp?division=P530', {})\r\n                                .then(res => {\r\n                                  ComboCreate({data   : res.data.dataSend,\r\n                                              value  : 'itemCode',\r\n                                              display: 'item'});\r\n                                })\r\n                            }}\r\n                    />\r\n                    </li> */}\r\n                    <li>\r\n                      <h5>차종구분</h5>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_car'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '차종선택'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P700'\r\n                            })}\r\n                    />\r\n                    </li>\r\n                    <li>\r\n                      <h5>반품구분</h5>\r\n                      <div style={{marginBottom:'5px'}}>\r\n                        <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_rtn'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              placeholder = '일부,전량 선택'\r\n                              oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                p_division    : 'P110'\r\n                              })}\r\n                              emptyRow\r\n                              onChange = {e => {\r\n                                const combo = gfo_getCombo(this.props.pgm, 'detail_rtn2');\r\n                                combo.setValue(null);\r\n\r\n                                if(e === undefined) return;\r\n\r\n                                if(e.value === ''){\r\n                                  combo.setDisabled(true);\r\n                                }else{\r\n                                  combo.setDisabled(false);\r\n                                }\r\n                                // combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                              }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_rtn2'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                p_division    : 'P120'\r\n                              })}\r\n                              isDisabled\r\n                      />\r\n                    </li>\r\n                    <li>\r\n                      <h5>경고</h5>\r\n                      <Checkbox pgm   = {this.props.pgm}\r\n                                id    = 'detail_warning'\r\n                                width = '30px'\r\n                                height= '30px'\r\n\r\n                      />\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n                \r\n                <Chit pgm={this.props.pgm} id={'chit_memo'} reducer='INSP_PROC_MAIN'/>\r\n                \r\n                <div className='input_list' id={`content3_${this.props.pgm}`}>\r\n                  <DispInfo pgm={this.props.pgm} />\r\n                </div>\r\n\r\n                <div className='input_list' id={`content4_${this.props.pgm}`}>\r\n                  <DispImg pgm={this.props.pgm} />\r\n                </div>\r\n              </div>\r\n              \r\n              <CompleteBtn pgm={this.props.pgm}/>\r\n            </div>\r\n            </div>\r\n\r\n          \r\n          <div className='cctv_viewer' style={{width:'100%'}}>\r\n            <h4>실시간 CCTV</h4>\r\n            <div className='manual_record'>\r\n              <h5>수동녹화</h5>\r\n              <button \r\n                type='button' \r\n                className='record'\r\n                onClick={e => this.startRec()}\r\n              >녹화</button>\r\n              <button \r\n                type='button' \r\n                className='stop on'\r\n                onClick={e => this.stopRec()}\r\n              >정지</button>\r\n            </div>\r\n            <RainInfo />\r\n            <div className='cctv_list' \r\n            >\r\n              {this.state.device[0] !== undefined && \r\n                <RecImage \r\n                  seq={1}\r\n                  device={this.state.device[0].camera.Guid} \r\n                  Name={this.state.device[0].camera.Name}\r\n                  rtspAddr={this.state.device[0].rtspAddr}\r\n                  cameraPort={this.state.device[0].cameraPort}\r\n                  cameraNam={this.state.device[0].cameraNam}\r\n                  cam='STD_CAM_OPEN' \r\n                  focus='STD_CAM_FOCUS' \r\n                  rec='STD_CAM_REC' \r\n                  image='STD_CAM_IMG'/> \r\n              }\r\n              {this.state.device[1] !== undefined && \r\n                <RecImage\r\n                  seq={2} \r\n                  device={this.state.device[1].camera.Guid} \r\n                  Name={this.state.device[1].camera.Name}\r\n                  rtspAddr={this.state.device[1].rtspAddr}\r\n                  cameraPort={this.state.device[1].cameraPort}\r\n                  cameraNam={this.state.device[1].cameraNam}\r\n                  cam='DUM_CAM_OPEN' \r\n                  focus='DUM_CAM_FOCUS' \r\n                  rec='DUM_CAM_REC' \r\n                  image='DUM_CAM_IMG'/> \r\n              }\r\n            </div>\r\n            <div className='cctv_other_list'>\r\n              <ul>\r\n                <li>\r\n                  {this.state.device[2] !== undefined && \r\n                    <RecImage\r\n                      seq={3} \r\n                      device={this.state.device[2].camera.Guid} \r\n                      Name={this.state.device[2].camera.Name}\r\n                      rtspAddr={this.state.device[2].rtspAddr}\r\n                      cameraPort={this.state.device[2].cameraPort}\r\n                      cameraNam={this.state.device[2].cameraNam}\r\n                      cam='ETC1_CAM_OPEN' \r\n                      focus='ETC1_CAM_FOCUS' \r\n                      rec='ETC1_CAM_REC' \r\n                      image='ETC1_CAM_IMG'/> \r\n                  }\r\n                </li>\r\n                <li>\r\n                  {this.state.device[3] !== undefined && \r\n                    <RecImage\r\n                      seq={4} \r\n                      device={this.state.device[3].camera.Guid} \r\n                      Name={this.state.device[3].camera.Name}\r\n                      rtspAddr={this.state.device[3].rtspAddr}\r\n                      cameraPort={this.state.device[3].cameraPort}\r\n                      cameraNam={this.state.device[3].cameraNam}\r\n                      cam='ETC2_CAM_OPEN' \r\n                      focus='ETC2_CAM_FOCUS' \r\n                      rec='ETC2_CAM_REC' \r\n                      image='ETC2_CAM_IMG'/> \r\n                  }\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          </Layout>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default INSP_PROC;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\SHIP_PROC\\CompleteBtn.js",["698","699"],"import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { gfs_getStoreValue } from '../../../Method/Store';\r\nimport { gfc_showMask, gfc_hideMask } from '../../../Method/Comm';\r\nimport { gfo_getCombo } from '../../../Method/Component';\r\n\r\nimport { YK_WEB_REQ, YK_WEB_REQ_RAIN } from '../../../WebReq/WebReq';\r\nimport { gfg_getGrid, gfg_getRow } from '../../../Method/Grid';\r\nimport { getSp_Oracle, getSp_Oracle_YK } from '../../../db/Oracle/Oracle';\r\nimport { getDynamicSql_Mysql } from '../../../db/Mysql/Mysql';\r\n\r\nconst CompleteBtn = (props) => {\r\n  const value = useSelector((e) => {\r\n    return e.SHIP_PROC_MAIN.CHIT_INFO;\r\n  }, (p, n) => {\r\n    return p.scaleNumb === n.scaleNumb;\r\n  });\r\n\r\n\r\n  const getRain = async() => {\r\n    const result = await YK_WEB_REQ_RAIN();\r\n    let value = 0;\r\n\r\n    if(result){\r\n      value = result.data;\r\n    }\r\n    \r\n    return value;\r\n  }\r\n\r\n  //#region 검수등록\r\n  const onProcess = async() => {\r\n    const scaleNumb = gfs_getStoreValue('SHIP_PROC_MAIN', 'DETAIL_SCALE');\r\n\r\n    if(scaleNumb === ''){\r\n      alert('선택된 배차정보가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    const grid = gfg_getGrid(props.pgm, 'main10');\r\n    let chkCnt = 0;\r\n    for(let i = 0; i < grid.getRowCount(); i++){\r\n      const column = gfg_getRow(grid, i);\r\n      if(column.chk === null) continue;\r\n\r\n      if(column.chk.toString() === 'Y'){\r\n        chkCnt += 1;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if(chkCnt === 0){\r\n      alert('선택된건이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    gfc_showMask();\r\n\r\n    //#region 필수입력확인 및 변수세팅\r\n    const detail_grade1 = gfo_getCombo(props.pgm, 'detail_grade1'); //고철등급\r\n    if(detail_grade1.getValue() === null || detail_grade1.getValue() === ''){\r\n      alert('필수입력값이 없습니다. > 고철등급');\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_grade2 = gfo_getCombo(props.pgm, 'detail_grade2'); //상세고철등급\r\n    if(detail_grade2.getValue() === null || detail_grade2.getValue() === ''){\r\n      alert('필수입력값이 없습니다. > 등급세부코드');\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_subt = gfo_getCombo(props.pgm, 'detail_subt'); //감량중량\r\n    const detail_subt_leg = gfo_getCombo(props.pgm, 'detail_subt_leg'); //감량사유\r\n    if(detail_subt.getValue() !== null &&  detail_subt.getValue() !== '' &&  detail_subt.getValue() !== '0'){\r\n      if(detail_subt_leg.getValue() === null || detail_subt_leg.getValue() === ''){\r\n        alert('필수입력값이 없습니다. > 감량사유');\r\n  \r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const detail_depr = gfo_getCombo(props.pgm, 'detail_depr'); //감가내역\r\n    const detail_depr2 = gfo_getCombo(props.pgm, 'detail_depr2'); //감가비율\r\n    if(detail_depr.getValue() !== null &&  detail_depr.getValue() !== ''){\r\n      if(detail_depr2.getValue() === null || detail_depr2.getValue() === ''){\r\n        alert('필수입력값이 없습니다. > 감가비율');\r\n  \r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const detail_out = gfo_getCombo(props.pgm, 'detail_out'); //차종구분\r\n    if(detail_out.getValue() === null ||  detail_out.getValue() === ''){\r\n      alert('필수입력값이 없습니다. > 하차구역');\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_car = gfo_getCombo(props.pgm, 'detail_car'); //차종구분\r\n    if(detail_car.getValue() === null ||  detail_car.getValue() === ''){\r\n      alert('필수입력값이 없습니다. > 차종구분');\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_rtn = gfo_getCombo(props.pgm, 'detail_rtn'); //반품구분\r\n    const detail_rtn2 = gfo_getCombo(props.pgm, 'detail_rtn2'); //반품구분사유\r\n    if(detail_rtn.getValue() !== null && detail_rtn.getValue() !== ''){\r\n      if(detail_rtn2.getValue() === null || detail_rtn2.getValue() === ''){\r\n        alert('필수입력값이 없습니다. > 반품구분사유');\r\n  \r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // const detail_warning = gfo_getCombo(props.pgm, 'detail_warning'); //경고\r\n    \r\n    //#endregion\r\n\r\n    \r\n\r\n    const rain = await getRain();\r\n    const data = grid.getData();\r\n    for(let i = 0; i < data.length; i++){\r\n      if(data[i].chk === null) continue;\r\n      if(data[i].chk === undefined) continue;\r\n\r\n      if(data[i].chk.toString() === 'Y'){\r\n\r\n        let param = [];\r\n        param.push({\r\n          sp   : `begin \r\n                    apps.EMM_INSPECT_MOBILE(\r\n                      :p_delivery_id,\r\n                      :p_sector_code,\r\n                      :p_reduce_code,\r\n                      :p_reduce_wgt,\r\n                      :p_return_gubun,\r\n                      :p_return_code,\r\n                      :p_file_yn,\r\n                      :p_iron_grade,\r\n                      :p_iron_grade_item,\r\n                      :p_discount_code,\r\n                      :p_erp_id,\r\n                      :p_erp_worker,\r\n                      :p_discount_rate,\r\n                      :p_cartype,\r\n                      :p_warning,\r\n                      :p_rain,\r\n                      :p_out\r\n                    );\r\n                  end;\r\n                  `,\r\n          data : {\r\n            p_delivery_id     : data[i].scaleNumb,\r\n            p_sector_code     : detail_out.getValue(),\r\n            p_reduce_code     : (detail_subt_leg.getValue() === null || detail_subt_leg.getValue() === undefined) ? '' : detail_subt_leg.getValue(),\r\n            p_reduce_wgt      : (detail_subt.getValue() === null || detail_subt.getValue() === undefined) ? '' : detail_subt.getValue(),\r\n            p_return_gubun    : (detail_rtn.getValue() === null || detail_rtn.getValue() === undefined) ? '' : detail_rtn.getValue(),\r\n            p_return_code     : (detail_rtn2.getValue() === null || detail_rtn2.getValue() === undefined) ? '' : detail_rtn2.getValue(),\r\n            p_file_yn         : '',\r\n            p_iron_grade      : detail_grade1.getValue(),\r\n            p_iron_grade_item : detail_grade2.getValue(),\r\n            p_discount_code   : (detail_depr.getValue() === null || detail_depr.getValue() === undefined)? '' : detail_depr.getValue(),\r\n            p_erp_id          : gfs_getStoreValue('USER_REDUCER', 'ERP_ID'),\r\n            p_erp_worker      : gfs_getStoreValue('USER_REDUCER', 'USER_NAM'),\r\n            p_discount_rate   : (detail_depr2.getValue() === null || detail_depr2.getValue() === undefined) ? '' : detail_depr2.getValue(),\r\n            p_cartype         : detail_car.getValue(),\r\n            p_warning         : 'N',\r\n            p_rain            : rain,\r\n          },\r\n          errSeq: 0\r\n        })\r\n    \r\n        let result = await getSp_Oracle_YK(\r\n          param\r\n        ); \r\n\r\n        if(result.data.result !== 'OK'){\r\n          alert('검수수정중 오류가 발생했습니다. > ' + result.data.result);\r\n          gfc_hideMask();\r\n\r\n          return;\r\n        }else{\r\n          getDynamicSql_Mysql(scaleNumb, (detail_subt.getValue() === null || detail_subt.getValue() === undefined || detail_subt.getValue() === '') ? 0 : detail_subt.getValue()).then(e => {\r\n            console.log(e)\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === 'SHIP_PROC');\r\n    pgm[0].Retrieve();\r\n\r\n    gfc_hideMask();\r\n\r\n    //#endregion\r\n\r\n    alert('저장되었습니다.');\r\n  }\r\n  //#endregion\r\n\r\n  //#region 계량표저장\r\n  // const onScaleChit = async() => {\r\n  //   const img = document.getElementById(`content2_${props.pgm}`);\r\n  //   const scaleNumb = gfs_getStoreValue('SHIP_PROC_MAIN', 'CHIT_INFO');\r\n\r\n  //   if(scaleNumb.scaleNumb === ''){\r\n  //     alert('선택된 배차정보가 없습니다.');\r\n  //     return;\r\n  //   }\r\n\r\n  //   gfc_showMask();\r\n\r\n  //   const memo = gfs_getStoreValue('SHIP_PROC_MAIN', 'CHIT_MEMO').trim();\r\n  //   if(memo.length === 0){\r\n  //     if(window.confirm('계량표의 내용이 없습니다. 저장하시겠습니까?') === false){\r\n  //       gfc_hideMask();\r\n  //       return;\r\n  //     }\r\n  //   }\r\n\r\n  //   //다른쪽에서 저장된 계량표가 있는지 한번더 확인한다.\r\n  //   const chitYn = await gfc_chit_yn_YK(scaleNumb.scaleNumb);\r\n  //   if(chitYn.data !== 'N'){\r\n  //     alert('이미처리된 계량표 입니다. 재조회 후 확인바랍니다.');\r\n  //     gfc_hideMask();\r\n  //     return;\r\n  //   }\r\n\r\n  //   const result = await gfc_screenshot_srv_YK(img, scaleNumb.scaleNumb);\r\n    \r\n  //   if(result.data === 'Y'){\r\n  //     const chitYn = await gfc_chit_yn_YK(scaleNumb.scaleNumb);\r\n  //     gfs_dispatch('SHIP_PROC_MAIN', 'CHIT_INFO', {\r\n  //       chit     : chitYn.data\r\n  //     });\r\n  //   }else{\r\n  //     alert('계량표 저장에 실패 했습니다.')\r\n  //   }\r\n    \r\n  //   gfc_hideMask();\r\n  // }\r\n  //#endregion\r\n\r\n  return (\r\n    <div className='complete_btn'>\r\n      <button type='button' id={`btn1_${props.pgm}`} onClick={e => onProcess()} className='on'><span>등록완료</span></button>\r\n      {/* <button type='button' id={`btn2_${props.pgm}`} onClick={e => onProcess()}><span>등록완료</span></button> */}\r\n      <button style={{display: value.chit !== false && 'none' }} type='button' id={`btn2_${props.pgm}`} onClick={e => onProcess()}><span>등록완료</span></button>\r\n      <button style={{display:'none'}} id={`btn3_${props.pgm}`}></button>\r\n      <button style={{display:'none'}} id={`btn4_${props.pgm}`}></button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompleteBtn;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\SHIP_PROC\\SHIP_PROC.js",["700","701","702","703"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_sleep, gfc_yk_call_sp } from '../../../Method/Comm';\r\nimport { gfs_injectAsyncReducer, gfs_dispatch, gfs_getStoreValue } from '../../../Method/Store';\r\nimport { gfo_getCombo, gfo_getInput } from '../../../Method/Component';\r\nimport { gfg_getGrid, gfg_setSelectRow, gfg_setValue, gfg_appendRow, gfg_getColumn } from '../../../Method/Grid';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Number as columnNumber } from '../../../Component/Grid/Column/Number';\r\nimport { Checkbox as columnCheckbox } from '../../../Component/Grid/Column/Checkbox';\r\nimport { DateTime as columnDateTime } from '../../../Component/Grid/Column/DateTime';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\nimport Detailspan from '../Common/Detailspan';\r\nimport Botspan from './Botspan';\r\nimport CompleteBtn from './CompleteBtn';\r\n//#endregion\r\n\r\nclass SHIP_PROC extends Component {\r\n\r\n  state = {\r\n    wait_list: [],\r\n    device: []\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const SHIP_PROC_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'SHIP_PROC_MAIN') {\r\n        return {\r\n          MAIN_WAIT    : nowState === undefined ? 0 : nowState.MAIN_WAIT,\r\n          MAIN_TOTAL   : nowState === undefined ? 0 : nowState.MAIN_TOTAL,\r\n          MAIN_WEIGHT  : nowState === undefined ? 0 : nowState.MAIN_WEIGHT,\r\n          TOTAL_WEIGHT : nowState === undefined ? 0 : nowState.TOTAL_WEIGHT,\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n          PROC_WAIT    : nowState === undefined ? 0 : nowState.PROC_WAIT,\r\n          DEPT_WAIT    : nowState === undefined ? 0 : nowState.DEPT_WAIT,\r\n          ENTR_WAIT    : nowState === undefined ? 0 : nowState.ENTR_WAIT,\r\n \r\n          DETAIL_SCALE : nowState === undefined ? '' : nowState.DETAIL_SCALE,\r\n          DETAIL_CARNO : nowState === undefined ? '' : nowState.DETAIL_CARNO,\r\n          DETAIL_WEIGHT: nowState === undefined ? '' : nowState.DETAIL_WEIGHT,\r\n          DETAIL_DATE  : nowState === undefined ? '' : nowState.DETAIL_DATE,\r\n\r\n          GRID_SCALE   : nowState === undefined ? '' : nowState.GRID_SCALE,\r\n\r\n          STD_CAM_IMG  : nowState === undefined ? null : nowState.STD_CAM_IMG,\r\n          DUM_CAM_IMG  : nowState === undefined ? null : nowState.DUM_CAM_IMG,\r\n\r\n          STD_CAM_OPEN : nowState === undefined ? false : nowState.STD_CAM_OPEN,\r\n          DUM_CAM_OPEN : nowState === undefined ? false : nowState.DUM_CAM_OPEN,\r\n\r\n          STD_CAM_FOCUS: nowState === undefined ? false : nowState.STD_CAM_FOCUS,\r\n          DUM_CAM_FOCUS: nowState === undefined ? false : nowState.DUM_CAM_FOCUS,\r\n\r\n          STD_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.STD_CAM_REC,\r\n          DUM_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.DUM_CAM_REC,\r\n\r\n          CHIT_MEMO    : nowState === undefined ? '' : nowState.CHIT_MEMO,\r\n          \r\n          CHIT_INFO    : nowState === undefined ? {\r\n                                                    date     : '',\r\n                                                    scaleNumb: '',\r\n                                                    carNumb  : '',\r\n                                                    vender   : '',\r\n                                                    itemFlag : '',\r\n                                                    Wgt      : '',\r\n                                                    loc      : '',\r\n                                                    user     : '',\r\n                                                    chit     : 'N',\r\n                                                  } : nowState.CHIT_INFO\r\n        };\r\n      }\r\n\r\n      if(action.type === 'MAIN_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WAIT : action.MAIN_WAIT\r\n        })\r\n      }else if(action.type === 'MAIN_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_TOTAL : action.MAIN_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WEIGHT : action.MAIN_WEIGHT\r\n        })\r\n      }else if(action.type === 'TOTAL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          TOTAL_WEIGHT : action.TOTAL_WEIGHT\r\n        })\r\n      }else if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }else if(action.type === 'PROC_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          PROC_WAIT : action.PROC_WAIT\r\n        })\r\n      }else if(action.type === 'DEPT_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEPT_WAIT : action.DEPT_WAIT\r\n        })\r\n      }else if(action.type === 'ENTR_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ENTR_WAIT : action.ENTR_WAIT\r\n        })\r\n      }else if(action.type === 'DETAIL_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_SCALE : action.DETAIL_SCALE\r\n        })\r\n      }else if(action.type === 'GRID_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          GRID_SCALE : action.GRID_SCALE\r\n        })\r\n      }else if(action.type === 'DETAIL_CARNO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_CARNO : action.DETAIL_CARNO\r\n        })\r\n      }else if(action.type === 'DETAIL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_WEIGHT : action.DETAIL_WEIGHT\r\n        })\r\n      }else if(action.type === 'DETAIL_DATE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_DATE : action.DETAIL_DATE\r\n        })\r\n      }else if(action.type === 'STD_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_IMG : action.STD_CAM_IMG\r\n        })\r\n      }else if(action.type === 'DUM_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_IMG : action.DUM_CAM_IMG\r\n        })\r\n      }else if(action.type === 'STD_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_OPEN : action.STD_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'DUM_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_OPEN : action.DUM_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'STD_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_FOCUS : action.STD_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'DUM_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_FOCUS : action.DUM_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.STD_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.DUM_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec     : nowState.STD_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec     : nowState.DUM_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO_ITEM_FLAG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     :  nowState.CHIT_INFO.date,\r\n            scaleNumb:  nowState.CHIT_INFO.scaleNumb,\r\n            carNumb  :  nowState.CHIT_INFO.carNumb,\r\n            vender   :  nowState.CHIT_INFO.vender,\r\n            itemFlag :  action.itemFlag,\r\n            Wgt      :  nowState.CHIT_INFO.Wgt,\r\n            loc      :  nowState.CHIT_INFO.loc,\r\n            user     :  nowState.CHIT_INFO.user,\r\n            chit     :  nowState.CHIT_INFO.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     : action.date,\r\n            scaleNumb: action.scaleNumb,\r\n            carNumb  : action.carNumb,\r\n            vender   : action.vender,\r\n            itemFlag : action.itemFlag,\r\n            Wgt      : action.Wgt,\r\n            loc      : action.loc,\r\n            user     : action.user,\r\n            chit     : action.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_MEMO'){\r\n        return Object.assign({}, nowState, {\r\n          CHIT_MEMO : action.CHIT_MEMO\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('SHIP_PROC_MAIN', SHIP_PROC_MAIN);\r\n    //#endregion\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.Retrieve();\r\n  }\r\n\r\n  Retrieve = async () => {\r\n\r\n    gfc_showMask();\r\n\r\n    const mainData = await gfc_yk_call_sp(`SP_ZM_SHIP_WAIT`);\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    grid.clear();\r\n\r\n    if(mainData.data.SUCCESS === 'Y'){\r\n\r\n      const main = mainData.data.ROWS;\r\n    \r\n      const dataMod = [];\r\n      main.forEach(e => {\r\n        dataMod.push({\r\n          scaleNumb: e['DELIVERY_ID'].toString(),\r\n          vendorname: e['VENDOR_NAME'],\r\n          cars_no: e['CARS_NO'],\r\n          netweight: e['NET_WEIGHT'],\r\n          deliverydate: e['DELIVERY_DATE'],\r\n          empty_time: e['EMPTY_TIME'],\r\n          empty_wgt: e['EMPTY_WGT'],\r\n          iron_grade: e['IRON_GRADE'],\r\n          inspect_user: e['INSPECT_USER']\r\n        })\r\n      })\r\n\r\n      if(main){\r\n        \r\n        grid.resetData(dataMod);\r\n        gfs_dispatch('SHIP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: main.length});\r\n        \r\n        await gfc_sleep(100);\r\n  \r\n        gfg_setSelectRow(grid);\r\n      }else{\r\n        gfs_dispatch('SHIP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      }\r\n    }else{\r\n      gfs_dispatch('SHIP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n    } \r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n  sumWeight = () => {\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    const data = grid.getData();\r\n\r\n    let TOTAL_WEIGHT = 0;\r\n    for(let i = 0; i < data.length; i++){\r\n      if(data[i].chk === 'Y'){\r\n        TOTAL_WEIGHT += data[i].netweight * 1;\r\n      }\r\n    }\r\n\r\n    \r\n    gfs_dispatch('SHIP_PROC_MAIN', 'TOTAL_WEIGHT', {\r\n      TOTAL_WEIGHT\r\n    })\r\n  }\r\n\r\n  onSelectChange = async (e) => {\r\n    if(e === null) return;\r\n\r\n    gfs_dispatch('SHIP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: e.scaleNumb});\r\n    gfs_dispatch('SHIP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: e.vendorname});\r\n    gfs_dispatch('SHIP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: e.netweight});\r\n    gfs_dispatch('SHIP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: e.deliverydate});\r\n\r\n    //기존 등록된 정보\r\n    const dtlInfo = await gfc_yk_call_sp('SP_ZM_PROCESS_F_SEL', {\r\n      P_SCALENUMB: e.scaleNumb\r\n    });\r\n    \r\n    if(dtlInfo.data.SUCCESS === 'Y'){\r\n\r\n      gfo_getCombo(this.props.pgm, 'detail_grade1').setValue(dtlInfo.data.ROWS[0].IRON_GRADE);   //고철등급\r\n      const detail_grade2 = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n      await detail_grade2.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n        p_division    : dtlInfo.data.ROWS[0].IRON_GRADE\r\n      })});\r\n      detail_grade2.setValue(dtlInfo.data.ROWS[0].IRON_GRADE_ITEM);   //상세고철등급\r\n      gfo_getCombo(this.props.pgm, 'detail_subt').setValue(dtlInfo.data.ROWS[0].REDUCE_WGT);     //감량중량\r\n      gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(dtlInfo.data.ROWS[0].REDUCE_WGT_REASON_CODE); //감량사유\r\n      gfo_getCombo(this.props.pgm, 'detail_depr').setValue(dtlInfo.data.ROWS[0].DISCOUNT_CODE);     //감가내역\r\n      // gfo_getCombo(this.props.pgm, 'detail_depr2').setValue(dtlInfo.data.ROWS[0].DISCOUNT_CODE);    //감가비율\r\n      gfo_getCombo(this.props.pgm, 'detail_car').setValue(dtlInfo.data.ROWS[0].CAR_TYPE);      //차종구분\r\n      gfo_getCombo(this.props.pgm, 'detail_out').setValue(dtlInfo.data.ROWS[0].SECTOR_CODE);      //하차구역\r\n      gfo_getCombo(this.props.pgm, 'detail_rtn').setValue(dtlInfo.data.ROWS[0].RETURN_CODE);      //반품구분\r\n      gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue(dtlInfo.data.ROWS[0].RETURN_GUBUN);     //반품구분사유\r\n    }else{\r\n      gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n      const detail_grade2 = gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //고철등급\r\n      gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n      gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n      gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n      // gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n      gfo_getCombo(this.props.pgm, 'detail_car').setValue('');      //차종구분\r\n      gfo_getCombo(this.props.pgm, 'detail_out').setValue('');      //하차구역\r\n      gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n      gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager type2' >\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '계근번호'\r\n                            },{\r\n                              code: '2',\r\n                              name: '차량번호'\r\n                            },{\r\n                              code: '3',\r\n                              name: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        selectionChange={(e) => this.onSelectChange(e)}\r\n                        headerClick={(e) => {\r\n                          if(e.columnName === 'chk'){\r\n                            const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n                            if(grid.gridEl.dataset.checked === undefined){\r\n                              grid.gridEl.dataset.checked = 'Y';\r\n                            }else if(grid.gridEl.dataset.checked === 'Y'){\r\n                              grid.gridEl.dataset.checked = 'N';\r\n                            }else{\r\n                              grid.gridEl.dataset.checked = 'Y';\r\n                            }\r\n    \r\n                            let TOTAL_WEIGHT = 0;\r\n                            for(let i = 0; i < grid.getRowCount(); i++){\r\n                              gfg_setValue(grid, 'chk', grid.gridEl.dataset.checked, i);\r\n\r\n                              if(grid.gridEl.dataset.checked === 'Y'){\r\n                                TOTAL_WEIGHT += grid.getData()[i].netweight * 1;\r\n                              }\r\n                            }\r\n\r\n                            gfs_dispatch('SHIP_PROC_MAIN', 'TOTAL_WEIGHT', {\r\n                              TOTAL_WEIGHT\r\n                            })\r\n                          }\r\n                        }}\r\n                        rowHeight={41}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        columns={[\r\n                          columnCheckbox({\r\n                            name: 'chk',\r\n                            header: '선택',\r\n                            width : 50,\r\n                            readOnly: true,\r\n                            align : 'center',\r\n                            type: 'checkbox',\r\n                            checkedChange: () => {\r\n                              this.sumWeight()\r\n                            }\r\n                          }),\r\n                          columnInput({\r\n                            name: 'scaleNumb',\r\n                            header: '계근번호',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'vendorname',\r\n                            header: '업체명',\r\n                            width : 250,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'cars_no',\r\n                            header: '차량번호',\r\n                            width : 150,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnNumber({\r\n                            name    : 'netweight', \r\n                            header  : '무게(KG)', \r\n                            width   : 130, \r\n                            readOnly: false\r\n                          }),\r\n                          columnDateTime({\r\n                            name  : 'deliverydate',\r\n                            header: '입차일자',\r\n                            width : 100,\r\n                            // paddingTop: ''\r\n                            readOnly: true,\r\n                            valign:'middle',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT')\r\n                          }),\r\n                          columnDateTime({\r\n                            name  : 'empty_time',\r\n                            header: '공차계량시간',\r\n                            width : 120,\r\n                            height: 38,\r\n                            // paddingTop: ''\r\n                            readOnly: true,\r\n                            valign:'middle',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                            time  : 'HH:mm:ss'\r\n                          }),\r\n                          columnNumber({\r\n                            name    : 'empty_wgt', \r\n                            header  : '공차계량값', \r\n                            width   : 130, \r\n                            readOnly: false\r\n                          }),\r\n                          columnInput({\r\n                            name: 'iron_grade',\r\n                            header: '판정등급',\r\n                            width : 180,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'inspect_user',\r\n                            header: '판정(검수)',\r\n                            width : 180,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          })\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>전체차량</span><Botspan column='BOT_TOTAL' reducer='SHIP_PROC_MAIN' />\r\n                <span className='title' style={{paddingLeft:'50px'}}>입고량</span><Botspan reducer='DAILY_PROC_MAIN' column='TOTAL_WEIGHT' />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div style={{paddingBottom:'90px', paddingTop:'60px'}} className='car_info'>\r\n            <div className='title'><span>계근번호</span><Detailspan flag={1}  reducer='SHIP_PROC_MAIN'/></div>\r\n\r\n            <div className='tab_content' id='tabMain'>\r\n              <div className='input_list on' id={`content1_${this.props.pgm}`}>\r\n                <ul>\r\n                  <li>\r\n                    <h5>등급책정</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                                id      = 'detail_grade1'\r\n                                value   = 'itemCode'\r\n                                display = 'item'\r\n                                placeholder = '고철등급 검색'\r\n                                height  = {42}\r\n                                oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                  p_division    : 'P005'\r\n                                })}\r\n                                onChange = {async (e) => {\r\n                                  const combo = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n                                  combo.setValue(null);\r\n                                  combo.setDisabled(true);\r\n\r\n                                  if(e !== undefined && e.value !== ''){\r\n                                    await combo.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                      p_division    : e.value\r\n                                    })});\r\n                                    combo.setDisabled(false);\r\n                                  }else{\r\n                                    combo.setDisabled(true);\r\n                                  }\r\n                                }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_grade2'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>감량중량</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_subt'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감량중량 검색(KG)'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P535'\r\n                            })}\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_subt_leg');\r\n                              combo.setValue(null);\r\n                              combo.setDisabled(true);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value !== '0'){\r\n                                await combo.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                  p_division    : e.value\r\n                                })});\r\n                                combo.setDisabled(false);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_subt_leg'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '감량사유 검색'\r\n                          oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                            p_division    : 'P620'\r\n                          })}\r\n                          isDisabled\r\n                    /> \r\n                  </li>\r\n                  <li>\r\n                    <h5>감가내역</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_depr'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감가내역 검색'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P130'\r\n                            })}\r\n                            emptyRow\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_depr2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e !== undefined && e.value !== ''){\r\n                                combo.setDisabled(false);\r\n                              }else{\r\n                                combo.setDisabled(true);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm = {this.props.pgm}\r\n                          id      = 'detail_depr2'\r\n                          value   = 'CODE'\r\n                          display = 'NAME'\r\n                          placeholder = '감가비율'\r\n                          isDisabled\r\n                          data    = {[{\r\n                            'CODE': '10',\r\n                            'NAME': '10%'\r\n                          },{\r\n                            'CODE': '20',\r\n                            'NAME': '20%'\r\n                          },{\r\n                            'CODE': '30',\r\n                            'NAME': '30%'\r\n                          },{\r\n                            'CODE': '40',\r\n                            'NAME': '40%'\r\n                          },{\r\n                            'CODE': '50',\r\n                            'NAME': '50%'\r\n                          },{\r\n                            'CODE': '60',\r\n                            'NAME': '60%'\r\n                          },{\r\n                            'CODE': '70',\r\n                            'NAME': '70%'\r\n                          },{\r\n                            'CODE': '80',\r\n                            'NAME': '80%'\r\n                          },{\r\n                            'CODE': '90',\r\n                            'NAME': '90%'\r\n                          },{\r\n                            'CODE': '100',\r\n                            'NAME': '100%'\r\n                          }]}\r\n                          // emptyRow\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>하차구역</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_out'\r\n                          value   = 'itemCode'\r\n                          display = 'itemCode'\r\n                          placeholder = '하차구역 검색(SECTOR)'\r\n                          oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                            p_division    : 'P530'\r\n                          })}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>차종구분</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_car'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '차종선택'\r\n                          oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                            p_division    : 'P700'\r\n                          })}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>반품구분</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '일부,전량 선택'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P110'\r\n                            })}\r\n                            emptyRow\r\n                            onChange = {e => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_rtn2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value === ''){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                combo.setDisabled(false);\r\n                              }\r\n                              // combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                            }}\r\n                    />\r\n                  </div>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn2'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P120'\r\n                            })}\r\n                            isDisabled\r\n                    />\r\n                  </li>\r\n                  {/* <li>\r\n                    <h5>경고</h5>\r\n                    <Combobox pgm = {this.props.pgm}\r\n                          id      = 'detail_warning'\r\n                          value   = 'code'\r\n                          display = 'name'\r\n                          placeholder = '경고'\r\n                          data    = {[{\r\n                            'code': 'Y',\r\n                            'name': '경고'\r\n                          }]}\r\n                          emptyRow\r\n                    />\r\n                  </li> */}\r\n                </ul>\r\n              </div>\r\n\r\n\r\n              \r\n            </div>\r\n            \r\n            <CompleteBtn pgm={this.props.pgm}/>\r\n\r\n\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SHIP_PROC;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\INSP_CFRM.js",["704","705","706","707"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\nimport Checkbox from '../../../Component/Control/Checkbox';\r\nimport DateTime from '../../../Component/Control/DateTime';\r\n\r\nimport { gfc_initPgm, gfc_now, gfc_showMask, gfc_hideMask, gfc_chit_yn_YK, gfc_sleep, gfc_yk_call_sp } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue, gfs_injectAsyncReducer, gfs_dispatch, gfs_subscribe } from '../../../Method/Store';\r\nimport { gfo_getCombo, gfo_getDateTime, gfo_getInput, gfo_getCheckbox } from '../../../Method/Component';\r\nimport { gfg_getGrid, gfg_setSelectRow, gfg_setValue, gfg_appendRow } from '../../../Method/Grid';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { TextArea as columnTextArea } from '../../../Component/Grid/Column/TextArea';\r\nimport { Checkbox as columnCheckbox } from '../../../Component/Grid/Column/Checkbox';\r\nimport { DateTime as columnDateTime } from '../../../Component/Grid/Column/DateTime';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\nimport Detailspan from '../Common/Detailspan';\r\nimport Botspan from '../Common/Botspan';\r\nimport Chit from './Chit';\r\nimport CompleteBtn from './CompleteBtn';\r\nimport CompleteBtnModify from './CompleteBtnModify';\r\n\r\n//#endregion\r\n\r\nclass INSP_CFRM extends Component {\r\n\r\n  state = {\r\n    wait_list: [],\r\n    scaleNumb: ''\r\n  }\r\n\r\n  onTabChg = async() => {\r\n\r\n  }\r\n\r\n  //#region onActiveWindow 스토어 subscribe로 실행됨.\r\n  onActiveWindow = () => {\r\n    const activeWindow = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'activeWindow');\r\n    if(activeWindow.programId === 'INSP_CFRM'){\r\n      this.onTabChg();\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#endregion\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const INSP_CFRM_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'INSP_CFRM_MAIN') {\r\n        return {\r\n          MAIN_WAIT    : nowState === undefined ? 0 : nowState.MAIN_WAIT,\r\n          MAIN_TOTAL   : nowState === undefined ? 0 : nowState.MAIN_TOTAL,\r\n          MAIN_WEIGHT  : nowState === undefined ? 0 : nowState.MAIN_WEIGHT,\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n          PROC_WAIT    : nowState === undefined ? 0 : nowState.PROC_WAIT,\r\n          DEPT_WAIT    : nowState === undefined ? 0 : nowState.DEPT_WAIT,\r\n          ENTR_WAIT    : nowState === undefined ? 0 : nowState.ENTR_WAIT,\r\n \r\n          DETAIL_SCALE : nowState === undefined ? '' : nowState.DETAIL_SCALE,\r\n          DETAIL_CARNO : nowState === undefined ? '' : nowState.DETAIL_CARNO,\r\n          DETAIL_WEIGHT: nowState === undefined ? '' : nowState.DETAIL_WEIGHT,\r\n          DETAIL_DATE  : nowState === undefined ? '' : nowState.DETAIL_DATE,\r\n\r\n          GRID_SCALE   : nowState === undefined ? '' : nowState.GRID_SCALE,\r\n\r\n          STD_CAM_IMG  : nowState === undefined ? null : nowState.STD_CAM_IMG,\r\n          DUM_CAM_IMG  : nowState === undefined ? null : nowState.DUM_CAM_IMG,\r\n\r\n          STD_CAM_OPEN : nowState === undefined ? false : nowState.STD_CAM_OPEN,\r\n          DUM_CAM_OPEN : nowState === undefined ? false : nowState.DUM_CAM_OPEN,\r\n\r\n          STD_CAM_FOCUS: nowState === undefined ? false : nowState.STD_CAM_FOCUS,\r\n          DUM_CAM_FOCUS: nowState === undefined ? false : nowState.DUM_CAM_FOCUS,\r\n\r\n          STD_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.STD_CAM_REC,\r\n          DUM_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.DUM_CAM_REC,\r\n\r\n          CHIT_MEMO    : nowState === undefined ? '' : nowState.CHIT_MEMO,\r\n          \r\n          CHIT_INFO    : nowState === undefined ? {\r\n                                                    date     : '',\r\n                                                    scaleNumb: '',\r\n                                                    carNumb  : '',\r\n                                                    vender   : '',\r\n                                                    itemFlag : '',\r\n                                                    Wgt      : '',\r\n                                                    loc      : '',\r\n                                                    user     : '',\r\n                                                    chit     : 'N',\r\n                                                  } : nowState.CHIT_INFO\r\n        };\r\n      }\r\n\r\n      if(action.type === 'MAIN_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WAIT : action.MAIN_WAIT\r\n        })\r\n      }else if(action.type === 'MAIN_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_TOTAL : action.MAIN_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WEIGHT : action.MAIN_WEIGHT\r\n        })\r\n      }else if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }else if(action.type === 'PROC_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          PROC_WAIT : action.PROC_WAIT\r\n        })\r\n      }else if(action.type === 'DEPT_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEPT_WAIT : action.DEPT_WAIT\r\n        })\r\n      }else if(action.type === 'ENTR_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ENTR_WAIT : action.ENTR_WAIT\r\n        })\r\n      }else if(action.type === 'DETAIL_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_SCALE : action.DETAIL_SCALE\r\n        })\r\n      }else if(action.type === 'GRID_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          GRID_SCALE : action.GRID_SCALE\r\n        })\r\n      }else if(action.type === 'DETAIL_CARNO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_CARNO : action.DETAIL_CARNO\r\n        })\r\n      }else if(action.type === 'DETAIL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_WEIGHT : action.DETAIL_WEIGHT\r\n        })\r\n      }else if(action.type === 'DETAIL_DATE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_DATE : action.DETAIL_DATE\r\n        })\r\n      }else if(action.type === 'STD_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_IMG : action.STD_CAM_IMG\r\n        })\r\n      }else if(action.type === 'DUM_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_IMG : action.DUM_CAM_IMG\r\n        })\r\n      }else if(action.type === 'STD_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_OPEN : action.STD_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'DUM_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_OPEN : action.DUM_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'STD_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_FOCUS : action.STD_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'DUM_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_FOCUS : action.DUM_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.STD_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.DUM_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec     : nowState.STD_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec     : nowState.DUM_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO_ITEM_FLAG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     :  nowState.CHIT_INFO.date,\r\n            scaleNumb:  nowState.CHIT_INFO.scaleNumb,\r\n            carNumb  :  nowState.CHIT_INFO.carNumb,\r\n            vender   :  nowState.CHIT_INFO.vender,\r\n            itemFlag :  action.itemFlag,\r\n            Wgt      :  nowState.CHIT_INFO.Wgt,\r\n            loc      :  nowState.CHIT_INFO.loc,\r\n            user     :  nowState.CHIT_INFO.user,\r\n            chit     :  nowState.CHIT_INFO.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     : action.date,\r\n            scaleNumb: action.scaleNumb,\r\n            carNumb  : action.carNumb,\r\n            vender   : action.vender,\r\n            itemFlag : action.itemFlag,\r\n            Wgt      : action.Wgt,\r\n            loc      : action.loc,\r\n            user     : action.user,\r\n            chit     : action.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_MEMO'){\r\n        return Object.assign({}, nowState, {\r\n          CHIT_MEMO : action.CHIT_MEMO\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('INSP_CFRM_MAIN', INSP_CFRM_MAIN);\r\n    gfs_subscribe(this.onActiveWindow);\r\n    //#endregion\r\n  }\r\n\r\n  Init = async() => {\r\n    gfo_getDateTime(this.props.pgm, 'search_fr_dt').setValue(await gfc_now());\r\n    gfo_getDateTime(this.props.pgm, 'search_to_dt').setValue(await gfc_now());\r\n\r\n    this.Retrieve();\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.Init();\r\n  }\r\n\r\n  Retrieve = async () => {\r\n\r\n    // gfc_showMask();\r\n\r\n\r\n    const mainData = await gfc_yk_call_sp('SP_ZM_APPROVE_WAIT', {\r\n      p_from_date : gfo_getDateTime(this.props.pgm, 'search_fr_dt').getValue(),\r\n      p_to_date : gfo_getDateTime(this.props.pgm, 'search_to_dt').getValue()\r\n    });\r\n\r\n    // const mainData = await gfc_yk_call_sp('SP_ZM_APPROVE_WAIT', {\r\n    //   p_from_date : gfo_getDateTime(this.props.pgm, 'search_fr_dt').getValue(),\r\n    //   p_to_date : gfo_getDateTime(this.props.pgm, 'search_to_dt').getValue()\r\n    // });\r\n\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    grid.clear();\r\n    \r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(''); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue('');      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: ''});\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'GRID_SCALE', {GRID_SCALE: ''});\r\n\r\n    //계량증명서 여부 확인.\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'CHIT_INFO', {\r\n      scaleNumb: ''\r\n    });\r\n\r\n    if(mainData.data.SUCCESS === 'Y'){\r\n      const main = mainData.data.ROWS;\r\n\r\n      if(main){\r\n        const dataMod = [];\r\n        main.forEach(e => {\r\n          dataMod.push({\r\n            scaleNumb: e['DELIVERY_ID'],\r\n            vehicle_no: e['VEHICLE_NO'],\r\n            pre_item_grade: e['PRE_ITEM_GRADE'],\r\n            iron_grade: e['IRON_GRADE'],\r\n            iron_grade_item_name: e['IRON_GRADE_ITEM_NAME'],\r\n            reduce_name\t: e['REDUCE_NAME'],\r\n            reduce_wgt: e['REDUCE_WGT'],\r\n            return_gubun_name: e['RETURN_GUBUN_NAME'],\r\n            inspector: e['INSPECTOR'],\r\n            delivery_date: e['DELIVERY_DATE'],\r\n            vendor_name: e['VENDOR_NAME'],\r\n            inspect_time: e['INSPECT_TIME']\r\n          })\r\n        })\r\n\r\n        grid.resetData(dataMod);\r\n        gfs_dispatch('INSP_CFRM_MAIN', 'BOT_TOTAL', {BOT_TOTAL: main.length});\r\n        \r\n        await gfc_sleep(100);\r\n  \r\n        gfg_setSelectRow(grid);\r\n      }else{\r\n        gfs_dispatch('INSP_CFRM_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      }\r\n    }else{\r\n        gfs_dispatch('INSP_CFRM_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n    }\r\n\r\n    // gfc_hideMask();\r\n  }\r\n\r\n\r\n  onSelectChange = async (e) => {\r\n    if(e === null) return;\r\n    \r\n    //기존 등록된 정보\r\n    const dtlInfo = await gfc_yk_call_sp('SP_ZM_PROCESS_F_SEL', {\r\n      P_SCALENUMB: e.scaleNumb\r\n    });\r\n    \r\n    if(dtlInfo.data.SUCCESS === 'N'){\r\n      alert('검수정보를 불러올수 없습니다.');\r\n      return;\r\n    }\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(e.pre_item_grade); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue(dtlInfo.data.ROWS[0].IRON_GRADE);   //고철등급\r\n    const detail_grade2 = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n    await detail_grade2.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n      p_division    : dtlInfo.data.ROWS[0].IRON_GRADE\r\n    })});\r\n    detail_grade2.setValue(dtlInfo.data.ROWS[0].IRON_GRADE_ITEM);   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue(dtlInfo.data.ROWS[0].REDUCE_WGT);     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(dtlInfo.data.ROWS[0].REDUCE_WGT_REASON_CODE); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue(dtlInfo.data.ROWS[0].DISCOUNT_CODE);     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue(dtlInfo.data.ROWS[0].DISCOUNT_RATE);    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue(dtlInfo.data.ROWS[0].CAR_TYPE);      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_out').setValue(dtlInfo.data.ROWS[0].SECTOR_CODE);      //하차구역\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue(dtlInfo.data.ROWS[0].RETURN_GUBUN);      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue(dtlInfo.data.ROWS[0].RETURN_CODE);     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue(dtlInfo.data.ROWS[0].WARNING);  //경고\r\n    gfo_getInput(this.props.pgm, 'detail_rain').setValue(dtlInfo.data.ROWS[0].RAIN); //강수량\r\n\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: e.scaleNumb});\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: e.vehicle_no});\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: e.net_weight});\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'DETAIL_DATE', {DETAIL_DATE: e.delivery_date});\r\n\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'GRID_SCALE', {GRID_SCALE: e.scaleNumb});\r\n\r\n    //계량증명서 여부 확인.\r\n    // const chitYn = await gfc_chit_yn_YK(e.scaleNumb);\r\n    gfs_dispatch('INSP_CFRM_MAIN', 'CHIT_INFO', {\r\n      scaleNumb: e.scaleNumb.toString(),\r\n      date     : e.inspect_time\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager type4' >\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp type2' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'360px', height:'42px', fontSize:'16px'}}>\r\n                  <div>\r\n                    <DateTime pgm={this.props.pgm}\r\n                              id='search_fr_dt' />                  \r\n                    <DateTime pgm={this.props.pgm}\r\n                              id='search_to_dt' />\r\n                  </div>  \r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'CODE'\r\n                            display = 'NAME'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              CODE: '1',\r\n                              NAME: '계근번호'\r\n                            },{\r\n                              CODE: '2',\r\n                              NAME: '차량번호'\r\n                            },{\r\n                              CODE: '3',\r\n                              NAME: '등급'\r\n                            },{\r\n                              CODE: '4',\r\n                              NAME: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       readOnly\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        selectionChange={(e) => this.onSelectChange(e)}\r\n                        rowHeight={46}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        headerClick={(e) => {\r\n                          if(e.columnName === 'chk'){\r\n                            const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n                            if(grid.gridEl.dataset.checked === undefined){\r\n                              grid.gridEl.dataset.checked = 'Y';\r\n                            }else if(grid.gridEl.dataset.checked === 'Y'){\r\n                              grid.gridEl.dataset.checked = 'N';\r\n                            }else{\r\n                              grid.gridEl.dataset.checked = 'Y';\r\n                            }\r\n    \r\n                            for(let i = 0; i < grid.getRowCount(); i++){\r\n                              gfg_setValue(grid, 'chk', grid.gridEl.dataset.checked, i);\r\n                            }\r\n                          }\r\n                        }}\r\n                        columns={[\r\n                          columnCheckbox({\r\n                            name: 'chk',\r\n                            header: '선택',\r\n                            width : 50,\r\n                            readOnly: true,\r\n                            align : 'center',\r\n                            type: 'checkbox'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'scaleNumb',\r\n                            header: '계근번호',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'vehicle_no',\r\n                            header: '차량번호',\r\n                            width : 110,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'pre_item_grade',\r\n                            header: '사전등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'iron_grade',\r\n                            header: '등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),    \r\n                          columnInput({\r\n                            name: 'iron_grade_item_name',\r\n                            header: '상세등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'reduce_name',\r\n                            header: '감량사유',\r\n                            width : 180,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'reduce_wgt',\r\n                            header: '감량',\r\n                            width : 80,\r\n                            readOnly: true,\r\n                            align : 'right'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'return_gubun_name',\r\n                            header: '반품내용',\r\n                            width : 200,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'inspector',\r\n                            header: '검수자',\r\n                            width : 100,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),  \r\n                          columnDateTime({\r\n                            name  : 'delivery_date',\r\n                            header: '입고일자',\r\n                            width : 120,\r\n                            height: 38,\r\n                            // paddingTop: ''\r\n                            readOnly: true,\r\n                            valign:'middle',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT')\r\n                          }),\r\n                          columnTextArea({\r\n                            name: 'vendor_name',\r\n                            header: 'Vendor',\r\n                            width : 200,\r\n                            height: 38,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          })\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>전체차량</span><Botspan reducer='INSP_CFRM_MAIN' />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='car_info'>\r\n            <div className='title'><span>계근번호</span><Detailspan flag={1}  reducer='INSP_CFRM_MAIN'/></div>\r\n              <div className='input_list on' id={`content1_${this.props.pgm}`}>\r\n                <ul>\r\n                  <li>\r\n                    <h5>사전등급</h5>\r\n                      <Input pgm     = {this.props.pgm}\r\n                             id      = 'detail_pre_grade'\r\n                             width   = '100%'\r\n                             disabled\r\n                      />\r\n                  </li>\r\n                  <li>\r\n                    <h5>등급책정</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                                id      = 'detail_grade1'\r\n                                value   = 'itemCode'\r\n                                display = 'item'\r\n                                placeholder = '고철등급 검색'\r\n                                height  = {42}\r\n                                oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                  p_division    : 'P005'\r\n                                })}\r\n                                onChange = {async (e) => {\r\n                                  const combo = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n                                  combo.setValue(null);\r\n                                  combo.setDisabled(true);\r\n\r\n                                  if(e !== undefined && e.value !== ''){\r\n                                    await combo.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                      p_division    : e.value\r\n                                    })});\r\n                                    combo.setDisabled(false);\r\n                                  }else{\r\n                                    combo.setDisabled(true);\r\n                                  }\r\n                                }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_grade2'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>감량중량</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_subt'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감량중량 검색(KG)'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P535'\r\n                            })}\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_subt_leg');\r\n                              combo.setValue(null);\r\n                              combo.setDisabled(true);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value !== '0'){\r\n                                // await combo.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                //   p_division    : e.value\r\n                                // })});\r\n                                combo.setDisabled(false);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_subt_leg'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '감량사유 검색'\r\n                          oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                            p_division    : 'P620'\r\n                          })}\r\n                          isDisabled\r\n                    /> \r\n                  </li>\r\n                  <li>\r\n                    <h5>감가내역</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_depr'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감가내역 검색'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P130'\r\n                            })}\r\n                            emptyRow\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_depr2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e !== undefined && e.value !== ''){\r\n                                combo.setDisabled(false);\r\n                              }else{\r\n                                combo.setDisabled(true);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm = {this.props.pgm}\r\n                          id      = 'detail_depr2'\r\n                          value   = 'CODE'\r\n                          display = 'NAME'\r\n                          placeholder = '감가비율'\r\n                          isDisabled\r\n                          data    = {[{\r\n                            'CODE': '10',\r\n                            'NAME': '10%'\r\n                          },{\r\n                            'CODE': '20',\r\n                            'NAME': '20%'\r\n                          },{\r\n                            'CODE': '30',\r\n                            'NAME': '30%'\r\n                          },{\r\n                            'CODE': '40',\r\n                            'NAME': '40%'\r\n                          },{\r\n                            'CODE': '50',\r\n                            'NAME': '50%'\r\n                          },{\r\n                            'CODE': '60',\r\n                            'NAME': '60%'\r\n                          },{\r\n                            'CODE': '70',\r\n                            'NAME': '70%'\r\n                          },{\r\n                            'CODE': '80',\r\n                            'NAME': '80%'\r\n                          },{\r\n                            'CODE': '90',\r\n                            'NAME': '90%'\r\n                          },{\r\n                            'CODE': '100',\r\n                            'NAME': '100%'\r\n                          }]}\r\n                          // emptyRow\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>차종구분</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_car'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '차종선택'\r\n                          oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                            p_division    : 'P700'\r\n                          })}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>하차구역</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_out'\r\n                          value   = 'itemCode'\r\n                          display = 'itemCode'\r\n                          placeholder = '차종선택'\r\n                          oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                            p_division    : 'P530'\r\n                          })}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>반품구분</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '일부,전량 선택'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P110'\r\n                            })}\r\n                            emptyRow\r\n                            onChange = {e => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_rtn2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value === ''){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                combo.setDisabled(false);\r\n                              }\r\n                            }}\r\n                    />\r\n                  </div>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn2'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P120'\r\n                            })}\r\n                            isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>경고</h5>\r\n                    <Checkbox pgm   = {this.props.pgm}\r\n                              id    = 'detail_warning'\r\n                              width = '30px'\r\n                              height= '30px'\r\n\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>강수량</h5>\r\n                      <Input pgm     = {this.props.pgm}\r\n                             id      = 'detail_rain'\r\n                             width   = '100%'\r\n                             disabled\r\n                      />\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <CompleteBtnModify pgm='INSP_CFRM' />\r\n          </div>\r\n\r\n          <div className='car_info'>\r\n            <div className=\"top_btns\">\r\n              <button \r\n                type=\"button\" \r\n                className=\"record\"\r\n                onClick={e => {\r\n                  const scaleNumb = gfs_getStoreValue('INSP_CFRM_MAIN', 'DETAIL_SCALE');\r\n                  \r\n                  if(scaleNumb === '' || scaleNumb === null){\r\n                    alert('선택된 계근번호가 없습니다.');\r\n                    return;\r\n                  }\r\n\r\n                  window.open(`HLSViewer?scaleNumb=${scaleNumb}`, `Snapshot`, 'width=1024, height=768, toolbar=no, menubar=no, scrollbars=no, resizable=yes' ); \r\n                }}><span>녹화영상</span></button>\r\n              <button \r\n                type=\"button\" \r\n                className=\"shot\"\r\n                onClick={e => {\r\n                  const scaleNumb = gfs_getStoreValue('INSP_CFRM_MAIN', 'DETAIL_SCALE');\r\n                  \r\n                  if(scaleNumb === '' || scaleNumb === null){\r\n                    alert('선택된 계근번호가 없습니다.');\r\n                    return;\r\n                  }\r\n\r\n                  window.open(`SnapShot?scaleNumb=${scaleNumb}`, `Snapshot`, 'width=1024, height=768, toolbar=no, menubar=no, scrollbars=no, resizable=yes' ); \r\n                }}\r\n              ><span>스냅샷</span></button>\r\n            </div>\r\n            <Chit pgm={this.props.pgm} id={'chit_memo'} reducer='INSP_CFRM_MAIN'/>\r\n              \r\n            <CompleteBtn pgm='INSP_CFRM' />\r\n          </div>\r\n            {/* <div className='cctv_viewer'>\r\n              <h4>녹화영상</h4>\r\n              <div className='cctv_list'>\r\n                <RecImage \r\n                  seq   = {1}\r\n                  reducer = 'INSP_CFRM_MAIN'\r\n                  cam   = 'STD_CAM_OPEN' \r\n                  focus = 'STD_CAM_FOCUS' \r\n                  rec   = 'STD_CAM_REC' \r\n                  image = 'STD_CAM_IMG'/> \r\n                <RecImage\r\n                  seq   = {2}\r\n                  reducer = 'INSP_CFRM_MAIN'\r\n                  cam   = 'DUM_CAM_OPEN' \r\n                  focus = 'DUM_CAM_FOCUS' \r\n                  rec   = 'DUM_CAM_REC' \r\n                  image = 'DUM_CAM_IMG'/> \r\n              </div>\r\n            </div> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default INSP_CFRM;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\TabList.js",[],"D:\\Project\\01.YK\\react\\src\\Component\\Control\\Checkbox.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\CompleteBtn.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\RecImage.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\RecImageDtl.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\TabList.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\INSP_CANC.js",["708","709","710","711","712","713"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\nimport Checkbox from '../../../Component/Control/Checkbox';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_chit_yn_YK, gfc_sleep, gfc_yk_call_sp } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue, gfs_injectAsyncReducer, gfs_dispatch, gfs_subscribe } from '../../../Method/Store';\r\nimport { gfo_getCombo, gfo_getInput, gfo_getCheckbox } from '../../../Method/Component';\r\nimport { gfg_getGrid, gfg_setSelectRow, gfg_setValue, gfg_appendRow } from '../../../Method/Grid';\r\nimport { getDynamicSql_Oracle } from '../../../db/Oracle/Oracle';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { TextArea as columnTextArea } from '../../../Component/Grid/Column/TextArea';\r\nimport { Checkbox as columnCheckbox } from '../../../Component/Grid/Column/Checkbox';\r\nimport { DateTime as columnDateTime } from '../../../Component/Grid/Column/DateTime';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\nimport Detailspan from '../Common/Detailspan';\r\nimport Botspan from '../Common/Botspan';\r\nimport Chit from './Chit';\r\nimport TabList from './TabList';\r\nimport RecImage from './RecImage';\r\nimport CompleteBtn from './CompleteBtn';\r\n//#endregion\r\n\r\nclass INSP_CANC extends Component {\r\n\r\n  state = {\r\n    wait_list: [],\r\n    scaleNumb: ''\r\n  }\r\n\r\n  onTabChg = async() => {\r\n\r\n  }\r\n\r\n  //#region onActiveWindow 스토어 subscribe로 실행됨.\r\n  onActiveWindow = () => {\r\n    const activeWindow = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'activeWindow');\r\n    if(activeWindow.programId === 'INSP_CANC'){\r\n      this.onTabChg();\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#endregion\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const INSP_CANC_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'INSP_CANC_MAIN') {\r\n        return {\r\n          MAIN_WAIT    : nowState === undefined ? 0 : nowState.MAIN_WAIT,\r\n          MAIN_TOTAL   : nowState === undefined ? 0 : nowState.MAIN_TOTAL,\r\n          MAIN_WEIGHT  : nowState === undefined ? 0 : nowState.MAIN_WEIGHT,\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n          PROC_WAIT    : nowState === undefined ? 0 : nowState.PROC_WAIT,\r\n          DEPT_WAIT    : nowState === undefined ? 0 : nowState.DEPT_WAIT,\r\n          ENTR_WAIT    : nowState === undefined ? 0 : nowState.ENTR_WAIT,\r\n \r\n          DETAIL_SCALE : nowState === undefined ? '' : nowState.DETAIL_SCALE,\r\n          DETAIL_CARNO : nowState === undefined ? '' : nowState.DETAIL_CARNO,\r\n          DETAIL_WEIGHT: nowState === undefined ? '' : nowState.DETAIL_WEIGHT,\r\n          DETAIL_DATE  : nowState === undefined ? '' : nowState.DETAIL_DATE,\r\n\r\n          GRID_SCALE   : nowState === undefined ? '' : nowState.GRID_SCALE,\r\n\r\n          STD_CAM_IMG  : nowState === undefined ? null : nowState.STD_CAM_IMG,\r\n          DUM_CAM_IMG  : nowState === undefined ? null : nowState.DUM_CAM_IMG,\r\n\r\n          STD_CAM_OPEN : nowState === undefined ? false : nowState.STD_CAM_OPEN,\r\n          DUM_CAM_OPEN : nowState === undefined ? false : nowState.DUM_CAM_OPEN,\r\n\r\n          STD_CAM_FOCUS: nowState === undefined ? false : nowState.STD_CAM_FOCUS,\r\n          DUM_CAM_FOCUS: nowState === undefined ? false : nowState.DUM_CAM_FOCUS,\r\n\r\n          STD_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.STD_CAM_REC,\r\n          DUM_CAM_REC  : nowState === undefined ? {\r\n                                                    rec     : false,\r\n                                                    time    : '00:00'\r\n                                                  } : nowState.DUM_CAM_REC,\r\n\r\n          CHIT_MEMO    : nowState === undefined ? '' : nowState.CHIT_MEMO,\r\n          \r\n          CHIT_INFO    : nowState === undefined ? {\r\n                                                    date     : '',\r\n                                                    scaleNumb: '',\r\n                                                    carNumb  : '',\r\n                                                    vender   : '',\r\n                                                    itemFlag : '',\r\n                                                    Wgt      : '',\r\n                                                    loc      : '',\r\n                                                    user     : '',\r\n                                                    chit     : 'N',\r\n                                                  } : nowState.CHIT_INFO\r\n        };\r\n      }\r\n\r\n      if(action.type === 'MAIN_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WAIT : action.MAIN_WAIT\r\n        })\r\n      }else if(action.type === 'MAIN_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_TOTAL : action.MAIN_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WEIGHT : action.MAIN_WEIGHT\r\n        })\r\n      }else if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }else if(action.type === 'PROC_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          PROC_WAIT : action.PROC_WAIT\r\n        })\r\n      }else if(action.type === 'DEPT_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEPT_WAIT : action.DEPT_WAIT\r\n        })\r\n      }else if(action.type === 'ENTR_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ENTR_WAIT : action.ENTR_WAIT\r\n        })\r\n      }else if(action.type === 'DETAIL_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_SCALE : action.DETAIL_SCALE\r\n        })\r\n      }else if(action.type === 'GRID_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          GRID_SCALE : action.GRID_SCALE\r\n        })\r\n      }else if(action.type === 'DETAIL_CARNO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_CARNO : action.DETAIL_CARNO\r\n        })\r\n      }else if(action.type === 'DETAIL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_WEIGHT : action.DETAIL_WEIGHT\r\n        })\r\n      }else if(action.type === 'DETAIL_DATE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_DATE : action.DETAIL_DATE\r\n        })\r\n      }else if(action.type === 'STD_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_IMG : action.STD_CAM_IMG\r\n        })\r\n      }else if(action.type === 'DUM_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_IMG : action.DUM_CAM_IMG\r\n        })\r\n      }else if(action.type === 'STD_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_OPEN : action.STD_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'DUM_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_OPEN : action.DUM_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'STD_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_FOCUS : action.STD_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'DUM_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_FOCUS : action.DUM_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.STD_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.DUM_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec     : nowState.STD_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec     : nowState.DUM_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO_ITEM_FLAG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     :  nowState.CHIT_INFO.date,\r\n            scaleNumb:  nowState.CHIT_INFO.scaleNumb,\r\n            carNumb  :  nowState.CHIT_INFO.carNumb,\r\n            vender   :  nowState.CHIT_INFO.vender,\r\n            itemFlag :  action.itemFlag,\r\n            Wgt      :  nowState.CHIT_INFO.Wgt,\r\n            loc      :  nowState.CHIT_INFO.loc,\r\n            user     :  nowState.CHIT_INFO.user,\r\n            chit     :  nowState.CHIT_INFO.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     : action.date,\r\n            scaleNumb: action.scaleNumb,\r\n            carNumb  : action.carNumb,\r\n            vender   : action.vender,\r\n            itemFlag : action.itemFlag,\r\n            Wgt      : action.Wgt,\r\n            loc      : action.loc,\r\n            user     : action.user,\r\n            chit     : action.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_MEMO'){\r\n        return Object.assign({}, nowState, {\r\n          CHIT_MEMO : action.CHIT_MEMO\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('INSP_CANC_MAIN', INSP_CANC_MAIN);\r\n    gfs_subscribe(this.onActiveWindow);\r\n    //#endregion\r\n  }\r\n\r\n  Retrieve = async () => {\r\n\r\n    gfc_showMask();\r\n\r\n    const mainData = await gfc_yk_call_sp('SP_ZM_APPROVE_CANCEL');\r\n    \r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    grid.clear();\r\n\r\n    gfo_getInput(this.props.pgm, 'pre_item_grade').setValue(''); //사전등급\r\n    gfo_getInput(this.props.pgm, 'iron_grade').setValue('');   //고철등급\r\n    gfo_getInput(this.props.pgm, 'iron_grade_item_name').setValue('');   //상세고철등급\r\n    gfo_getInput(this.props.pgm, 'reduce_wgt').setValue('');     //감량중량\r\n    gfo_getInput(this.props.pgm, 'reduce_name').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'return_code').setValue('');      //반품구분\r\n    gfo_getInput(this.props.pgm, 'return_gubun_name').setValue('');     //반품구분사유\r\n    gfo_getCombo(this.props.pgm, 'return_reason').setValue('');      //취소사유\r\n    gfo_getInput(this.props.pgm, 'return_reason_desc').setValue('');     //취소사유\r\n\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: ''});\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n\r\n    gfs_dispatch('INSP_CANC_MAIN', 'GRID_SCALE', {GRID_SCALE: ''});\r\n\r\n    //계량증명서 여부 확인.\r\n    gfs_dispatch('INSP_CANC_MAIN', 'CHIT_INFO', {\r\n      scaleNumb: ''\r\n    });\r\n\r\n    if(mainData.data.SUCCESS === 'Y'){\r\n      const main = mainData.data.ROWS;\r\n      if(main){\r\n        const dataMod = [];\r\n        main.forEach(e => {\r\n          dataMod.push({\r\n            scaleNumb: e['DELIVERY_ID'],\r\n            vehicle_no: e['VEHICLE_NO'],\r\n            pre_item_grade: e['PRE_ITEM_GRADE'],\r\n            iron_grade: e['IRON_GRADE'],\r\n            iron_grade_item_name: e['IRON_GRADE_ITEM_NAME'],\r\n            reduce_name\t: e['REDUCE_NAME'],\r\n            reduce_wgt: e['REDUCE_WGT'],\r\n            return_gubun: e['RETURN_GUBUN'],\r\n            return_gubun_name: e['RETURN_GUBUN_NAME'],\r\n            inspector: e['INSPECTOR'],\r\n            delivery_date: e['DELIVERY_DATE'],\r\n            vendor_name: e['VENDOR_NAME'],\r\n            inspect_time: e['INSPECT_TIME']\r\n          })\r\n        })\r\n\r\n        grid.resetData(dataMod);\r\n        gfs_dispatch('INSP_CANC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: main.length});\r\n        \r\n        await gfc_sleep(100);\r\n  \r\n        gfg_setSelectRow(grid);\r\n      }else{\r\n        gfs_dispatch('INSP_CANC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      }\r\n    }else{\r\n      gfs_dispatch('INSP_CANC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n    }\r\n\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n  componentDidMount(){\r\n\r\n    this.Retrieve();\r\n  }\r\n\r\n  onSelectChange = async (e) => {\r\n    if(e === null) return;\r\n\r\n    gfo_getInput(this.props.pgm, 'pre_item_grade').setValue(e.pre_item_grade); //사전등급\r\n    gfo_getInput(this.props.pgm, 'iron_grade').setValue(e.iron_grade);   //고철등급\r\n    gfo_getInput(this.props.pgm, 'iron_grade_item_name').setValue(e.iron_grade_item_name);   //상세고철등급\r\n    gfo_getInput(this.props.pgm, 'reduce_wgt').setValue(e.reduce_wgt);     //감량중량\r\n    gfo_getInput(this.props.pgm, 'reduce_name').setValue(e.reduce_name); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'return_code').setValue(e.return_gubun);      //반품구분\r\n    gfo_getInput(this.props.pgm, 'return_gubun_name').setValue(e.return_gubun_name);     //반품구분사유\r\n\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: e.scaleNumb});\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: e.vehicle_no});\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: e.net_weight});\r\n    gfs_dispatch('INSP_CANC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: e.delivery_date});\r\n\r\n    gfs_dispatch('INSP_CANC_MAIN', 'GRID_SCALE', {GRID_SCALE: e.scaleNumb});\r\n\r\n    //계량증명서 여부 확인.\r\n    gfs_dispatch('INSP_CANC_MAIN', 'CHIT_INFO', {\r\n      scaleNumb: e.scaleNumb.toString(),\r\n      date     : e.inspect_time\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager type4' >\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'CODE'\r\n                            display = 'NAME'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              CODE: '1',\r\n                              NAME: '계근번호'\r\n                            },{\r\n                              CODE: '2',\r\n                              NAME: '차량번호'\r\n                            },{\r\n                              CODE: '3',\r\n                              NAME: '등급'\r\n                            },{\r\n                              CODE: '4',\r\n                              NAME: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       readOnly\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        selectionChange={(e) => this.onSelectChange(e)}\r\n                        rowHeight={46}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        headerClick={(e) => {\r\n                          if(e.columnName === 'chk'){\r\n                            const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n                            if(grid.gridEl.dataset.checked === undefined){\r\n                              grid.gridEl.dataset.checked = 'Y';\r\n                            }else if(grid.gridEl.dataset.checked === 'Y'){\r\n                              grid.gridEl.dataset.checked = 'N';\r\n                            }else{\r\n                              grid.gridEl.dataset.checked = 'Y';\r\n                            }\r\n    \r\n                            for(let i = 0; i < grid.getRowCount(); i++){\r\n                              gfg_setValue(grid, 'chk', grid.gridEl.dataset.checked, i);\r\n                            }\r\n                          }\r\n                        }}\r\n                        columns={[\r\n                          columnCheckbox({\r\n                            name: 'chk',\r\n                            header: '선택',\r\n                            width : 50,\r\n                            readOnly: true,\r\n                            align : 'center',\r\n                            type: 'checkbox'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'scaleNumb',\r\n                            header: '계근번호',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'vehicle_no',\r\n                            header: '차량번호',\r\n                            width : 110,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'pre_item_grade',\r\n                            header: '사전등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'iron_grade',\r\n                            header: '등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),    \r\n                          columnInput({\r\n                            name: 'iron_grade_item_name',\r\n                            header: '상세등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'reduce_name',\r\n                            header: '감량사유',\r\n                            width : 180,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'reduce_wgt',\r\n                            header: '감량',\r\n                            width : 80,\r\n                            readOnly: true,\r\n                            align : 'right'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'return_gubun_name',\r\n                            header: '반품내용',\r\n                            width : 200,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'inspector',\r\n                            header: '검수자',\r\n                            width : 100,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),  \r\n                          columnDateTime({\r\n                            name  : 'delivery_date',\r\n                            header: '입고일자',\r\n                            width : 120,\r\n                            height: 38,\r\n                            // paddingTop: ''\r\n                            readOnly: true,\r\n                            valign:'middle',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT')\r\n                          }),\r\n                          columnTextArea({\r\n                            name: 'vendor_name',\r\n                            header: 'Vendor',\r\n                            width : 200,\r\n                            height: 38,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          })\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>전체차량</span><Botspan reducer='INSP_CANC_MAIN' />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='car_info'>\r\n            <div className='title'><span>계근번호</span><Detailspan flag={1}  reducer='INSP_CANC_MAIN'/></div>\r\n\r\n            <div className='input_list on' id={`content1_${this.props.pgm}`}>\r\n            <ul>\r\n                  <li>\r\n                    <h5>취소사유</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <div style={{marginBottom:'5px'}}>\r\n                        <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'return_reason'\r\n                              value   = 'CODEID'\r\n                              display = 'KORFNM'\r\n                              oracleData = {getDynamicSql_Oracle(\r\n                                 'Common/Common',\r\n                                 'INSP_CANC_REASON',\r\n                                 {}, {})}\r\n                        />\r\n                      </div>\r\n                      <Input pgm     = {this.props.pgm}\r\n                             id      = 'return_reason_desc'\r\n                             width   = '100%'\r\n                      />\r\n                    </div>\r\n                  </li>\r\n                  <li>\r\n                    <h5>사전등급</h5>\r\n                      <Input pgm     = {this.props.pgm}\r\n                             id      = 'pre_item_grade'\r\n                             width   = '100%'\r\n                             disabled\r\n                      />\r\n                  </li>\r\n                  <li>\r\n                    <h5>등급</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Input pgm     = {this.props.pgm}\r\n                             id      = 'iron_grade'\r\n                             width   = '100%'\r\n                             disabled\r\n                      />\r\n                    </div>\r\n                    <Input pgm     = {this.props.pgm}\r\n                            id      = 'iron_grade_item_name'\r\n                            width   = '100%'\r\n                            disabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>감량중량</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Input pgm     = {this.props.pgm}\r\n                              id      = 'reduce_wgt'\r\n                              width   = '100%'\r\n                              disabled\r\n                      />\r\n                    </div>\r\n                    <Input pgm     = {this.props.pgm}\r\n                            id      = 'reduce_name'\r\n                            width   = '100%'\r\n                            disabled\r\n                    />\r\n                  </li>\r\n                  {/* <li>\r\n                    <h5>하차구역</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_out'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '하차구역 검색(SECTOR)'\r\n                          data    = ''\r\n                          onFocus = {ComboCreate => {\r\n                            YK_WEB_REQ('tally_process_pop.jsp?division=P530', {})\r\n                              .then(res => {\r\n                                ComboCreate({data   : res.data.dataSend,\r\n                                            value  : 'itemCode',\r\n                                            display: 'item'});\r\n                              })\r\n                          }}\r\n                  />\r\n                  </li> */}\r\n                  <li>\r\n                    <h5>반품내용</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <div style={{marginBottom:'5px'}}>\r\n                        <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'return_code'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              isDisabled\r\n                              oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                p_division    : 'P110'\r\n                              })}\r\n                        />\r\n                      </div>\r\n                      <Input pgm     = {this.props.pgm}\r\n                              id      = 'return_gubun_name'\r\n                              width   = '100%'\r\n                              disabled\r\n                      />\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n          </div>\r\n\r\n          <div className='car_info'>\r\n            <div className=\"top_btns\">\r\n              <button \r\n                type=\"button\" \r\n                className=\"record\"\r\n                onClick={e => {\r\n                  const scaleNumb = gfs_getStoreValue('INSP_CANC_MAIN', 'DETAIL_SCALE');\r\n                  \r\n                  if(scaleNumb === '' || scaleNumb === null){\r\n                    alert('선택된 계근번호가 없습니다.');\r\n                    return;\r\n                  }\r\n\r\n                  window.open(`HLSViewer?scaleNumb=${scaleNumb}`, `Snapshot`, 'width=1024, height=768, toolbar=no, menubar=no, scrollbars=no, resizable=yes' ); \r\n                }}><span>녹화영상</span></button>\r\n              <button \r\n                type=\"button\" \r\n                className=\"shot\"\r\n                onClick={e => {\r\n                  const scaleNumb = gfs_getStoreValue('INSP_CANC_MAIN', 'DETAIL_SCALE');\r\n                  \r\n                  if(scaleNumb === '' || scaleNumb === null){\r\n                    alert('선택된 계근번호가 없습니다.');\r\n                    return;\r\n                  }\r\n\r\n                  window.open(`SnapShot?scaleNumb=${scaleNumb}`, `Snapshot`, 'width=1024, height=768, toolbar=no, menubar=no, scrollbars=no, resizable=yes' ); \r\n                }}><span>스냅샷</span></button>\r\n            </div>\r\n            <Chit pgm={this.props.pgm} id={'chit_memo'} reducer='INSP_CANC_MAIN'/>\r\n              \r\n            <CompleteBtn pgm='INSP_CANC'/>\r\n          </div>\r\n            {/* <div className='cctv_viewer'>\r\n              <h4>녹화영상</h4>\r\n              <div className='cctv_list'>\r\n                <RecImage \r\n                  seq   = {1}\r\n                  cam   = 'STD_CAM_OPEN' \r\n                  focus = 'STD_CAM_FOCUS' \r\n                  rec   = 'STD_CAM_REC' \r\n                  image = 'STD_CAM_IMG'/> \r\n                <RecImage\r\n                  seq   = {2}\r\n                  cam   = 'DUM_CAM_OPEN' \r\n                  focus = 'DUM_CAM_FOCUS' \r\n                  rec   = 'DUM_CAM_REC' \r\n                  image = 'DUM_CAM_IMG'/> \r\n              </div>\r\n            </div> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default INSP_CANC;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RecImageDtl.js",["714"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { MILESTONE, RTSP } from '../../../WebReq/WebReq';\r\nimport Modal from 'react-modal';\r\nimport { Rnd } from 'react-rnd';\r\nimport { gfs_dispatch, gfs_getStoreValue, gfs_injectAsyncReducer } from '../../../Method/Store';\r\nimport { gfc_showMask, gfc_sleep, gfc_hideMask, gfc_screenshot_srv_from_milestone } from '../../../Method/Comm';\r\n\r\nconst jsmpeg = require('jsmpeg');\r\n\r\nfunction RecImageDtl(props) {\r\n  const imageRef = useRef();\r\n  const dragRef = useRef();\r\n\r\n  const isOpen = useSelector((e) => {\r\n    return e.INSP_PROC_MAIN[props.cam];\r\n  }, (p, n) => {\r\n    return p === n;\r\n  });\r\n  \r\n  const setModalIsOpen = (open) => {\r\n    \r\n    let obj = {};\r\n    obj[props.cam] = open;\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', props.cam, obj);\r\n  }\r\n\r\n  const start = async() => {\r\n      MILESTONE({reqAddr: 'CONNECT',\r\n                 device : props.device})\r\n  }\r\n\r\n  const style={\r\n    overlay: {\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      zIndex: 1000,\r\n      backgroundColor: 'rgba(255, 255, 255, 0.75)'\r\n    },\r\n    content: {\r\n      position: 'absolute',\r\n      top: '40px',\r\n      left: '40px',\r\n      right: '40px',\r\n      bottom: '40px',\r\n      height:'auto',\r\n      // border: '1px solid #ccc',\r\n      // background: '#fff',\r\n      overflow: 'auto',\r\n      WebkitOverflowScrolling: 'touch',\r\n      borderRadius: '4px',\r\n      outline: 'none',\r\n      // padding: '20px'\r\n    }\r\n  };\r\n\r\n  let client = null;\r\n  let canvas = null;\r\n  const setRtsp = () => {\r\n    client = new WebSocket(`ws://ims.yksteel.co.kr:90/ws/${props.cameraPort}`);\r\n    canvas = imageRef.current;\r\n    new jsmpeg(client, {\r\n      canvas,\r\n      // pauseWhenHidden: false \r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    start();\r\n\r\n    if(props.seq > 2){\r\n      const dragReducer = (nowState, action) => {\r\n        if(action.reducer !== 'INSP_PROC_MAIN_DRAG') {\r\n          return {\r\n            CLICK: nowState === undefined ? false :nowState.CLICK\r\n          }\r\n        }\r\n\r\n        if(action.type === 'ONMOUSEDOWN'){\r\n\r\n          return Object.assign({}, nowState, {\r\n            CLICK : action.CLICK\r\n          })\r\n        }\r\n      }\r\n\r\n      gfs_injectAsyncReducer('INSP_PROC_MAIN_DRAG', dragReducer);\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  useEffect(() => { \r\n\r\n    RTSP({reqAddr: 'RTSPStart',\r\n          device   : props.device, \r\n          // streamUrl: `rtsp://admin:admin@10.10.10.136:554/live/${props.device}`,\r\n          streamUrl: props.rtspAddr,\r\n          port: props.cameraPort,\r\n          width: 1920,\r\n          height: 1080,\r\n          fps: 24\r\n        }).then(e => {\r\n          if(e.data === 'OK'){\r\n            setRtsp();\r\n          }\r\n        })\r\n\r\n    return() => {\r\n      if(client !== null && client !== undefined){\r\n        client.close();\r\n      }\r\n    }\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isOpen, props.rtspAddr])\r\n\r\n  // const debounceOnClick = throttle((e, ptz) => {\r\n  //   TOKEN({}).then(e => {\r\n\r\n  //     MILESTONE({reqAddr: 'PTZ',\r\n  //     device: props.device,\r\n  //     ptz})\r\n  //   })\r\n\r\n  // }, 1000);\r\n\r\n  const debounceOnClick = (e, ptz) => {\r\n    MILESTONE({reqAddr: 'PTZ',\r\n    device: props.device,\r\n    ptz})\r\n\r\n  };\r\n\r\n  const onClick = (e, ptz) => {\r\n    e.stopPropagation();\r\n    debounceOnClick(e, ptz);\r\n  }\r\n\r\n  const img = <>\r\n                {(props.seq < 3 || isOpen === true)?\r\n                  <>\r\n                    <canvas \r\n                      data-seq={props.seq}\r\n                      ref={imageRef} \r\n                      style={{\r\n                        width:'100%', \r\n                        height:'100%'\r\n                      }}\r\n                      onDoubleClick={e => {\r\n                        // setModalIsOpen(true);\r\n                        const areaTp = gfs_getStoreValue('USER_REDUCER', 'AREA_TP');\r\n                        window.open(`RtspFullScreen?areaTp=${areaTp}`, `RTSP`, 'width=1920, height=1080, toolbar=no, menubar=no, scrollbars=no, resizable=yes' ); \r\n                      }}\r\n                    />\r\n                    <div className='picture_save' onClick={e => {\r\n                      const scaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n                      if(scaleNumb === '' || scaleNumb === undefined || scaleNumb === null){\r\n                        alert('선택된 계근번호가 없습니다.');\r\n                        return;\r\n                      }\r\n\r\n                      gfc_showMask();\r\n\r\n                      gfc_screenshot_srv_from_milestone(props.device, scaleNumb).then(\r\n                        e => {\r\n                          gfc_hideMask();\r\n                          if(e.data.Result !== 'OK'){\r\n                            alert('파일저장에 실패 했습니다.');\r\n                          }\r\n                        }\r\n                      )\r\n                    }}>\r\n                    </div>\r\n                    \r\n                    <div className='direction'>\r\n                      <button \r\n                        type='' \r\n                        className='left' \r\n                        onClick={e => {\r\n                          e.stopPropagation();\r\n                          onClick(e, 'left')}}>왼쪽\r\n                      </button>\r\n                      <button \r\n                        type='' \r\n                        className='top' \r\n                        onClick={e => {\r\n                          e.stopPropagation();\r\n                          onClick(e, 'up')}}>위쪽\r\n                      </button>\r\n                      <button \r\n                        type='' \r\n                        className='down' \r\n                        onClick={e => {\r\n                          e.stopPropagation();\r\n                          onClick(e, 'down')}}>아래\r\n                      </button>\r\n                      <button \r\n                        type='' \r\n                        className='right' \r\n                        onClick={e => {\r\n                          e.stopPropagation();\r\n                          onClick(e, 'right')}}>오른쪽\r\n                      </button>\r\n                    </div>\r\n                    <div className={isOpen === true ? 'controller on' : 'controller'}>\r\n                      <button type='' className='plus' onClick={e => {\r\n                        e.stopPropagation();\r\n                        onClick(e, 'zoomin')}}>확대</button>\r\n                      <button type='' className='minus' onClick={e => {\r\n                        e.stopPropagation();\r\n                        onClick(e, 'zoomout')}}>축소</button>\r\n                    </div>\r\n                  </>\r\n\r\n                  :\r\n                  \r\n                  <div\r\n                  >\r\n                    <Rnd\r\n                      ref={dragRef}\r\n                      default={{\r\n                        x: 0,\r\n                        y: 0,\r\n                        width: '100%',\r\n                        height: '100%'\r\n                      }}\r\n                      style={{\r\n                        // zIndex: 100,\r\n                        overflow:'hidden'\r\n                      }}\r\n                      enableResizing={false}\r\n                      onDragStop={(e, data) => {\r\n                        dragRef.current.updatePosition({x:0, y:0});\r\n                      }}\r\n                    >\r\n                      <canvas \r\n                        ref={imageRef} \r\n                        style={{\r\n                          width:'100%', \r\n                          height:'100%',\r\n                          overflow:'hidden'\r\n                        }}\r\n                        onDoubleClick={e => {\r\n                          setModalIsOpen(true);\r\n                        }}\r\n                        data-seq={props.seq}\r\n                        onMouseOver={e => e.stopPropagation()}\r\n                        onMouseDown={async e => {\r\n                          // e.stopPropagation();\r\n                          await gfc_sleep(50);\r\n                          gfs_dispatch('INSP_PROC_MAIN_DRAG', 'ONMOUSEDOWN', {CLICK: false});\r\n                        }}\r\n                        onMouseUp={async e => {\r\n                          // e.stopPropagation();\r\n                          await gfc_sleep(50);\r\n                          gfs_dispatch('INSP_PROC_MAIN_DRAG', 'ONMOUSEDOWN', {CLICK: true});\r\n                        }}\r\n                      />\r\n                    </Rnd>\r\n                  </div>\r\n                }\r\n              </>;\r\n\r\n  return (\r\n    <>\r\n      {isOpen === false ? img : \r\n        <Modal style={style}\r\n              className='cctv'\r\n              isOpen={isOpen} \r\n              onRequestClose={() => setModalIsOpen(false)} \r\n              ariaHideApp={false}>\r\n              {img}\r\n        </Modal>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RecImageDtl;","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\MENU\\Menu.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\COMM\\MENU\\MENU.js",["715","716"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_getAtt } from '../../../Method/Comm';\r\nimport { gfs_injectAsyncReducer, gfs_dispatch, gfs_getStoreValue } from '../../../Method/Store';\r\nimport { gfg_getGrid, gfg_getRow, gfg_appendRow, gfg_getModyfiedRow, gfg_setSelectRow, gfg_getRowCount } from '../../../Method/Grid';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport Layout from '../../../Component/Layout/Layout';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Combobox as columnCombobox }  from '../../../Component/Grid/Column/Combobox';\r\nimport { Number as columnNumber} from '../../../Component/Grid/Column/Number';\r\nimport { Checkbox as columnCheckbox } from '../../../Component/Grid/Column/Checkbox';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\n// import Botspan from '../Common/Botspan';\r\n\r\nimport { getDynamicSql_Oracle } from '../../../db/Oracle/Oracle';\r\nimport { getSp_Oracle } from '../../../db/Oracle/Oracle';\r\nimport { YK_WEB_REQ } from '../../../WebReq/WebReq';\r\n//#endregion\r\n\r\nclass MENU extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const MENU_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'MENU_MAIN') {\r\n        return {\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n        };\r\n      }\r\n\r\n      if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('MENU_MAIN', MENU_MAIN);\r\n    //#endregion\r\n  }\r\n\r\n  componentDidMount(){\r\n    \r\n  }\r\n\r\n  callOracle = async(file, fn, param) => {\r\n    let result = await getDynamicSql_Oracle(\r\n      file,\r\n      fn,\r\n      param\r\n    ); \r\n\r\n    return result;\r\n  }\r\n\r\n  Delete = () => {\r\n    // const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    // const selectRow = gfg_getRow(grid);\r\n    // if(selectRow === null){\r\n    //   alert('선택된건이 없습니다.');\r\n    //   return;\r\n    // }\r\n\r\n    // if(selectRow.phantom){\r\n    //   grid.removeRow(selectRow['rowKey']);\r\n    //   return;\r\n    // }else{\r\n    //   this.callOracle(\r\n    //     'Common/Common',\r\n    //     'ZM_IMS_CAMERA_DELETE',\r\n    //     [{\r\n    //       AREA_TP: selectRow.AREA_TP,\r\n    //       CAMERA_IP: selectRow.CAMERA_IP\r\n    //     }]\r\n    //   )\r\n    // }\r\n    \r\n    // grid.resetOriginData()\r\n    // grid.restore();\r\n\r\n    // this.Retrieve();\r\n  }\r\n\r\n  Save = async() => {\r\n    const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n    const dtlGrid = gfg_getGrid(this.props.pgm, 'detail10');\r\n\r\n    if(gfg_getRowCount(mainGrid) === 0){\r\n      alert('데이터가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    if(gfg_getRowCount(dtlGrid) === 0){\r\n      alert('데이터가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    const dtlMod = gfg_getModyfiedRow(dtlGrid);\r\n    if(dtlMod.length === 0){\r\n      alert('추가되거나 수정된건 이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    let param = [];\r\n\r\n    dtlMod.forEach(e => {\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_MENU_DETAIL10(\r\n                    :p_COP_CD,\r\n                    :p_RowStatus,\r\n                    :p_MENU_GRP,\r\n                    :p_MENU_ID,\r\n                    :p_MENU_NAM,\r\n                    :p_USE_YN,\r\n                    :p_PGM_ID,\r\n                    :p_PGM_ROOT,\r\n                    :p_MENU_SEQ, \r\n                    :p_RETAUT_YN,\r\n                    :p_INSAUT_YN,\r\n                    :p_SAVAUT_YN,\r\n                    :p_DELAUT_YN,\r\n                    :p_USER_ID,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n          p_RowStatus : e.rowStatus,\r\n          p_MENU_GRP  : gfg_getRow(mainGrid).MENU_ID,\r\n          p_MENU_ID   : e.MENU_ID,\r\n          p_MENU_NAM  : e.MENU_NAM,\r\n          p_USE_YN    : e.USE_YN,\r\n          p_PGM_ID    : e.PGM_ID,\r\n          p_PGM_ROOT  : e.PGM_ROOT,\r\n          p_MENU_SEQ  : e.MENU_SEQ,\r\n          p_RETAUT_YN : e.RETAUT_YN,\r\n          p_INSAUT_YN : e.INSAUT_YN,\r\n          p_SAVAUT_YN : e.SAVAUT_YN,\r\n          p_DELAUT_YN : e.DELAUT_YN,\r\n          p_USER_ID   : gfs_getStoreValue('USER_REDUCER', 'USER_ID')\r\n        },\r\n        errSeq: e.rowKey\r\n      })\r\n    })\r\n\r\n    gfc_showMask();\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS !== 'Y'){\r\n      alert(gfc_getAtt(result.data.MSG_CODE));\r\n      gfg_setSelectRow(dtlGrid, result.data.COL_NAM, result.data.SEQ);\r\n      gfc_hideMask();\r\n\r\n      return;\r\n    }else{\r\n      alert(gfc_getAtt(result.data.MSG_CODE));\r\n      \r\n      this.Retrieve();\r\n    }\r\n  }\r\n\r\n\r\n  DtlDelete = async (e) => {\r\n\r\n    const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n    const detailGrid = gfg_getGrid(this.props.pgm, 'detail10');\r\n    const selectRow = gfg_getRow(detailGrid);\r\n    if(selectRow === null){\r\n      alert('선택된건이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    if(selectRow.phantom){\r\n      detailGrid.removeRow(selectRow['rowKey']);\r\n      return;\r\n    }else{\r\n\r\n      if(window.confirm('삭제하시겠습니까?') === false){\r\n        return;\r\n      }\r\n\r\n      gfc_showMask();\r\n\r\n      let param = [];\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_MENU_DETAIL10(\r\n                    :p_COP_CD,\r\n                    :p_RowStatus,\r\n                    :p_MENU_GRP,\r\n                    :p_MENU_ID,\r\n                    :p_MENU_NAM,\r\n                    :p_USE_YN,\r\n                    :p_PGM_ID,\r\n                    :p_PGM_ROOT,\r\n                    :p_MENU_SEQ, \r\n                    :p_RETAUT_YN,\r\n                    :p_INSAUT_YN,\r\n                    :p_SAVAUT_YN,\r\n                    :p_DELAUT_YN,\r\n                    :p_USER_ID,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n          p_RowStatus : 'D',\r\n          p_MENU_GRP  : gfg_getRow(mainGrid).MENU_ID,\r\n          p_MENU_ID   : gfg_getRow(detailGrid).MENU_ID,\r\n          p_MENU_NAM  : '',\r\n          p_USE_YN    : '',\r\n          p_PGM_ID    : '',\r\n          p_PGM_ROOT  : '',\r\n          p_MENU_SEQ  : '',\r\n          p_RETAUT_YN : '',\r\n          p_INSAUT_YN : '',\r\n          p_SAVAUT_YN : '',\r\n          p_DELAUT_YN : '',\r\n          p_USER_ID   : ''\r\n        },\r\n        errSeq: 0\r\n      })\r\n      \r\n      const result = await getSp_Oracle(param);\r\n      if(result.data.SUCCESS !== 'Y'){\r\n        alert(gfc_getAtt(result.data.MSG_CODE));\r\n        gfc_hideMask();\r\n  \r\n        return;\r\n      }\r\n  \r\n      detailGrid.removeRow(selectRow['rowKey']);\r\n      gfc_hideMask();\r\n    }\r\n  }\r\n\r\n  DtlInsert = () => {\r\n    const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n    const dtlGrid = gfg_getGrid(this.props.pgm, 'detail10');\r\n\r\n    const mainRow = gfg_getRow(mainGrid);\r\n    if(mainRow === null){\r\n      alert('선택된건이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    gfg_appendRow(dtlGrid, dtlGrid.getRowCount(), { RETAUT_YN:'Y', INSAUT_YN: 'Y', SAVAUT_YN: 'Y', DELAUT_YN: 'Y'}, 'MENU_ID');\r\n\r\n  }\r\n\r\n  Retrieve = async () => {\r\n    gfc_showMask();\r\n\r\n    const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n    const dtlGrid  = gfg_getGrid(this.props.pgm, 'detail10');\r\n    mainGrid.clear();\r\n    dtlGrid.clear();\r\n\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_MENU_MAIN10(\r\n                  :p_COP_CD,\r\n                  :p_RowStatus,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n        p_RowStatus : 'R'\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS !== 'Y'){\r\n      alert(gfc_getAtt(result.data.MSG_CODE));\r\n      gfc_hideMask();\r\n\r\n      return;\r\n    }\r\n\r\n    mainGrid.clear();\r\n\r\n    mainGrid.resetData(result.data.ROWS);\r\n    mainGrid.resetOriginData()\r\n    mainGrid.restore();\r\n\r\n    gfg_setSelectRow(mainGrid);\r\n    // gfg_setSelectRow(mainGrid);\r\n\r\n    gfc_hideMask();\r\n  }\r\n  \r\n  onSelectChange = async (e) => {\r\n    const dtlGrid  = gfg_getGrid(this.props.pgm, 'detail10');\r\n    dtlGrid.clear();\r\n    \r\n    gfc_showMask();\r\n\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_MENU_DETAIL10(\r\n                  :p_COP_CD,\r\n                  :p_RowStatus,\r\n                  :p_MENU_GRP,\r\n                  :p_MENU_ID,\r\n                  :p_MENU_NAM,\r\n                  :p_USE_YN,\r\n                  :p_PGM_ID,\r\n                  :p_PGM_ROOT,\r\n                  :p_MENU_SEQ, \r\n                  :p_RETAUT_YN,\r\n                  :p_INSAUT_YN,\r\n                  :p_SAVAUT_YN,\r\n                  :p_DELAUT_YN,\r\n                  :p_USER_ID,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n        p_RowStatus : 'R',\r\n        p_MENU_GRP  : e.MENU_ID,\r\n        p_MENU_ID   : '',\r\n        p_MENU_NAM  : '',\r\n        p_USE_YN    : '',\r\n        p_PGM_ID    : '',\r\n        p_PGM_ROOT  : '',\r\n        p_MENU_SEQ  : 0,\r\n        p_RETAUT_YN : '',\r\n        p_INSAUT_YN : '',\r\n        p_SAVAUT_YN : '',\r\n        p_DELAUT_YN : '',\r\n        p_USER_ID   : gfs_getStoreValue('USER_REDUCER', 'USER_ID')\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS !== 'Y'){\r\n      gfc_hideMask();\r\n\r\n      return;\r\n    }\r\n\r\n    const grid = gfg_getGrid(this.props.pgm, 'detail10');\r\n    grid.resetData(result.data.ROWS);\r\n    gfg_setSelectRow(grid);\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager type3'>\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '카메라IP'\r\n                            },{\r\n                              code: '2',\r\n                              name: 'RTSP주소'\r\n                            },{\r\n                              code: '3',\r\n                              name: 'RTSP포트'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       readOnly\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid' style={{paddingBottom:'0'}}>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Layout split       ='vertical'\r\n                          minSize     ={[54]}\r\n                          defaultSize ={'30%'}\r\n                  >\r\n                    <Grid pgm={this.props.pgm}\r\n                          id ='main10'\r\n                          selectionChange={(e) => {\r\n                            this.onSelectChange(e);\r\n                          }}\r\n                          rowHeight={30}\r\n                          rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                          columns={[\r\n                            columnCombobox({\r\n                              name: 'MENU_ID', \r\n                              header: '메뉴그룹',\r\n                              value   : 'COMM_DTL_CD',\r\n                              display : 'COMM_DTL_NAM',\r\n                              width   : 150, \r\n                              readOnly: true,\r\n                              oracleData : getDynamicSql_Oracle(\r\n                                'COMM/COMM',\r\n                                'ZM_IMS_CODE_SELECT',\r\n                                [{COMM_CD: '1'}]),\r\n                              editor: {\r\n                                value   : 'COMM_DTL_CD',\r\n                                display : 'COMM_DTL_NAM'\r\n                              }\r\n                            }),\r\n                            columnInput({\r\n                              name: 'MENU_NAM',\r\n                              header: '메뉴그룹명',\r\n                              width : 250,\r\n                              readOnly: true,\r\n                              align : 'left',\r\n                            })\r\n                          ]}\r\n                    />\r\n\r\n                    <Grid pgm={this.props.pgm}\r\n                          id ='detail10'\r\n                          rowHeight={30}\r\n                          rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                          columns={[\r\n                            columnInput({\r\n                              name: 'MENU_ID',\r\n                              header: '메뉴ID',\r\n                              width : 180,\r\n                              readOnly: false,\r\n                              align : 'left',\r\n                              onRender: (value, control, rows) => {\r\n                                if(rows.phantom){\r\n                                  control.readOnly = false;\r\n                                }else{\r\n                                  control.readOnly = true;\r\n                                }\r\n                              }\r\n                            }),\r\n                            columnInput({\r\n                              name: 'MENU_NAM',\r\n                              header: '메뉴명',\r\n                              width : 350,\r\n                              readOnly: false,\r\n                              align : 'left',\r\n                              onRender: (value, control, rows) => {\r\n                                if(rows.phantom){\r\n                                  control.readOnly = false;\r\n                                }else{\r\n                                  control.readOnly = true;\r\n                                }\r\n                              }\r\n                            }),   \r\n                            columnInput({\r\n                              name: 'PGM_ID',\r\n                              header: '프로그램',\r\n                              width : 250,\r\n                              readOnly: false,\r\n                              align : 'left',\r\n                              onRender: (value, control, rows) => {\r\n                                if(rows.phantom){\r\n                                  control.readOnly = false;\r\n                                }else{\r\n                                  control.readOnly = true;\r\n                                }\r\n                              }\r\n                            }),   \r\n                            columnInput({\r\n                              name: 'PGM_ROOT',\r\n                              header: '프로그램경로',\r\n                              width : 250,\r\n                              readOnly: false,\r\n                              align : 'left',\r\n                              onRender: (value, control, rows) => {\r\n                                if(rows.phantom){\r\n                                  control.readOnly = false;\r\n                                }else{\r\n                                  control.readOnly = true;\r\n                                }\r\n                              }\r\n                            }),\r\n                            columnNumber({\r\n                              name    : 'MENU_SEQ', \r\n                              header  : '정렬순서', \r\n                              width   : 100, \r\n                              readOnly: false\r\n                            }),\r\n                            columnCombobox({\r\n                              name: 'USE_YN', \r\n                              header: '사용여부',\r\n                              readOnly: false,\r\n                              width   : 130,\r\n                              data    : [{\r\n                                'code': 'Y',\r\n                                'name': 'Yes'\r\n                              },{\r\n                                'code': 'N',\r\n                                'name': 'No'\r\n                              }],\r\n                              editor: {\r\n                                value   : 'code',\r\n                                display : 'name'\r\n                              }\r\n                            }),\r\n                            columnCheckbox({\r\n                              name: 'RETAUT_YN',\r\n                              header: '조회',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }),\r\n                            columnCheckbox({\r\n                              name: 'INSAUT_YN',\r\n                              header: '등록',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }),\r\n                            columnCheckbox({\r\n                              name: 'SAVAUT_YN',\r\n                              header: '저장',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }),\r\n                            columnCheckbox({\r\n                              name: 'DELAUT_YN',\r\n                              header: '삭제',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            })\r\n                          ]}\r\n                    />\r\n                  </Layout>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MENU;","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\COMM\\COMM.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\RainInfo.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\RecImage.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\RecImageDtl.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\COMM\\AUTH\\AUTH.js",["717","718","719"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_getAtt, gfc_sleep } from '../../../Method/Comm';\r\nimport { gfs_injectAsyncReducer, gfs_dispatch, gfs_getStoreValue } from '../../../Method/Store';\r\nimport { gfg_getGrid, gfg_getRow, gfg_appendRow, gfg_setValue, gfg_getModyfiedRow, gfg_setSelectRow, gfg_getRowCount } from '../../../Method/Grid';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport Layout from '../../../Component/Layout/Layout';\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Combobox as columnCombobox }  from '../../../Component/Grid/Column/Combobox';\r\nimport { Number as columnNumber} from '../../../Component/Grid/Column/Number';\r\nimport { Checkbox as columnCheckbox } from '../../../Component/Grid/Column/Checkbox';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\n// import Botspan from '../Common/Botspan';\r\n\r\nimport { getDynamicSql_Oracle } from '../../../db/Oracle/Oracle';\r\nimport { getSp_Oracle } from '../../../db/Oracle/Oracle';\r\n//#endregion\r\n\r\nclass AUTH extends Component {\r\n  selectedTab = 0;\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const AUTH_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'AUTH_MAIN') {\r\n        return {\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n        };\r\n      }\r\n\r\n      if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('AUTH_MAIN', AUTH_MAIN);\r\n    //#endregion\r\n  }\r\n\r\n  componentDidMount(){\r\n    \r\n  }\r\n\r\n  callOracle = async(file, fn, param) => {\r\n    let result = await getDynamicSql_Oracle(\r\n      file,\r\n      fn,\r\n      param\r\n    ); \r\n\r\n    return result;\r\n  }\r\n\r\n  Delete = () => {\r\n    // const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    // const selectRow = gfg_getRow(grid);\r\n    // if(selectRow === null){\r\n    //   alert('선택된건이 없습니다.');\r\n    //   return;\r\n    // }\r\n\r\n    // if(selectRow.phantom){\r\n    //   grid.removeRow(selectRow['rowKey']);\r\n    //   return;\r\n    // }else{\r\n    //   this.callOracle(\r\n    //     'Common/Common',\r\n    //     'ZM_IMS_CAMERA_DELETE',\r\n    //     [{\r\n    //       AREA_TP: selectRow.AREA_TP,\r\n    //       CAMERA_IP: selectRow.CAMERA_IP\r\n    //     }]\r\n    //   )\r\n    // }\r\n    \r\n    // grid.resetOriginData()\r\n    // grid.restore();\r\n\r\n    // this.Retrieve();\r\n  }\r\n\r\n  Save = async() => {\r\n    let mainGrid;\r\n\r\n    if(this.selectedTab === 0){\r\n      mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n    }else{\r\n      mainGrid = gfg_getGrid(this.props.pgm, 'main20');\r\n    }\r\n\r\n    const dtlGrid = gfg_getGrid(this.props.pgm, 'detail10');\r\n\r\n    if(gfg_getRowCount(mainGrid) === 0){\r\n      alert('데이터가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    if(gfg_getRowCount(dtlGrid) === 0){\r\n      alert('데이터가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    const dtlMod = gfg_getModyfiedRow(dtlGrid);\r\n    if(dtlMod.length === 0){\r\n      alert('추가되거나 수정된건 이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    let param = [];\r\n\r\n    dtlMod.forEach(e => {\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_AUTH_DETAIL10(\r\n                    :p_COP_CD,\r\n                    :p_RowStatus,\r\n                    :p_MENU_ID,\r\n                    :p_GRP_USER_ID,\r\n                    :p_CD_GBN,\r\n  \r\n                    :p_PGMAUT_YN,\r\n                    :p_RETAUT_YN,\r\n                    :p_INSAUT_YN,\r\n                    :p_SAVAUT_YN,\r\n                    :p_DELAUT_YN,\r\n                    :p_PTZAUT_YN,\r\n                    :p_USER_ID,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_COP_CD     : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n          p_RowStatus  : e.rowStatus,\r\n          p_MENU_ID    : e.MENU_ID,\r\n          p_GRP_USER_ID: gfg_getRow(mainGrid).AUTH_CD,\r\n          p_CD_GBN     : this.selectedTab === 0 ? 'G' : 'I',\r\n          p_PGMAUT_YN : e.PGMAUT_YN === null ? 'N' : e.PGMAUT_YN,\r\n          p_RETAUT_YN : e.RETAUT_YN === null ? 'N' : e.RETAUT_YN,\r\n          p_INSAUT_YN : e.INSAUT_YN === null ? 'N' : e.INSAUT_YN,\r\n          p_SAVAUT_YN : e.SAVAUT_YN === null ? 'N' : e.SAVAUT_YN,\r\n          p_DELAUT_YN : e.DELAUT_YN === null ? 'N' : e.DELAUT_YN,\r\n          p_PTZAUT_YN : e.DELAUT_YN === null ? 'N' : e.DELAUT_YN,\r\n          p_USER_ID   : gfs_getStoreValue('USER_REDUCER', 'USER_ID')\r\n        },\r\n        errSeq: e.rowKey\r\n      })\r\n    })\r\n\r\n    // dtlMod.forEach(e => {\r\n    //   param.push({\r\n    //     sp   : `begin \r\n    //               SP_ZM_IMS_AUTH_DETAIL10(\r\n    //                 :p_COP_CD,\r\n    //                 :p_RowStatus,\r\n    //                 :p_MENU_ID,\r\n    //                 :p_GRP_USER_ID,\r\n    //                 :p_CD_GBN\r\n\r\n    //                 :p_RETAUT_YN,\r\n    //                 :p_INSAUT_YN,\r\n    //                 :p_SAVAUT_YN,\r\n    //                 :p_DELAUT_YN,\r\n    //                 :p_PTZAUT_YN,\r\n    //                 :p_USER_ID,\r\n                    \r\n    //                 :p_select,\r\n    //                 :p_SUCCESS,\r\n    //                 :p_MSG_CODE,\r\n    //                 :p_MSG_TEXT,\r\n    //                 :p_COL_NAM\r\n    //               );\r\n    //             end;\r\n    //             `,\r\n    //     data : {\r\n    //       p_COP_CD     : '10',\r\n    //       p_RowStatus  : 'R',\r\n    //       p_MENU_ID    : '',\r\n    //       p_GRP_USER_ID: '10',\r\n    //       p_CD_GBN     : '',\r\n\r\n    //       p_RETAUT_YN : '',\r\n    //       p_INSAUT_YN : '',\r\n    //       p_SAVAUT_YN : '',\r\n    //       p_DELAUT_YN : '',\r\n    //       p_PTZAUT_YN : '',\r\n    //       p_USER_ID   : '1989'\r\n\r\n    //       // p_COP_CD     : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n    //       // p_RowStatus  : e.rowStatus,\r\n    //       // p_MENU_ID    : e.MENU_ID,\r\n    //       // p_GRP_USER_ID: gfg_getRow(mainGrid).AUTH_CD,\r\n    //       // p_CD_GBN     : this.selectedTab === 0 ? 'G' : 'I',\r\n\r\n    //       // p_RETAUT_YN : e.RETAUT_YN === null ? 'N' : e.RETAUT_YN,\r\n    //       // p_INSAUT_YN : e.INSAUT_YN === null ? 'N' : e.INSAUT_YN,\r\n    //       // p_SAVAUT_YN : e.SAVAUT_YN === null ? 'N' : e.SAVAUT_YN,\r\n    //       // p_DELAUT_YN : e.DELAUT_YN === null ? 'N' : e.DELAUT_YN,\r\n    //       // p_PTZAUT_YN : e.PTZAUT_YN === null ? 'N' : e.PTZAUT_YN,\r\n    //       // p_USER_ID   : gfs_getStoreValue('USER_REDUCER', 'USER_ID')\r\n    //     },\r\n    //     errSeq: e.rowKey\r\n    //   })\r\n    // })\r\n\r\n    gfc_showMask();\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS !== 'Y'){\r\n      alert(gfc_getAtt(result.data.MSG_CODE) + '>' + result.data.MSG_TEXT);\r\n      gfg_setSelectRow(dtlGrid, result.data.COL_NAM, result.data.SEQ);\r\n      gfc_hideMask();\r\n\r\n      return;\r\n    }else{\r\n      alert(gfc_getAtt(result.data.MSG_CODE));\r\n      \r\n      this.Retrieve();\r\n    }\r\n  }\r\n\r\n  Retrieve = async () => {\r\n    if(this.selectedTab === 0){\r\n\r\n      gfc_showMask();\r\n\r\n      const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n      const dtlGrid  = gfg_getGrid(this.props.pgm, 'detail10');\r\n      mainGrid.clear();\r\n      dtlGrid.clear();\r\n  \r\n      let param = [];\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_AUTH_MAIN10(\r\n                    :p_COP_CD,\r\n                    :p_RowStatus,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n          p_RowStatus : 'R'\r\n        },\r\n        errSeq: 0\r\n      })\r\n      \r\n      const result = await getSp_Oracle(param);\r\n      if(result.data.SUCCESS !== 'Y'){\r\n        alert(gfc_getAtt(result.data.MSG_CODE));\r\n        gfc_hideMask();\r\n  \r\n        return;\r\n      }\r\n\r\n      mainGrid.resetData(result.data.ROWS);\r\n      mainGrid.resetOriginData()\r\n      mainGrid.restore();\r\n      gfg_setSelectRow(mainGrid);\r\n    }else{\r\n\r\n      gfc_showMask();\r\n\r\n      const mainGrid = gfg_getGrid(this.props.pgm, 'main20');\r\n      const dtlGrid  = gfg_getGrid(this.props.pgm, 'detail10');\r\n      mainGrid.clear();\r\n      dtlGrid.clear();\r\n  \r\n      let param = [];\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_AUTH_MAIN20(\r\n                    :p_COP_CD,\r\n                    :p_RowStatus,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n          p_RowStatus : 'R'\r\n        },\r\n        errSeq: 0\r\n      })\r\n      \r\n      const result = await getSp_Oracle(param);\r\n      if(result.data.SUCCESS !== 'Y'){\r\n        alert(gfc_getAtt(result.data.MSG_CODE));\r\n        gfc_hideMask();\r\n  \r\n        return;\r\n      }\r\n\r\n      mainGrid.resetData(result.data.ROWS);\r\n      mainGrid.resetOriginData()\r\n      mainGrid.restore();\r\n      gfg_setSelectRow(mainGrid);\r\n    }\r\n\r\n    // gfg_setSelectRow(mainGrid);\r\n\r\n    gfc_hideMask();\r\n  }\r\n  \r\n  onSelectChange = async (e) => {\r\n    const dtlGrid  = gfg_getGrid(this.props.pgm, 'detail10');\r\n    dtlGrid.clear();\r\n    \r\n    gfc_showMask();\r\n\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_AUTH_DETAIL10(\r\n                  :p_COP_CD,\r\n                  :p_RowStatus,\r\n                  :p_MENU_ID,\r\n                  :p_GRP_USER_ID,\r\n                  :p_CD_GBN,\r\n\r\n                  :p_PGMAUT_YN,\r\n                  :p_RETAUT_YN,\r\n                  :p_INSAUT_YN,\r\n                  :p_SAVAUT_YN,\r\n                  :p_DELAUT_YN,\r\n                  :p_PTZAUT_YN,\r\n                  :p_USER_ID,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_COP_CD     : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n        p_RowStatus  : 'R',\r\n        p_MENU_ID    : '',\r\n        p_GRP_USER_ID: e.AUTH_CD,\r\n        p_CD_GBN     : '',\r\n\r\n        p_PGMAUT_YN  : '',\r\n        p_RETAUT_YN  : '',\r\n        p_INSAUT_YN  : '',\r\n        p_SAVAUT_YN  : '',\r\n        p_DELAUT_YN  : '',\r\n        p_PTZAUT_YN  : '',\r\n        p_USER_ID    : gfs_getStoreValue('USER_REDUCER', 'USER_ID')\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS !== 'Y'){\r\n      gfc_hideMask();\r\n\r\n      return;\r\n    }\r\n\r\n    const grid = gfg_getGrid(this.props.pgm, 'detail10');\r\n    grid.resetData(result.data.ROWS);\r\n    gfg_setSelectRow(grid);\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager type3'>\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '카메라IP'\r\n                            },{\r\n                              code: '2',\r\n                              name: 'RTSP주소'\r\n                            },{\r\n                              code: '3',\r\n                              name: 'RTSP포트'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       readOnly\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid' style={{paddingBottom:'0'}}>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Layout split       ='vertical'\r\n                          minSize     ={[54]}\r\n                          defaultSize ={'30%'}\r\n                  >\r\n                    <Tabs \r\n                      onSelect={async e => {\r\n                        this.selectedTab = e;\r\n\r\n                        await gfc_sleep(100);\r\n\r\n                        this.Retrieve();\r\n                      }}\r\n                    >\r\n                      <TabList>\r\n                        <Tab>그룹</Tab>\r\n                        <Tab>사용자</Tab>\r\n                      </TabList>\r\n\r\n                      <TabPanel\r\n                        style={{height:'calc(100% - 41px)'}}>\r\n                        <Grid pgm={this.props.pgm}\r\n                              id ='main10'\r\n                              selectionChange={(e) => {\r\n                                this.onSelectChange(e);\r\n                              }}\r\n                              rowHeight={30}\r\n                              rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                              columns={[\r\n                                columnInput({\r\n                                  name: 'AUTH_CD',\r\n                                  header: '그룹ID',\r\n                                  width : 100,\r\n                                  readOnly: true,\r\n                                  align : 'center',\r\n                                }),\r\n                                columnInput({\r\n                                  name: 'AUTH_NAM',\r\n                                  header: '그룹명',\r\n                                  width : 250,\r\n                                  readOnly: true,\r\n                                  align : 'left',\r\n                                })\r\n                              ]}\r\n                        />\r\n                      </TabPanel>\r\n                      <TabPanel\r\n                        style={{height:'calc(100% - 41px)'}}\r\n                      >\r\n                        <Grid pgm={this.props.pgm}\r\n                              id ='main20'\r\n                              selectionChange={(e) => {\r\n                                this.onSelectChange(e);\r\n                              }}\r\n                              rowHeight={30}\r\n                              rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                              columns={[\r\n                                columnInput({\r\n                                  name: 'AUTH_CD',\r\n                                  header: '사용자ID',\r\n                                  width : 100,\r\n                                  readOnly: true,\r\n                                  align : 'center',\r\n                                }),\r\n                                columnInput({\r\n                                  name: 'AUTH_NAM',\r\n                                  header: '사용자명',\r\n                                  width : 250,\r\n                                  readOnly: true,\r\n                                  align : 'left',\r\n                                }),   \r\n                                columnCombobox({\r\n                                  name: 'AUT_TP', \r\n                                  header: '권한그룹',\r\n                                  value   : 'COMM_DTL_CD',\r\n                                  display : 'COMM_DTL_NAM',\r\n                                  width   : 150, \r\n                                  readOnly: false,\r\n                                  oracleData : getDynamicSql_Oracle(\r\n                                    'COMM/COMM',\r\n                                    'ZM_IMS_CODE_SELECT',\r\n                                    [{COMM_CD: '2'}]),\r\n                                  editor: {\r\n                                    value   : 'COMM_DTL_CD',\r\n                                    display : 'COMM_DTL_NAM',\r\n                                    emptyRow: true\r\n                                  }\r\n                                })\r\n                              ]}\r\n                        />\r\n                      </TabPanel>\r\n                    </Tabs>\r\n\r\n                    <Grid pgm={this.props.pgm}\r\n                          id ='detail10'\r\n                          rowHeight={30}\r\n                          rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                          headerClick={(e) => {\r\n                            const column = e.columnName;\r\n                            if(column !== 'chk' && column !== 'MENU_ID' && column !== 'MENU_NAM'){\r\n                              const grid = gfg_getGrid(this.props.pgm, 'detail10');\r\n                              if(grid.gridEl.dataset[column] === undefined){\r\n                                grid.gridEl.dataset[column] = 'Y';\r\n                              }else if(grid.gridEl.dataset[column] === 'Y'){\r\n                                grid.gridEl.dataset[column] = 'N';\r\n                              }else{\r\n                                grid.gridEl.dataset[column] = 'Y';\r\n                              }\r\n      \r\n                              for(let i = 0; i < grid.getRowCount(); i++){\r\n                                gfg_setValue(grid, column, grid.gridEl.dataset[column], i);\r\n                              }\r\n                            }\r\n                          }}\r\n                          columns={[\r\n                            columnInput({\r\n                              name: 'MENU_ID',\r\n                              header: '메뉴ID',\r\n                              width : 180,\r\n                              readOnly: false,\r\n                              align : 'left',\r\n                              onRender: (value, control, rows) => {\r\n                                if(rows.phantom){\r\n                                  control.readOnly = false;\r\n                                }else{\r\n                                  control.readOnly = true;\r\n                                }\r\n                              }\r\n                            }),\r\n                            columnInput({\r\n                              name: 'MENU_NAM',\r\n                              header: '메뉴명',\r\n                              width : 350,\r\n                              readOnly: false,\r\n                              align : 'left',\r\n                              onRender: (value, control, rows) => {\r\n                                if(rows.phantom){\r\n                                  control.readOnly = false;\r\n                                }else{\r\n                                  control.readOnly = true;\r\n                                }\r\n                              }\r\n                            }),   \r\n                            columnCheckbox({\r\n                              name: 'PGMAUT_YN',\r\n                              header: '사용',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }), \r\n                            columnCheckbox({\r\n                              name: 'RETAUT_YN',\r\n                              header: '조회',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }),\r\n                            columnCheckbox({\r\n                              name: 'INSAUT_YN',\r\n                              header: '등록',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }),\r\n                            columnCheckbox({\r\n                              name: 'SAVAUT_YN',\r\n                              header: '저장',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }),\r\n                            columnCheckbox({\r\n                              name: 'DELAUT_YN',\r\n                              header: '삭제',\r\n                              width : 50,\r\n                              readOnly: true,\r\n                              align : 'center',\r\n                              type: 'checkbox'\r\n                            }),   \r\n                            // columnCheckbox({\r\n                            //   name: 'PTZAUT_YN',\r\n                            //   header: 'PTZ',\r\n                            //   width : 50,\r\n                            //   readOnly: true,\r\n                            //   align : 'center',\r\n                            //   type: 'checkbox'\r\n                            // }),\r\n                          ]}\r\n                    />\r\n                  </Layout>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AUTH;","D:\\Project\\01.YK\\react\\src\\Program\\COMM\\USER\\USER.js",["720","721","722","723"],"D:\\Project\\01.YK\\react\\src\\Component\\Menu\\SideBarMenu\\SideBarUserName.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\CompleteBtnModify.js",["724","725","726","727","728"],"import React from 'react';\r\n\r\nimport { gfg_getGrid, gfg_getRow, gfg_setSelectRow } from '../../../Method/Grid';\r\nimport { gfs_getStoreValue } from '../../../Method/Store';\r\nimport { gfc_showMask, gfc_hideMask } from '../../../Method/Comm';\r\nimport { gfo_getCombo, gfo_getInput, gfo_getCheckbox } from '../../../Method/Component';\r\nimport { getDynamicSql_Oracle, getSp_Oracle_YK } from '../../../db/Oracle/Oracle';\r\nimport { YK_WEB_REQ } from '../../../WebReq/WebReq';\r\nimport { getDynamicSql_Mysql } from '../../../db/Mysql/Mysql';\r\n\r\nconst CompleteBtnModify = (props) => {\r\n\r\n  //#region 검수등록\r\n  const onProcess = async() => {\r\n    const scaleNumb = gfs_getStoreValue('INSP_CFRM_MAIN', 'DETAIL_SCALE');\r\n\r\n    if(scaleNumb === ''){\r\n      alert('선택된 배차정보가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    gfc_showMask();\r\n\r\n    //#region 필수입력확인 및 변수세팅\r\n    const detail_grade1 = gfo_getCombo(props.pgm, 'detail_grade1'); //고철등급\r\n    if(detail_grade1.getValue() === null || detail_grade1.getValue() === '' || detail_grade1.getValue() === undefined){\r\n      alert('필수입력값이 없습니다. > 고철등급');\r\n      const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n      chitBtn.click(0);\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_grade2 = gfo_getCombo(props.pgm, 'detail_grade2'); //상세고철등급\r\n    if(detail_grade2.getValue() === null || detail_grade2.getValue() === '' || detail_grade2.getValue() === undefined){\r\n      alert('필수입력값이 없습니다. > 등급세부코드');\r\n      const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n      chitBtn.click(0);\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_subt = gfo_getCombo(props.pgm, 'detail_subt'); //감량중량\r\n    const detail_subt_leg = gfo_getCombo(props.pgm, 'detail_subt_leg'); //감량사유\r\n    if(detail_subt.getValue() !== null &&  detail_subt.getValue() !== '' && detail_subt.getValue() !== '0' && detail_subt.getValue() !== undefined){\r\n      if(detail_subt_leg.getValue() === null || detail_subt_leg.getValue() === '' || detail_subt_leg.getValue() === undefined){\r\n        alert('필수입력값이 없습니다. > 감량사유');\r\n        const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n        chitBtn.click(0);\r\n  \r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const detail_depr = gfo_getCombo(props.pgm, 'detail_depr'); //감가내역\r\n    const detail_depr2 = gfo_getCombo(props.pgm, 'detail_depr2'); //감가비율\r\n    if(detail_depr.getValue() !== null && detail_depr.getValue() !== '' && detail_depr.getValue() !== undefined){\r\n      if(detail_depr2.getValue() === null || detail_depr2.getValue() === '' || detail_depr2.getValue() === undefined){\r\n        alert('필수입력값이 없습니다. > 감가비율');\r\n        const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n        chitBtn.click(0);\r\n  \r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const detail_out = gfo_getCombo(props.pgm, 'detail_out'); //하차구역\r\n    if(detail_out.getValue() ===  null || detail_out.getValue() === '' || detail_out.getValue() === undefined){\r\n      alert('필수입력값이 없습니다. > 하차구역');\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_car = gfo_getCombo(props.pgm, 'detail_car'); //차종구분\r\n    if(detail_car.getValue() === null || detail_car.getValue() === '' || detail_car.getValue() === undefined){\r\n      alert('필수입력값이 없습니다. > 차종구분');\r\n      const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n      chitBtn.click(0);\r\n\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n    const detail_rtn = gfo_getCombo(props.pgm, 'detail_rtn'); //반품구분\r\n    const detail_rtn2 = gfo_getCombo(props.pgm, 'detail_rtn2'); //반품구분사유\r\n    if(detail_rtn.getValue() !== null && detail_rtn.getValue() !== '' && detail_rtn.getValue() !== undefined){\r\n      if(detail_rtn2.getValue() === null || detail_rtn2.getValue() === '' || detail_rtn2.getValue() === undefined){\r\n        alert('필수입력값이 없습니다. > 반품구분사유');\r\n        const chitBtn = document.getElementById(`tab1_${props.pgm}`);\r\n        chitBtn.click(0);\r\n  \r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const detail_warning = gfo_getCheckbox(props.pgm, 'detail_warning'); //경고\r\n    const detail_rain = gfo_getInput(props.pgm, 'detail_rain');\r\n    \r\n    // const msg = `dScaleNumb=${scaleNumb}&` + //검수번호(계근번호)\r\n    // `dWorker=${gfs_getStoreValue('USER_REDUCER', 'USER_ID')}&` + //검수자(ERP ID)\r\n    // `dWorkerName=${gfs_getStoreValue('USER_REDUCER', 'USER_NAM')}&` + //검수자 이름\r\n    // `dOutageReasonCode=${detail_subt_leg.getValue() === null ? '' : detail_subt_leg.getValue()}&` + //감량사유\r\n    // `dOutageWeightCode=${detail_subt.getValue() === null ? '' : detail_subt.getValue()}&` + //감량중량\r\n    // `dScrapGradeCode=${detail_grade1.getValue()}&` + //등급코드\r\n    // `dScrapGradeItemCode=${detail_grade2.getValue()}&` + //등급아이템\r\n    // `dTallyHistoryCode=${detail_depr.getValue() === null ? '' : detail_depr.getValue()}&` + //감가내역\r\n    \r\n    // `dTallyRatio=${detail_depr2.getValue()}&` + //감가비율???\r\n    \r\n    // // `dScrapAreaCode=${detail_out.getValue()}&` + //하차구역(섹터), 옥내는E001고정\r\n    // `dScrapAreaCode=E001&` + //하차구역(섹터), 옥내는E001고정\r\n    // `dReturnDivisionCode=${detail_rtn.getValue() === null ? '' : detail_rtn.getValue()}&` + //반품구분\r\n    // `dReturnHistoryCode=${detail_rtn2.getValue() === null ? '' : detail_rtn2.getValue()}&` + //반품구분사유\r\n    \r\n    // `dOutageReasonEtcEdit=&` + //기타의견???\r\n\r\n    // `dCarTypeCode=${detail_car.getValue()}&` +\r\n    // `dWarning=${detail_warning.getValue() === true ? 'Y' : 'N'}&` +\r\n    // `dRain=0`;\r\n    // const Data = await YK_WEB_REQ(`tally_process_erp_procedure.jsp?${msg}`);\r\n\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                apps.EMM_INSPECT_MOBILE(\r\n                  :p_delivery_id,\r\n                  :p_sector_code,\r\n                  :p_reduce_code,\r\n                  :p_reduce_wgt,\r\n                  :p_return_gubun,\r\n                  :p_return_code,\r\n                  :p_file_yn,\r\n                  :p_iron_grade,\r\n                  :p_iron_grade_item,\r\n                  :p_discount_code,\r\n                  :p_erp_id,\r\n                  :p_erp_worker,\r\n                  :p_discount_rate,\r\n                  :p_cartype,\r\n                  :p_warning,\r\n                  :p_rain,\r\n                  :p_out\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_delivery_id     : scaleNumb,\r\n        p_sector_code     : detail_out.getValue(),\r\n        p_reduce_code     : (detail_subt_leg.getValue() === null || detail_subt_leg.getValue() === undefined) ? '' : detail_subt_leg.getValue(),\r\n        p_reduce_wgt      : (detail_subt.getValue() === null || detail_subt.getValue() === undefined) ? '' : detail_subt.getValue(),\r\n        p_return_gubun    : (detail_rtn.getValue() === null || detail_rtn.getValue() === undefined) ? '' : detail_rtn.getValue(),\r\n        p_return_code     : (detail_rtn2.getValue() === null || detail_rtn2.getValue() === undefined) ? '' : detail_rtn2.getValue(),\r\n        p_file_yn         : '',\r\n        p_iron_grade      : detail_grade1.getValue(),\r\n        p_iron_grade_item : detail_grade2.getValue(),\r\n        p_discount_code   : (detail_depr.getValue() === null || detail_depr.getValue() === undefined)? '' : detail_depr.getValue(),\r\n        p_erp_id          : gfs_getStoreValue('USER_REDUCER', 'ERP_ID'),\r\n        p_erp_worker      : gfs_getStoreValue('USER_REDUCER', 'USER_NAM'),\r\n        p_discount_rate   : (detail_depr2.getValue() === null || detail_depr2.getValue() === undefined) ? '' : detail_depr2.getValue(),\r\n        p_cartype         : detail_car.getValue(),\r\n        p_warning         : detail_warning.getValue() === true ? 'Y' : 'N',\r\n        p_rain            : (detail_rain.getValue() === null || detail_rain.getValue() === undefined) ? 0 : detail_rain.getValue(),\r\n      },\r\n      errSeq: 0\r\n    })\r\n\r\n    let result = await getSp_Oracle_YK(\r\n      param\r\n    );     \r\n    \r\n    if(result.data.result !== 'OK'){\r\n      alert('검수수정중 오류가 발생했습니다. > ' + result.data.result);\r\n      gfc_hideMask();\r\n    }else{\r\n      getDynamicSql_Mysql(scaleNumb, (detail_subt.getValue() === null || detail_subt.getValue() === undefined || detail_subt.getValue() === '') ? 0 : detail_subt.getValue()).then(e => {\r\n        console.log(e)\r\n        \r\n        const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === 'INSP_PROC');\r\n        pgm[0].Retrieve();\r\n    \r\n        gfc_hideMask();\r\n      });\r\n      // if(detail_subt.getValue() === null || detail_subt.getValue() === undefined || detail_subt.getValue() === ''){\r\n        \r\n      //   const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === 'INSP_PROC');\r\n      //   pgm[0].Retrieve();\r\n      //   alert('저장되었습니다.');\r\n      //   gfc_hideMask();\r\n      // }else{   \r\n      //   getDynamicSql_Mysql(scaleNumb, (detail_subt.getValue() === null || detail_subt.getValue() === undefined || detail_subt.getValue() === '') ? 0 : detail_subt.getValue()).then(e => {\r\n      //     console.log(e)\r\n          \r\n      //     const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === 'INSP_PROC');\r\n      //     pgm[0].Retrieve();\r\n      \r\n      //     gfc_hideMask();\r\n      //   });\r\n        // getDynamicSql_Mysql(scaleNumb, detail_subt.getValue() === null ? '' : detail_subt.getValue()).then(e => {\r\n        //   console.log(e)\r\n\r\n        //   const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === 'INSP_PROC');\r\n        //   pgm[0].Retrieve();\r\n        //   alert('저장되었습니다.');\r\n      \r\n        //   gfc_hideMask();\r\n        // });\r\n      }\r\n    // getDynamicSql_Oracle(\r\n    //   'Common/Common',\r\n    //   'EMM_INSPECT_MOBILEY',\r\n    //   [{strScaleNumb          : scaleNumb,\r\n    //     strErpId              : gfs_getStoreValue('USER_REDUCER', 'ERP_ID'),\r\n    //     strWorker             : gfs_getStoreValue('USER_REDUCER', 'USER_NAM'),\r\n    //     strOutageReasonCode   : detail_subt_leg.getValue() === null ? '' : detail_subt_leg.getValue(),\r\n    //     strOutageWeightCode   : detail_subt.getValue() === null ? '' : detail_subt.getValue(),\r\n    //     strScrapGradeCode     : detail_grade1.getValue(),\r\n    //     strScrapGradeItemCode : detail_grade2.getValue(),\r\n    //     strTallyHistoryCode   : detail_depr.getValue() === null ? '' : detail_depr.getValue(),\r\n    //     strTallyRatio         : detail_depr2.getValue() === null ? '' : detail_depr2.getValue(),\r\n    //     strScrapAreaCode      : detail_out.getValue(),\r\n    //     strReturnDivisionCode : detail_rtn.getValue() === null ? '' : detail_rtn.getValue(),\r\n    //     strReturnHistoryCode  : detail_rtn2.getValue() === null ? '' : detail_rtn2.getValue(),\r\n    //     strOutageReasonEtcEdit: '',\r\n    //     strCarType            : detail_car.getValue(),\r\n    //     strWarning            : detail_warning.getValue() === true ? 'Y' : 'N',\r\n    //     strRain               : '0'\r\n    //   }]\r\n    // ).then(e => {\r\n    //   console.log(e);\r\n      \r\n    //   getDynamicSql_Mysql(scaleNumb, detail_subt.getValue() === null ? '' : detail_subt.getValue()).then(e => {\r\n    //     console.log(e)\r\n\r\n    //     const pgm = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'windowState').filter(e => e.programId === 'INSP_CFRM');\r\n    //     pgm[0].Retrieve();\r\n        \r\n    //     gfc_hideMask();\r\n    //   });\r\n\r\n    // })\r\n  }\r\n  //#endregion\r\n\r\n  return (\r\n    <div className=\"complete_btn edit\">\r\n      <button onClick={() => onProcess()} type=\"button\" style={{display:'block'}}><span>검수수정</span></button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompleteBtnModify;","D:\\Project\\01.YK\\react\\src\\RtspFullScreen.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\ChitMemo copy.js",["729"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport TextArea from '../../../../Component/Control/TextArea';\r\nimport { gfs_dispatch } from '../../../../Method/Store';\r\nimport { gfo_getTextarea } from '../../../../Method/Component';\r\n\r\nfunction ChitMemo(props) {\r\n  const [focus, setFocus] = useState(false);\r\n  const textAreaRef = useRef();\r\n\r\n  const value = useSelector((e) => {\r\n    return e[props.reducer].DETAIL_SCALE;\r\n  }, (p, n) => {\r\n    return p === n;\r\n  });\r\n\r\n  useEffect(e => {\r\n    // if(props.reducer !== 'INSP_PROC_MAIN') return;\r\n\r\n    // if(value.chit === 'N'){\r\n      // gfo_getTextarea(props.pgm, 'chit_memo').setValue(''); 김경현\r\n    // }\r\n  }, [props.pgm, value])\r\n\r\n  const changeMemo = (e) => {\r\n    gfs_dispatch(props.reducer, 'CHIT_MEMO', {CHIT_MEMO: e.target.value});\r\n\r\n    console.log(e.target.value);\r\n  }\r\n\r\n  const limitLine = (e) => {\r\n    const maxRows = textAreaRef.current.props.rows;\r\n    const spaces = textAreaRef.current.props.cols;\r\n    let lines = e.target.value.split('\\n');\r\n    for (var i = 0; i < lines.length; i++) \r\n    {\r\n      if (lines[i].length <= spaces) continue;\r\n      var j = 0;\r\n\r\n      var space = spaces;\r\n\r\n      while (j++ <= spaces) \r\n      {\r\n        if (lines[i].charAt(j) === \" \") space = j;  \r\n      }\r\n      \r\n      lines[i + 1] = lines[i].substring(space + 1) + (lines[i + 1] || \"\");\r\n      lines[i] = lines[i].substring(0, space);\r\n    }\r\n\r\n    if(lines.length > maxRows){\r\n      e.target.style.color = 'red';\r\n      setTimeout(function(){\r\n        e.target.style.color = '';\r\n      },200);\r\n    }    \r\n\r\n    e.target.value = lines.slice(0, maxRows).join(\"\\n\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {focus === true ? \r\n        <TextArea \r\n          ref={textAreaRef}\r\n          pgm={props.pgm} \r\n          id={props.id} \r\n          rows={7} \r\n          cols={39}\r\n          wrap='soft' \r\n          defaultValue='' \r\n          onChange={e => changeMemo(e)} \r\n          onKeyUp={e => limitLine(e)}\r\n          onBlur={e => setFocus(false)}\r\n        >\r\n        </TextArea> :\r\n        <canvas \r\n          onClick={e => setFocus(true)}\r\n          style={{width:'100%', height: '156px'}}>\r\n        </canvas> \r\n      }\r\n    </>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default ChitMemo;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Report\\DAILY_PROC.js",["730","731","732","733"],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\ChitMemo copy 2.js",["734","735"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport TextArea from '../../../../Component/Control/TextArea';\r\nimport { gfs_dispatch } from '../../../../Method/Store';\r\nimport { gfo_getTextarea } from '../../../../Method/Component';\r\n\r\nfunction ChitMemo(props) {\r\n  const [focus, setFocus] = useState(false);\r\n  const textAreaRef = useRef();\r\n\r\n  let memoText;\r\n  \r\n  const value = useSelector((e) => {\r\n    return e[props.reducer].DETAIL_SCALE;\r\n  }, (p, n) => {\r\n    return p === n;\r\n  });\r\n\r\n  useEffect(e => {\r\n    // if(props.reducer !== 'INSP_PROC_MAIN') return;\r\n\r\n    // if(value.chit === 'N'){\r\n      // gfo_getTextarea(props.pgm, 'chit_memo').setValue(''); 김경현\r\n    // }\r\n  }, [props.pgm, value])\r\n\r\n  const changeMemo = (e) => {\r\n    gfs_dispatch(props.reducer, 'CHIT_MEMO', {CHIT_MEMO: e.target.value});\r\n    memoText = e.target.value;\r\n  }\r\n\r\n  const limitLine = (e) => {\r\n    const maxRows = textAreaRef.current.props.rows;\r\n    const spaces = textAreaRef.current.props.cols;\r\n    let lines = e.target.value.split('\\n');\r\n    for (var i = 0; i < lines.length; i++) \r\n    {\r\n      if (lines[i].length <= spaces) continue;\r\n      var j = 0;\r\n\r\n      var space = spaces;\r\n\r\n      while (j++ <= spaces) \r\n      {\r\n        if (lines[i].charAt(j) === \" \") space = j;  \r\n      }\r\n      \r\n      lines[i + 1] = lines[i].substring(space + 1) + (lines[i + 1] || \"\");\r\n      lines[i] = lines[i].substring(0, space);\r\n    }\r\n\r\n    if(lines.length > maxRows){\r\n      e.target.style.color = 'red';\r\n      setTimeout(function(){\r\n        e.target.style.color = '';\r\n      },200);\r\n    }    \r\n\r\n    e.target.value = lines.slice(0, maxRows).join(\"\\n\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {focus === true ? \r\n        <TextArea \r\n          ref={textAreaRef}\r\n          pgm={props.pgm} \r\n          id={props.id} \r\n          rows={7} \r\n          cols={39}\r\n          wrap='soft' \r\n          defaultValue='' \r\n          onChange={e => changeMemo(e)} \r\n          onKeyUp={e => limitLine(e)}\r\n          onBlur={e => {\r\n            setFocus(false)\r\n          }}\r\n        >\r\n        </TextArea> :\r\n        <canvas \r\n          onClick={e => setFocus(true)}\r\n          style={{width:'100%', height: '156px'}}>\r\n        </canvas> \r\n      }\r\n    </>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default ChitMemo;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Report\\TabList.js",["736","737"],"import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { gfc_addClass, gfc_removeClass, gfc_hasClass } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue } from '../../../Method/Store';\r\n\r\nconst TabList = (props) => {\r\n  const value = useSelector((e) => {\r\n    return e[props.reducer].CHIT_INFO;\r\n  }, (p, n) => {\r\n    return p.chit === n.chit;\r\n  });\r\n\r\n\r\n  const tabButton = (tabIndex,type) => {\r\n\r\n    let tabList = [`tab1_${type}`,`tab2_${type}`]\r\n    let contentList = [`content1_${type}`,`content2_${type}`]\r\n    let btnList = [`btn1_${type}`,`btn2_${type}`]\r\n    let tabMaxIndex = 2;\r\n    for(let i = 0; i < tabMaxIndex; i++){\r\n      if(i === tabIndex){\r\n        if(gfc_hasClass(document.getElementById(tabList[i]),'on') === false){\r\n          gfc_addClass(document.getElementById(tabList[i]),'on');\r\n          gfc_addClass(document.getElementById(contentList[i]),'on');\r\n        }\r\n      }\r\n      else{\r\n        gfc_removeClass(document.getElementById(tabList[i]),'on');\r\n        gfc_removeClass(document.getElementById(contentList[i]),'on');\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id={props.pgm}>\r\n      <div className='tab_list type2'>\r\n        <button type='button' id={`tab1_${props.pgm}`} className='tab on' onClick={() => tabButton(0, props.pgm)}>검수입력</button>\r\n        <button type='button' id={`tab2_${props.pgm}`} className='tab' onClick={() => tabButton(1, props.pgm)}>\r\n          {value.chit !== false && <span className='doc'>메모있음</span> } \r\n          계량표\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TabList;","D:\\Project\\01.YK\\react\\src\\Snapshot.js",[],"D:\\Project\\01.YK\\react\\src\\HLSViewer.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\ENTR_WAIT\\ENTR_WAIT.js",["738","739","740","741"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_sleep, gfc_yk_call_sp } from '../../../Method/Comm';\r\nimport { gfs_injectAsyncReducer, gfs_dispatch, gfs_getStoreValue } from '../../../Method/Store';\r\nimport { gfg_getGrid, gfg_setSelectRow, gfg_appendRow } from '../../../Method/Grid';\r\nimport { gfo_getCombo, gfo_getInput } from '../../../Method/Component';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Combobox as columnCombobox }  from '../../../Component/Grid/Column/Combobox';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\nimport Botspan from '../Common/Botspan';\r\n\r\n//#endregion\r\n\r\nclass ENTR_WAIT extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const ENTR_WAIT_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'ENTR_WAIT_MAIN') {\r\n        return {\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n        };\r\n      }\r\n\r\n      if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('ENTR_WAIT_MAIN', ENTR_WAIT_MAIN);\r\n    //#endregion\r\n  }\r\n\r\n  \r\n\r\n  componentDidMount(){\r\n    this.Retrieve();\r\n  }\r\n\r\n  // componentWillUnmount(){\r\n  //   clearInterval(this.mainGridInterval);\r\n  // }\r\n\r\n  Retrieve = async () => {\r\n\r\n    gfc_showMask();\r\n    gfs_dispatch('ENTR_WAIT_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n\r\n    const mainData = await gfc_yk_call_sp(`SP_ZM_MSTR_DRIVE_WAIT`);\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    grid.clear();\r\n\r\n    if(mainData.data.SUCCESS === 'Y'){\r\n      const main = mainData.data.ROWS;\r\n      \r\n      if(!main) {\r\n        gfc_hideMask();\r\n        return;\r\n      }\r\n\r\n      const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n      const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n  \r\n      const data = main.filter(e => {\r\n        if(search_tp !== null && search_tp !== ''){\r\n          //계근번호\r\n          if(search_tp === '1'){\r\n            if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          //차량번호\r\n          else if(search_tp === '2'){\r\n            if(e.carNumb.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          //사전등급\r\n          else if(search_tp === '3'){\r\n            if(e.itemGrade.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          //업체\r\n          else if(search_tp === '4'){\r\n            if(e.vendor.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          \r\n        }else{\r\n          return true;\r\n        }\r\n      })\r\n  \r\n      if(data.length > 0){\r\n  \r\n        grid.resetData(data);\r\n        gfs_dispatch('ENTR_WAIT_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n        \r\n        await gfc_sleep(100);\r\n  \r\n        gfg_setSelectRow(grid);\r\n      }else{\r\n        gfs_dispatch('ENTR_WAIT_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      }\r\n  \r\n      gfc_hideMask();\r\n    }else{\r\n      gfs_dispatch('ENTR_WAIT_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      gfc_hideMask();\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager type3' >\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '배차번호'\r\n                            },{\r\n                              code: '2',\r\n                              name: '차량번호'\r\n                            },{\r\n                              code: '3',\r\n                              name: '사전등급'\r\n                            },{\r\n                              code: '4',\r\n                              name: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       onKeyDown   = {(e) => {\r\n                        if(e.keyCode === 13){\r\n                          this.Retrieve()\r\n                        }\r\n                       }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        rowHeight={41}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        columns={[\r\n                          columnInput({\r\n                            name: 'SCRP_ORD_NO',\r\n                            header: '배차번호',\r\n                            width : 160,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'VENDOR',\r\n                            header: '공급사/실공급사',\r\n                            width : 250,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'LOAD_AREA_ADDR',\r\n                            header: '실상차지주소',\r\n                            width : 250,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'VEHL_NO',\r\n                            header: '차량번호',\r\n                            width : 300,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'DRIVER_NM',\r\n                            header: '운전자명',\r\n                            width : 120,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'DRIVER_CELL_NO',\r\n                            header: '운전자휴대폰번호',\r\n                            width : 150,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>전체차량</span><Botspan reducer='ENTR_WAIT_MAIN' />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ENTR_WAIT;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Common\\Chit\\Chit copy.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CANC\\Chit.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_CFRM\\Chit.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\CompleteBtn copy.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Report\\Chit.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\INSP_PROC copy 2.js",["742","743","744","745","746","747"],"//#region import\r\nimport React, { Component } from 'react';\r\nimport Input from '../../../Component/Control/Input';\r\nimport Checkbox from '../../../Component/Control/Checkbox';\r\n\r\nimport { gfc_initPgm, gfc_sleep, gfc_showMask, gfc_hideMask, gfc_chit_yn_YK, gfc_ftp_file_yn_YK } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue, gfs_injectAsyncReducer, gfs_dispatch, gfs_subscribe, gfs_PGM_REDUCER } from '../../../Method/Store';\r\nimport { gfo_getCombo, gfo_getInput, gfo_getCheckbox } from '../../../Method/Component';\r\nimport { gfg_appendRow, gfg_getGrid, gfg_setSelectRow } from '../../../Method/Grid';\r\nimport { getDynamicSql_Oracle, getSp_Oracle } from '../../../db/Oracle/Oracle';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport Layout from '../../../Component/Layout/Layout';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Image as columnImage } from '../../../Component/Grid/Column/Image';\r\nimport { TextArea as columnTextArea } from '../../../Component/Grid/Column/TextArea';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\nimport Mainspan from '../Common/Mainspan';\r\nimport Detailspan from '../Common/Detailspan';\r\nimport Botspan from '../Common/Botspan';\r\nimport Chit from '../Common/Chit/Chit';\r\nimport CompleteBtn from './CompleteBtn';\r\nimport TabList from '../Common/TabList';\r\nimport DispInfo from './DispInfo';\r\nimport DispImg from './DispImg';\r\nimport RecImage from './RecImage';\r\nimport RainInfo from './RainInfo';\r\n\r\nimport GifPlayer from 'react-gif-player';\r\n\r\nimport { YK_WEB_REQ, YK_WEB_REQ_DIRECT2, ReRec, RecodingList } from '../../../WebReq/WebReq';\r\nimport { TOKEN, MILESTONE } from '../../../WebReq/WebReq';\r\nimport { throttle } from 'lodash';\r\nimport { setSessionCookie } from '../../../Cookies';\r\n//#endregion\r\n\r\nclass INSP_PROC extends Component {\r\n\r\n  state = {\r\n    wait_list: [],\r\n    device: []\r\n  }\r\n\r\n  milestoneInfo = async() => {\r\n\r\n    // 선택된 공정의 카메라를 찾아서 스트리밍 받는다\r\n    // 지금은 하드코딩 되어있지만 나중엔 로컬스토리지와 콤보박스를 써서 선택된 공정의 아이피를 가지고 카메라를 가져온다.\r\n    // 1. 선택된 공정의 카메라 정보를 가지고온다.\r\n    // const milestone = TOKEN({reqAddr: 'LOGIN', MilestoneIP: gfs_getStoreValue('CAMERA_REDUCER', 'MilestoneIP')});\r\n    const milestone = await TOKEN({});\r\n    this.token  = milestone.data.TOKEN;\r\n    this.device = milestone.data.DEVICE;\r\n    if(this.token === ''){\r\n      alert('마일스톤 서버에 접속할 수 없습니다.'); \r\n    }else if(this.device === ''){\r\n      alert('마일스톤 서버에 접속할 수 없습니다.');\r\n    }else{\r\n      const areaTp = gfs_getStoreValue('USER_REDUCER', 'AREA_TP');\r\n      const select = await this.callOracle('Common/Common', 'ZM_IMS_CAMERA_SELECT_EACH', [{AREA_TP:areaTp}]);\r\n      if(select.data === undefined){\r\n        alert('설정된 카메라가 없습니다.');\r\n        return;\r\n      }\r\n\r\n      if(select.data.rows.length === 0){\r\n        alert('설정된 카메라가 없습니다.');\r\n        return;\r\n      }\r\n      let data = [];\r\n      for(let i = 0; i < select.data.rows.length; i++){\r\n  \r\n        let col = {};\r\n        for(let j = 0; j < select.data.rows[i].length; j++){\r\n          col[select.data.metaData[j].name] = select.data.rows[i][j];\r\n        }\r\n        data.push(col);\r\n      }\r\n\r\n      let ipArr = [];\r\n      let cameraPort = [];\r\n      let cameraNam = [];\r\n      let rtspAddr = [];\r\n\r\n      for(let i = 0; i < data.length; i++){\r\n        ipArr.push(data[i].CAMERA_IP);\r\n        cameraPort.push(data[i].CAMERA_PORT);\r\n        cameraNam.push(data[i].CAMERA_NAM);\r\n        rtspAddr.push(data[i].RTSP_ADDR);\r\n      }\r\n\r\n      // let ipArr = ['10.10.136.112', '10.10.136.128'];\r\n      // let rtspUrl = ['rtsp://admin:admin13579@10.10.136.112:554/profile2/media.smp', 'rtsp://admin:pass@10.10.136.128:554/video1'];\r\n      // let rtspPort = [3100, 3101];\r\n      this.infoArr = [];\r\n\r\n      for(let i = 0; i < ipArr.length; i++){\r\n        const camera = this.device.find(e1 => e1.Name.indexOf(ipArr[i]) >= 0);\r\n        if(camera){\r\n          this.infoArr.push({\r\n            camera, \r\n            ipArr: ipArr[i], \r\n            cameraPort: cameraPort[i], \r\n            cameraNam: cameraNam[i], \r\n            rtspAddr: rtspAddr[i]\r\n          }); \r\n        }\r\n      }\r\n\r\n      if(this.infoArr.length > 0){\r\n        // this.setState(this.state.device = this.infoArr);\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DEVICE', {DEVICE: this.infoArr});\r\n      }\r\n    }\r\n  }\r\n\r\n  //#region onActivePage 스토어 subscribe로 실행됨.\r\n  onActivePage = () => {\r\n    const activeWindow = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'activeWindow');\r\n    if(activeWindow.programId === 'INSP_PROC'){\r\n      window.onkeydown = e => this.onKeyDown(e);\r\n      window.onmousewheel = e => this.onMouseWheel(e);\r\n    }\r\n  }\r\n\r\n  onCameraChange = () => {\r\n    const cameraDevice = gfs_getStoreValue('INSP_PROC_MAIN', 'DEVICE');\r\n    if(cameraDevice !== undefined){\r\n      if(cameraDevice === 0) return;\r\n\r\n      if(JSON.stringify(cameraDevice) !== JSON.stringify(this.state.device)){\r\n        this.setState({\r\n          device: cameraDevice\r\n        });\r\n      }\r\n    } \r\n  }\r\n  //#endregion\r\n\r\n  //#region PTZ\r\n  debounceKeyDown = throttle((e, device) => {\r\n    let ptz = '';\r\n    if(e.keyCode === 37) ptz = 'left';\r\n    else if(e.keyCode === 38) ptz = 'up';\r\n    else if(e.keyCode === 39) ptz = 'right';\r\n    else if(e.keyCode === 40) ptz = 'down';\r\n\r\n    if(ptz !== ''){\r\n      MILESTONE({reqAddr: 'PTZ',\r\n      device: device.Guid,\r\n      ptz})\r\n    }\r\n  }, 1000);\r\n\r\n  // debounceMouseWheel = throttle((e, device) => {\r\n  //   let ptz = '';\r\n  //   if(e.deltaX === -0){\r\n  //     if (e.wheelDelta > 0){\r\n  //       ptz = 'zoomin';\r\n  //     }else{\r\n  //       ptz = 'zoomout';\r\n  //     }\r\n  //   }\r\n\r\n  //   if(ptz !== ''){\r\n  //     MILESTONE({reqAddr: 'PTZ',\r\n  //     device: device.Guid,\r\n  //     ptz})\r\n  //   }\r\n  // }, 1000);\r\n\r\n\r\n  // debounceKeyDown = (e, device) => {\r\n  //   let ptz = '';\r\n  //   if(e.keyCode === 37) ptz = 'left';\r\n  //   else if(e.keyCode === 38) ptz = 'up';\r\n  //   else if(e.keyCode === 39) ptz = 'right';\r\n  //   else if(e.keyCode === 40) ptz = 'down';\r\n\r\n  //   if(ptz !== ''){\r\n  //     MILESTONE({reqAddr: 'PTZ',\r\n  //     device: device.Guid,\r\n  //     ptz})\r\n  //   }\r\n  // };\r\n\r\n  debounceMouseWheel = (e, device) => {\r\n    let ptz = '';\r\n    if(e.deltaX === -0){\r\n      if (e.wheelDelta > 0){\r\n        ptz = 'zoomin';\r\n      }else{\r\n        ptz = 'zoomout';\r\n      }\r\n    }\r\n\r\n    if(ptz !== ''){\r\n      MILESTONE({reqAddr: 'PTZ',\r\n      device: device.Guid,\r\n      ptz})\r\n    }\r\n  };\r\n\r\n  onKeyDown = (e) => {\r\n    e.stopPropagation();\r\n\r\n    const STD_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'STD_CAM_FOCUS');\r\n    const DUM_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'DUM_CAM_FOCUS');\r\n    \r\n    if(STD_CAM_FOCUS || DUM_CAM_FOCUS){\r\n      this.debounceKeyDown(e, STD_CAM_FOCUS ? this.infoArr[0].camera : this.infoArr[1].camera);\r\n    }\r\n  }\r\n\r\n  onMouseWheel = (e) => {\r\n    e.stopPropagation();\r\n\r\n    const STD_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'STD_CAM_FOCUS');\r\n    const DUM_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'DUM_CAM_FOCUS');\r\n\r\n    if(STD_CAM_FOCUS || DUM_CAM_FOCUS){\r\n      this.debounceMouseWheel(e, STD_CAM_FOCUS ? this.infoArr[0].camera : this.infoArr[1].camera);\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region 녹화제어\r\n  startRec = async () => {\r\n    \r\n    const scaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n    const camera_no = gfs_getStoreValue('USER_REDUCER', 'CAMERA_NO');\r\n    if(scaleNumb === ''){\r\n      alert('선택된 계근번호가 없습니다.');\r\n      return;\r\n    }\r\n    if(camera_no === '' || camera_no === null){\r\n      alert('설정된 차량인식 카메라가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    //기존저장된 파일있는지 확인.\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_REC(\r\n                  :p_RowStatus,\r\n                  :p_scaleNumb,\r\n                  :p_seq,\r\n                  :p_cameraNo,\r\n                  :p_cameraDevice,\r\n                  :p_cameraName,\r\n                  :p_UserId,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_RowStatus    : 'R2',\r\n        p_scaleNumb    : scaleNumb,\r\n        p_seq          : 0,\r\n        p_cameraNo     : '',\r\n        p_cameraDevice : '',\r\n        p_cameraName   : '',\r\n        p_UserId       : ''\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS === 'N'){\r\n      if(result.data.MSG_CODE === '1'){\r\n        if(window.confirm(result.data.MSG_TEXT) === true){\r\n          const recYn = await ReRec(scaleNumb);\r\n          //0. 파일명은 변경된 상태\r\n          if(recYn.data.Response === 'OK'){\r\n            //1. DB에 녹화시작으로 저장\r\n            let param = [];\r\n            param.push({\r\n              sp   : `begin \r\n                        SP_ZM_IMS_REC(\r\n                          :p_RowStatus,\r\n                          :p_scaleNumb,\r\n                          :p_seq,\r\n                          :p_cameraNo,\r\n                          :p_cameraDevice,\r\n                          :p_cameraName,\r\n                          :p_UserId,\r\n                          \r\n                          :p_select,\r\n                          :p_SUCCESS,\r\n                          :p_MSG_CODE,\r\n                          :p_MSG_TEXT,\r\n                          :p_COL_NAM\r\n                        );\r\n                      end;\r\n                      `,\r\n              data : {\r\n                p_RowStatus    : 'I2',\r\n                p_scaleNumb    : scaleNumb,\r\n                p_seq          : 0,\r\n                p_cameraNo     : camera_no,\r\n                p_cameraDevice : '',\r\n                p_cameraName   : '',\r\n                p_UserId       : ''\r\n              },\r\n              errSeq: 0\r\n            })\r\n            \r\n            const result = await getSp_Oracle(param);\r\n\r\n            if(result.data.SUCCESS === 'N'){\r\n              alert('수동녹화 시작에 실패했습니다.');\r\n            }\r\n          }\r\n        }else{\r\n          return;\r\n        }\r\n      }else{\r\n        if(window.confirm(result.data.MSG_TEXT) === true){\r\n          //1. DB에 녹화시작으로 저장\r\n          let param = [];\r\n          param.push({\r\n            sp   : `begin \r\n                      SP_ZM_IMS_REC(\r\n                        :p_RowStatus,\r\n                        :p_scaleNumb,\r\n                        :p_seq,\r\n                        :p_cameraNo,\r\n                        :p_cameraDevice,\r\n                        :p_cameraName,\r\n                        :p_UserId,\r\n                        \r\n                        :p_select,\r\n                        :p_SUCCESS,\r\n                        :p_MSG_CODE,\r\n                        :p_MSG_TEXT,\r\n                        :p_COL_NAM\r\n                      );\r\n                    end;\r\n                    `,\r\n            data : {\r\n              p_RowStatus    : 'I3',\r\n              p_scaleNumb    : scaleNumb,\r\n              p_seq          : 0,\r\n              p_cameraNo     : camera_no,\r\n              p_cameraDevice : '',\r\n              p_cameraName   : '',\r\n              p_UserId       : ''\r\n            },\r\n            errSeq: 0\r\n          })\r\n          \r\n          const result = await getSp_Oracle(param);\r\n\r\n          if(result.data.SUCCESS === 'N'){\r\n            alert('수동녹화 시작에 실패했습니다.');\r\n          }\r\n        }else{\r\n          return;\r\n        }\r\n      }\r\n    }else{\r\n        //1. DB에 녹화시작으로 저장\r\n        let param = [];\r\n        param.push({\r\n          sp   : `begin \r\n                    SP_ZM_IMS_REC(\r\n                      :p_RowStatus,\r\n                      :p_scaleNumb,\r\n                      :p_seq,\r\n                      :p_cameraNo,\r\n                      :p_cameraDevice,\r\n                      :p_cameraName,\r\n                      :p_UserId,\r\n                      \r\n                      :p_select,\r\n                      :p_SUCCESS,\r\n                      :p_MSG_CODE,\r\n                      :p_MSG_TEXT,\r\n                      :p_COL_NAM\r\n                    );\r\n                  end;\r\n                  `,\r\n          data : {\r\n            p_RowStatus    : 'I2',\r\n            p_scaleNumb    : scaleNumb,\r\n            p_seq          : 0,\r\n            p_cameraNo     : camera_no,\r\n            p_cameraDevice : '',\r\n            p_cameraName   : '',\r\n            p_UserId       : ''\r\n          },\r\n          errSeq: 0\r\n        })\r\n        \r\n        const result = await getSp_Oracle(param);\r\n\r\n        if(result.data.SUCCESS === 'N'){\r\n          alert('수동녹화 시작에 실패했습니다.');\r\n        }\r\n    }\r\n  }\r\n\r\n  stopRec = async () => {\r\n    const scaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n    const camera_no = gfs_getStoreValue('USER_REDUCER', 'CAMERA_NO');\r\n    if(scaleNumb === ''){\r\n      alert('선택된 계근번호가 없습니다.');\r\n      return;\r\n    }\r\n    if(camera_no === '' || camera_no === null){\r\n      alert('설정된 차량인식 카메라가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    //기존저장된 파일있는지 확인.\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_REC(\r\n                  :p_RowStatus,\r\n                  :p_scaleNumb,\r\n                  :p_seq,\r\n                  :p_cameraNo,\r\n                  :p_cameraDevice,\r\n                  :p_cameraName,\r\n                  :p_UserId,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_RowStatus    : 'R4',\r\n        p_scaleNumb    : scaleNumb,\r\n        p_seq          : 0,\r\n        p_cameraNo     : '',\r\n        p_cameraDevice : '',\r\n        p_cameraName   : '',\r\n        p_UserId       : ''\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS === 'N'){\r\n      alert('녹화중인 계량번호가 아닙니다.');\r\n      return;\r\n    }else{\r\n\r\n      let param = [];\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_REC(\r\n                    :p_RowStatus,\r\n                    :p_scaleNumb,\r\n                    :p_seq,\r\n                    :p_cameraNo,\r\n                    :p_cameraDevice,\r\n                    :p_cameraName,\r\n                    :p_UserId,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_RowStatus    : 'D3',\r\n          p_scaleNumb    : scaleNumb,\r\n          p_seq          : 0,\r\n          p_cameraNo     : '',\r\n          p_cameraDevice : '',\r\n          p_cameraName   : '',\r\n          p_UserId       : ''\r\n        },\r\n        errSeq: 0\r\n      })\r\n      \r\n      const result = await getSp_Oracle(param);\r\n\r\n      if(result.data.SUCCESS === 'N'){\r\n        alert('수동녹화 중지에 실패했습니다.');\r\n      }\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this);\r\n\r\n    //#region 리듀서\r\n    const INSP_PROC_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'INSP_PROC_MAIN') {\r\n        return {\r\n          ON_ACTIVE    : nowState === undefined ? {\r\n            active : true,\r\n            time   : new Date() \r\n          } : nowState.ON_ACTIVE,\r\n\r\n          DEVICE       : nowState === undefined ? 0 : nowState.DEVICE,\r\n\r\n          RAIN_INFO    : nowState === undefined ? 0 : nowState.RAIN_INFO,\r\n\r\n          MAIN_WAIT    : nowState === undefined ? 0 : nowState.MAIN_WAIT,\r\n          MAIN_TOTAL   : nowState === undefined ? 0 : nowState.MAIN_TOTAL,\r\n          MAIN_WEIGHT  : nowState === undefined ? 0 : nowState.MAIN_WEIGHT,\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n          PROC_WAIT    : nowState === undefined ? 0 : nowState.PROC_WAIT,\r\n          DEPT_WAIT    : nowState === undefined ? 0 : nowState.DEPT_WAIT,\r\n          ENTR_WAIT    : nowState === undefined ? 0 : nowState.ENTR_WAIT,\r\n          DRIV_WAIT    : nowState === undefined ? 0 : nowState.DRIV_WAIT,\r\n          \r\n          DETAIL_SCALE : nowState === undefined ? '' : nowState.DETAIL_SCALE,\r\n          DETAIL_CARNO : nowState === undefined ? '' : nowState.DETAIL_CARNO,\r\n          DETAIL_WEIGHT: nowState === undefined ? '' : nowState.DETAIL_WEIGHT,\r\n          DETAIL_DATE  : nowState === undefined ? '' : nowState.DETAIL_DATE,\r\n\r\n          STD_CAM_IMG  : nowState === undefined ? null : nowState.STD_CAM_IMG,\r\n          DUM_CAM_IMG  : nowState === undefined ? null : nowState.DUM_CAM_IMG,\r\n          ETC1_CAM_IMG : nowState === undefined ? false : nowState.ETC1_CAM_IMG,\r\n          ETC2_CAM_IMG : nowState === undefined ? false : nowState.ETC2_CAM_IMG,\r\n\r\n          STD_CAM_OPEN : nowState === undefined ? false : nowState.STD_CAM_OPEN,\r\n          DUM_CAM_OPEN : nowState === undefined ? false : nowState.DUM_CAM_OPEN,\r\n          ETC1_CAM_OPEN : nowState === undefined ? false : nowState.ETC1_CAM_OPEN,\r\n          ETC2_CAM_OPEN : nowState === undefined ? false : nowState.ETC2_CAM_OPEN,\r\n\r\n          STD_CAM_FOCUS: nowState === undefined ? false : nowState.STD_CAM_FOCUS,\r\n          DUM_CAM_FOCUS: nowState === undefined ? false : nowState.DUM_CAM_FOCUS,\r\n          ETC1_CAM_FOCUS : nowState === undefined ? false : nowState.ETC1_CAM_FOCUS,\r\n          ETC2_CAM_FOCUS : nowState === undefined ? false : nowState.ETC2_CAM_FOCUS,\r\n\r\n          STD_CAM_REC  : nowState === undefined ? {\r\n            rec     : false,\r\n            time    : '00:00'\r\n          } : nowState.STD_CAM_REC,\r\n\r\n          DUM_CAM_REC  : nowState === undefined ? {\r\n            rec     : false,\r\n            time    : '00:00'\r\n          } : nowState.DUM_CAM_REC,\r\n\r\n          CHIT_MEMO    : nowState === undefined ? '' : nowState.CHIT_MEMO,\r\n          \r\n          CHIT_INFO    : nowState === undefined ? {\r\n            date     : '',\r\n            scaleNumb: '',\r\n            carNumb  : '',\r\n            vender   : '',\r\n            itemFlag : '',\r\n            Wgt      : '',\r\n            loc      : '',\r\n            user     : '',\r\n            chit     : 'N'\r\n          } : nowState.CHIT_INFO,\r\n          \r\n          DISP_INFO    : nowState === undefined ? {\r\n            scaleNumb       : '',\r\n            scrp_ord_no     : '',\r\n            scrp_grd_nm     : '',\r\n            real_vender_name: '',\r\n            load_area_nm    : '',\r\n            load_area_addr  : ''\r\n          } : nowState.DISP_INFO,\r\n\r\n          DISP_PIC    : nowState === undefined ? {\r\n            scaleNumb           : '',\r\n            scrp_ord_no         : '',\r\n            empty_front_date    : '',\r\n            empty_front         : '',\r\n            empty_front_gps_addr: '',\r\n            empty_rear_date     : '',\r\n            empty_rear          : '',\r\n            empty_rear_gps_addr : '',\r\n            cargo_front_date    : '',\r\n            cargo_front         : '',\r\n            cargo_front_gps_addr: '',\r\n            cargo_rear_date     : '',\r\n            cargo_rear          : '',\r\n            cargo_rear_gps_addr : ''\r\n          } : nowState.DISP_PIC\r\n        };\r\n      }\r\n\r\n      if(action.type === 'DEVICE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEVICE : action.DEVICE\r\n        })\r\n      }else if(action.type === 'RAIN_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          RAIN_INFO : action.RAIN_INFO\r\n        })\r\n      }else if(action.type === 'MAIN_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WAIT : action.MAIN_WAIT\r\n        })\r\n      }else if(action.type === 'DRIV_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DRIV_WAIT : action.DRIV_WAIT\r\n        })\r\n      }else if(action.type === 'MAIN_TOTAL'){\r\n        \r\n        return Object.assign({}, nowState, {\r\n          MAIN_TOTAL : action.MAIN_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WEIGHT : action.MAIN_WEIGHT\r\n        })\r\n      }else if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }else if(action.type === 'PROC_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          PROC_WAIT : action.PROC_WAIT\r\n        })\r\n      }else if(action.type === 'DEPT_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEPT_WAIT : action.DEPT_WAIT\r\n        })\r\n      }else if(action.type === 'ENTR_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ENTR_WAIT : action.ENTR_WAIT\r\n        })\r\n      }else if(action.type === 'DETAIL_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_SCALE : action.DETAIL_SCALE\r\n        })\r\n      }else if(action.type === 'DETAIL_CARNO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_CARNO : action.DETAIL_CARNO\r\n        })\r\n      }else if(action.type === 'DETAIL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_WEIGHT : action.DETAIL_WEIGHT\r\n        })\r\n      }else if(action.type === 'DETAIL_DATE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_DATE : action.DETAIL_DATE\r\n        })\r\n      }else if(action.type === 'STD_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_IMG : action.STD_CAM_IMG\r\n        })\r\n      }else if(action.type === 'DUM_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_IMG : action.DUM_CAM_IMG\r\n        })\r\n      }else if(action.type === 'ETC1_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC1_CAM_IMG : action.ETC1_CAM_IMG\r\n        })\r\n      }else if(action.type === 'ETC2_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC2_CAM_IMG : action.ETC2_CAM_IMG\r\n        })\r\n      }else if(action.type === 'STD_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_OPEN : action.STD_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'DUM_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_OPEN : action.DUM_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'ETC1_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC1_CAM_OPEN : action.ETC1_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'ETC2_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC2_CAM_OPEN : action.ETC2_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'STD_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_FOCUS : action.STD_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'DUM_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_FOCUS : action.DUM_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'ETC1_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC1_CAM_FOCUS : action.ETC1_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'ETC2_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC2_CAM_FOCUS : action.ETC2_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.STD_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.DUM_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec     : nowState.STD_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec     : nowState.DUM_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }\r\n      // else if(action.type === 'CHIT_INFO_ITEM_FLAG'){\r\n\r\n      //   return Object.assign({}, nowState, {\r\n      //     CHIT_INFO : {\r\n      //       date     :  nowState.CHIT_INFO.date,\r\n      //       scaleNumb:  nowState.CHIT_INFO.scaleNumb,\r\n      //       carNumb  :  nowState.CHIT_INFO.carNumb,\r\n      //       vender   :  nowState.CHIT_INFO.vender,\r\n      //       itemFlag :  action.itemFlag,\r\n      //       Wgt      :  nowState.CHIT_INFO.Wgt,\r\n      //       loc      :  nowState.CHIT_INFO.loc,\r\n      //       user     :  nowState.CHIT_INFO.user,\r\n      //       chit     :  nowState.CHIT_INFO.chit\r\n      //     }\r\n      //   })\r\n      // }\r\n      else if(action.type === 'CHIT_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     : action.date,\r\n            scaleNumb: action.scaleNumb,\r\n            carNumb  : action.carNumb,\r\n            vender   : action.vender,\r\n            itemFlag : action.itemFlag,\r\n            Wgt      : action.Wgt,\r\n            loc      : action.loc,\r\n            user     : action.user,\r\n            chit     : action.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_MEMO'){\r\n        return Object.assign({}, nowState, {\r\n          CHIT_MEMO : action.CHIT_MEMO\r\n        })\r\n      }else if(action.type === 'DISP_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DISP_INFO : {\r\n            scaleNumb       : action.scaleNumb,\r\n            scrp_ord_no     : action.scrp_ord_no,\r\n            scrp_grd_nm     : action.scrp_grd_nm,\r\n            real_vender_name: action.real_vender_name,\r\n            load_area_nm    : action.load_area_nm,\r\n            load_area_addr  : action.load_area_addr  \r\n          }\r\n        })\r\n      }else if(action.type === 'DISP_PIC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DISP_PIC : {\r\n            scaleNumb           : action.scaleNumb,\r\n            scrp_ord_no         : action.scrp_ord_no,\r\n            empty_front_date    : action.empty_front_date,\r\n            empty_front         : action.empty_front,\r\n            empty_front_gps_addr: action.empty_front_gps_addr,\r\n            empty_rear_date     : action.empty_rear_date,\r\n            empty_rear          : action.empty_rear,\r\n            empty_rear_gps_addr : action.empty_rear_gps_addr,\r\n            cargo_front_date    : action.cargo_front_date,\r\n            cargo_front         : action.cargo_front,\r\n            cargo_front_gps_addr: action.cargo_front_gps_addr,\r\n            cargo_rear_date     : action.cargo_rear_date,\r\n            cargo_rear          : action.cargo_rear,\r\n            cargo_rear_gps_addr : action.cargo_rear_gps_addr \r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('INSP_PROC_MAIN', INSP_PROC_MAIN);\r\n    gfs_subscribe(this.onActivePage);\r\n    gfs_subscribe(this.onCameraChange);\r\n    //#endregion\r\n  }\r\n\r\n  callOracle = async(file, fn, param) => {\r\n    let result = await getDynamicSql_Oracle(\r\n      file,\r\n      fn,\r\n      param\r\n    ); \r\n\r\n    return result;\r\n  }\r\n\r\n  Init = async() => {\r\n    await this.milestoneInfo();\r\n  }\r\n\r\n  //#region 개별조회\r\n  mainHeader = async() => {\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                sp_zm_mstr_header(\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n\r\n      },\r\n      errSeq: 0\r\n    })\r\n  \r\n    const select = await getSp_Oracle(param);\r\n    if(select.data.SUCCESS === 'Y'){\r\n      if(select.data.ROWS[0].R_CARSU !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WAIT', {MAIN_WAIT: select.data.ROWS[0].R_CARSU});\r\n\r\n      if(select.data.ROWS[0].E_CARSU !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_TOTAL'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_TOTAL', {MAIN_TOTAL: select.data.ROWS[0].E_CARSU});\r\n\r\n      if(select.data.ROWS[0].E_KG !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WEIGHT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WEIGHT', {MAIN_WEIGHT: select.data.ROWS[0].E_KG});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WAIT', {MAIN_WAIT: 0});\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_TOTAL') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_TOTAL', {MAIN_TOTAL: 0});\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WEIGHT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WEIGHT', {MAIN_WEIGHT: 0});\r\n    }\r\n\r\n    // YK_WEB_REQ('tally_mstr_header.jsp').then(e => {\r\n    //   const header = e.data.dataSend;\r\n    //   if(header){\r\n    //     if(header[0].rCar !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WAIT'))\r\n    //       gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WAIT', {MAIN_WAIT: header[0].rCar});\r\n\r\n    //     if(header[0].eCar !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_TOTAL'))\r\n    //       gfs_dispatch('INSP_PROC_MAIN', 'MAIN_TOTAL', {MAIN_TOTAL: header[0].eCar});\r\n\r\n    //     if(header[0].eKg !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WEIGHT'))\r\n    //       gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WEIGHT', {MAIN_WEIGHT: header[0].eKg});\r\n    //   }else{\r\n    //     if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WAIT') !== 0)\r\n    //       gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WAIT', {MAIN_WAIT: 0});\r\n    //     if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_TOTAL') !== 0)\r\n    //       gfs_dispatch('INSP_PROC_MAIN', 'MAIN_TOTAL', {MAIN_TOTAL: 0});\r\n    //     if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WEIGHT') !== 0)\r\n    //       gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WEIGHT', {MAIN_WEIGHT: 0});\r\n    //   }\r\n    // })\r\n  }\r\n\r\n  mainHeader2 = async() => {\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                sp_zm_mstr_header(\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n\r\n      },\r\n      errSeq: 0\r\n    })\r\n  \r\n    const select = await getSp_Oracle(param);\r\n    console.log(select)\r\n    // //출차대기\r\n    // YK_WEB_REQ('tally_mstr_pass.jsp').then(e => {\r\n    //   const header2 = e.data.dataSend;\r\n    //   if(header2){\r\n    //     if(header2.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'DEPT_WAIT'))\r\n    //       gfs_dispatch('INSP_PROC_MAIN', 'DEPT_WAIT', {DEPT_WAIT: header2.length});\r\n    //   }else{\r\n    //     if(gfs_getStoreValue('INSP_PROC_MAIN', 'DEPT_WAIT') !== 0)\r\n    //       gfs_dispatch('INSP_PROC_MAIN', 'DEPT_WAIT', {DEPT_WAIT: 0});\r\n    //   }\r\n    // })\r\n\r\n    // //입차대기\r\n    // YK_WEB_REQ('tally_mstr_drive.jsp').then(e => {\r\n    //   const header3 = e.data.dataSend;\r\n    //   if(header3){\r\n    //     if(header3.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'ENTR_WAIT'))\r\n    //       gfs_dispatch('INSP_PROC_MAIN', 'ENTR_WAIT', {ENTR_WAIT: header3.length});\r\n    //   }else{\r\n    //     if(gfs_getStoreValue('INSP_PROC_MAIN', 'ENTR_WAIT') !== 0)\r\n    //       gfs_dispatch('INSP_PROC_MAIN', 'ENTR_WAIT', {ENTR_WAIT: 0});\r\n    //   }\r\n    // })\r\n\r\n    // //운송대기\r\n    // YK_WEB_REQ('tally_mstr_drive_wait.jsp').then(e => {\r\n    //   const header4 = e.data.dataSend;\r\n    //   if(header4){\r\n    //     if(header4.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'DRIV_WAIT'))\r\n    //       gfs_dispatch('INSP_PROC_MAIN', 'DRIV_WAIT', {DRIV_WAIT: header4.length});\r\n    //   }else{\r\n    //     if(gfs_getStoreValue('INSP_PROC_MAIN', 'DRIV_WAIT') !== 0)\r\n    //       gfs_dispatch('INSP_PROC_MAIN', 'DRIV_WAIT', {DRIV_WAIT: 0});\r\n    //   }\r\n    // })\r\n  }\r\n\r\n  mainGrid = async () => {\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                sp_zm_mstr_header(\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n\r\n      },\r\n      errSeq: 0\r\n    })\r\n  \r\n    const select = await getSp_Oracle(param);\r\n    console.log(select)\r\n\r\n    // const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n\r\n    // YK_WEB_REQ('tally_mstr_wait.jsp').then(e => {\r\n    //   const main = e.data.dataSend;\r\n\r\n    //   if(main){\r\n    //     if(main.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'PROC_WAIT'))\r\n    //       gfs_dispatch('INSP_PROC_MAIN', 'PROC_WAIT', {PROC_WAIT: main.length});\r\n  \r\n    //     const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n    //     const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n    \r\n    //     let data = main.filter(e => {\r\n    //       if(search_tp !== null && search_tp !== ''){\r\n    //         //계근번호\r\n    //         if(search_tp === '1'){\r\n    //           if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n    //             return true;\r\n    //           }else{\r\n    //             return false;\r\n    //           }\r\n    //         }\r\n    //         //차량번호\r\n    //         else if(search_tp === '2'){\r\n    //           if(e.carNumb.indexOf(search_txt) >= 0){\r\n    //             return true;\r\n    //           }else{\r\n    //             return false;\r\n    //           }\r\n    //         }\r\n    //         //사전등급\r\n    //         else if(search_tp === '3'){\r\n    //           if(e.itemGrade.indexOf(search_txt) >= 0){\r\n    //             return true;\r\n    //           }else{\r\n    //             return false;\r\n    //           }\r\n    //         }\r\n    //         //업체\r\n    //         else if(search_tp === '4'){\r\n    //           if(e.vendor.indexOf(search_txt) >= 0){\r\n    //             return true;\r\n    //           }else{\r\n    //             return false;\r\n    //           }\r\n    //         }\r\n            \r\n    //       }else{\r\n    //         return true;\r\n    //       }\r\n    //     })\r\n\r\n    //     if(data.length > 0){\r\n          \r\n    //       //기존 그리드에서 scaleNumb기준으로 데이터가 없으면 추가한다.\r\n    //       for(let i = 0; i < data.length; i++){\r\n    //         const scaleNumb = data[i].scaleNumb;\r\n\r\n    //         const oldData = grid.getData().find(e => e.scaleNumb === scaleNumb);\r\n    //         if(!oldData){\r\n    //           gfg_appendRow(grid, grid.getRowCount(), {\r\n    //             scaleNumb,\r\n    //             carNumb: data[i].carNumb,\r\n    //             itemGrade: data[i].itemGrade,\r\n    //             date: data[i].date,\r\n    //             vendor: data[i].vendor,\r\n    //             rec: '0'\r\n    //           }, 'scaleNumb', false);\r\n    //         }\r\n    //       }\r\n\r\n    //       //새로운 정보 기준으로 데이터가 지워졌으면 삭제한다.\r\n    //       for(let i = 0; i < grid.getData().length; i++){\r\n    //         const scaleNumb =  grid.getData()[i].scaleNumb;\r\n\r\n    //         const newData = data.find(e => e.scaleNumb === scaleNumb)\r\n    //         if(!newData){\r\n    //           grid.removeRow(i);\r\n\r\n    //           //지워진 데이터가 기존에 선택된 데이터 이면 초기화 한다.\r\n    //           const selectScaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n    //           if(scaleNumb === selectScaleNumb){\r\n    //             gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n    //             gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n    //             gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: '0'});\r\n    //             gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n    //           }\r\n    //         }\r\n    //       }\r\n\r\n    //       RecodingList().then(recScaleNumb => {\r\n    //         for(let i = 0; i < recScaleNumb.data.Response.length; i++){\r\n\r\n    //           const data = grid.getData().find(e => e.scaleNumb === recScaleNumb.data.Response[i])\r\n    //           if(data){\r\n    //             //녹화 on만 설정\r\n    //             grid.setValue(data.rowKey, 'rec', '1');\r\n    //           }\r\n    //         }\r\n\r\n    //         const recGrid = grid.getData().filter(e => e.rec === '1');\r\n    //         for(let i = 0; i < recGrid.length; i++){\r\n    //           const data = recScaleNumb.data.Response.find(e => e === recGrid[i].scaleNumb);\r\n    //           if(!data){\r\n    //             //녹화 off만 설정\r\n    //             grid.setValue(recGrid[i].rowKey, 'rec', '0');\r\n    //           }\r\n    //         }\r\n    //       })\r\n    \r\n    //       if(data.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'BOT_TOTAL'))\r\n    //         gfs_dispatch('INSP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n    //     }else{\r\n    //       grid.clear();\r\n    //       if(gfs_getStoreValue('INSP_PROC_MAIN', 'BOT_TOTAL') !== 0)\r\n    //         gfs_dispatch('INSP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n    //     }\r\n        \r\n    //     grid.resetOriginData();\r\n    //     grid.restore();\r\n    //   }else{\r\n    //     grid.clear();\r\n    //     if(gfs_getStoreValue('INSP_PROC_MAIN', 'PROC_WAIT') !== 0)\r\n    //       gfs_dispatch('INSP_PROC_MAIN', 'PROC_WAIT', {PROC_WAIT: 0});\r\n    //   }\r\n    // })\r\n  }\r\n  //#endregion\r\n\r\n  testtt = async() => {\r\n\r\n    this.mainHeaderInterval = setInterval(e => {\r\n      this.mainHeader();\r\n    }, 2000)\r\n\r\n    await gfc_sleep(600);\r\n\r\n    this.mainHeaderInterval2 = setInterval(e => {\r\n      this.mainHeader2();\r\n    }, 2000)\r\n\r\n    await gfc_sleep(700);\r\n\r\n    this.mainGridInterval = setInterval(e => {\r\n      this.mainGrid();\r\n    }, 2000)\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.Init();\r\n    // this.Retrieve();\r\n    this.testtt();\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.mainHeaderInterval);\r\n    clearInterval(this.mainHeaderInterval2);\r\n    clearInterval(this.mainGridInterval);\r\n  }\r\n\r\n  Retrieve = async () => {\r\n    gfc_showMask();\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(''); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue('');      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_ord_no').setValue('');      //배차번호\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_grd_nm').setValue('');      //배차등급\r\n    gfo_getInput(this.props.pgm, 'disp_real_vender_name').setValue(''); //실공급자\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_nm').setValue('');     //실상차지\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_addr').setValue('');   //주소\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n      chit     : false\r\n    });\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DISP_INFO', {\r\n      scaleNumb       : '',\r\n      scrp_ord_no     : '',\r\n      scrp_grd_nm     : '',\r\n      real_vender_name: '',\r\n      load_area_nm    : '',\r\n      load_area_addr  : ''\r\n    });\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DISP_PIC', {\r\n      scaleNumb           : '',\r\n      scrp_ord_no         : '',\r\n  \r\n      empty_front_date    : '',\r\n      empty_front         : '',\r\n      empty_front_gps_addr: '',\r\n      empty_rear_date     : '',\r\n      empty_rear          : '',\r\n      empty_rear_gps_addr : '',\r\n      cargo_front_date    : '',\r\n      cargo_front         : '',\r\n      cargo_front_gps_addr: '',\r\n      cargo_rear_date     : '',\r\n      cargo_rear          : '',\r\n      cargo_rear_gps_addr : ''\r\n    });\r\n\r\n    const headData = await YK_WEB_REQ('tally_mstr_header.jsp');\r\n    const header = headData.data.dataSend;\r\n    if(header){\r\n      gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WAIT', {MAIN_WAIT: header[0].rCar});\r\n      gfs_dispatch('INSP_PROC_MAIN', 'MAIN_TOTAL', {MAIN_TOTAL: header[0].eCar});\r\n      gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WEIGHT', {MAIN_WEIGHT: header[0].eKg});\r\n    }else{\r\n      gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WAIT', {MAIN_WAIT: 0});\r\n      gfs_dispatch('INSP_PROC_MAIN', 'MAIN_TOTAL', {MAIN_TOTAL: 0});\r\n      gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WEIGHT', {MAIN_WEIGHT: 0});\r\n    }\r\n\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    grid.clear();\r\n\r\n    const mainData = await YK_WEB_REQ('tally_mstr_wait.jsp');\r\n    const main = mainData.data.dataSend;\r\n\r\n    if(main){\r\n      gfs_dispatch('INSP_PROC_MAIN', 'PROC_WAIT', {PROC_WAIT: main.length});\r\n\r\n    \r\n      const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n      const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n      \r\n      const data = main.filter(e => {\r\n        if(search_tp !== null && search_tp !== ''){\r\n          //계근번호\r\n          if(search_tp === '1'){\r\n            if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          //차량번호\r\n          else if(search_tp === '2'){\r\n            if(e.carNumb.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          //사전등급\r\n          else if(search_tp === '3'){\r\n            if(e.itemGrade.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          //업체\r\n          else if(search_tp === '4'){\r\n            if(e.vendor.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          \r\n        }else{\r\n          return true;\r\n        }\r\n      })\r\n    \r\n      if(data.length > 0){\r\n        grid.resetData(data);\r\n        gfg_setSelectRow(grid);\r\n  \r\n        gfs_dispatch('INSP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n      }else{\r\n        gfs_dispatch('INSP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      }\r\n    }else{\r\n      gfs_dispatch('INSP_PROC_MAIN', 'PROC_WAIT', {PROC_WAIT: 0});\r\n    }\r\n\r\n    //출차대기\r\n    const headData2 = await YK_WEB_REQ('tally_mstr_pass.jsp');\r\n    const header2 = headData2.data.dataSend;\r\n    if(header2){\r\n      gfs_dispatch('INSP_PROC_MAIN', 'DEPT_WAIT', {DEPT_WAIT: header2.length});\r\n    }else{\r\n      gfs_dispatch('INSP_PROC_MAIN', 'DEPT_WAIT', {DEPT_WAIT: 0});\r\n    }\r\n\r\n    //입차대기\r\n    const headData3 = await YK_WEB_REQ('tally_mstr_drive.jsp');\r\n    const header3 = headData3.data.dataSend;\r\n    if(header3){\r\n      gfs_dispatch('INSP_PROC_MAIN', 'ENTR_WAIT', {ENTR_WAIT: header3.length});\r\n    }else{\r\n      gfs_dispatch('INSP_PROC_MAIN', 'ENTR_WAIT', {ENTR_WAIT: 0});\r\n    }\r\n\r\n    //운송대기\r\n    const headData4 = await YK_WEB_REQ('tally_mstr_drive_wait.jsp');\r\n    const header4 = headData4.data.dataSend;\r\n    if(header4){\r\n      gfs_dispatch('INSP_PROC_MAIN', 'DRIV_WAIT', {DRIV_WAIT: header4.length});\r\n    }else{\r\n      gfs_dispatch('INSP_PROC_MAIN', 'DRIV_WAIT', {DRIV_WAIT: 0});\r\n    }\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n  dblclick = async(e) => {\r\n    gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n      ({\r\n        windowZindex: 0,\r\n        activeWindow: {programId:  'INSP_HIST',\r\n                       programNam: '검수이력'\r\n                      }\r\n      })\r\n    );\r\n  }\r\n\r\n  onSelectChange = async (e) => {\r\n    if(e === null) return;\r\n\r\n    gfc_showMask();\r\n\r\n    document.getElementById('tab1_INSP_PROC').click(0);\r\n    await gfc_sleep(100);\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(e.itemGrade); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue(e.cartype);      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_ord_no').setValue('');      //배차번호\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_grd_nm').setValue('');      //배차등급\r\n    gfo_getInput(this.props.pgm, 'disp_real_vender_name').setValue(''); //실공급자\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_nm').setValue('');     //실상차지\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_addr').setValue('');   //주소\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: e.scaleNumb});\r\n    setSessionCookie('DETAIL_SCALE', e.scaleNumb);\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: e.carNumb});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: e.totalWgt});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: e.date});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n      chit     : false\r\n    });\r\n\r\n    //계량증명서 정보여부\r\n    const chitInfoYn = await YK_WEB_REQ(`tally_chit.jsp?scaleNumb=${e.scaleNumb}`);\r\n    if(!chitInfoYn.data.dataSend){\r\n      alert('계량증명서 정보가 없습니다.');\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n\r\n    //계량증명서 여부 확인.\r\n    const chitYn = await gfc_ftp_file_yn_YK(e.scaleNumb);\r\n    \r\n    // if(chitYn.data === 'N'){\r\n      gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n        date     : chitInfoYn.data.dataSend[0].date,\r\n        scaleNumb: chitInfoYn.data.dataSend[0].scaleNumb,\r\n        carNumb  : chitInfoYn.data.dataSend[0].carNumb,\r\n        vender   : chitInfoYn.data.dataSend[0].vendor,\r\n        itemFlag : e.itemGrade,\r\n        Wgt      : chitInfoYn.data.dataSend[0].totalWgt,\r\n        loc      : chitInfoYn.data.dataSend[0].area,\r\n        user     : gfs_getStoreValue('USER_REDUCER', 'USER_NAM'),\r\n        chit     : chitYn.data\r\n      });\r\n    // }else{\r\n    //   gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n    //     chit     : chitYn.data,\r\n    //     scaleNumb: chitInfoYn.data.dataSend[0].scaleNumb\r\n    //   });\r\n    // }\r\n\r\n    //배차정보\r\n    const dispInfo = await YK_WEB_REQ(`tally_process_f3.jsp?scaleNumb=${e.scaleNumb}`); \r\n    // const dispInfo = await YK_WEB_REQ_DIRECT('http://tally.yksteel.co.kr/tally_process_f3.jsp?scaleNumb=202108300001');\r\n    if(dispInfo.data.dataSend){\r\n      gfs_dispatch('INSP_PROC_MAIN', 'DISP_INFO', {\r\n        scaleNumb       : chitInfoYn.data.dataSend[0].scaleNumb,\r\n        scrp_ord_no     : dispInfo.data.dataSend[0].SCRP_ORD_NO,\r\n        scrp_grd_nm     : dispInfo.data.dataSend[0].SCRP_GRD_NM,\r\n        real_vender_name: dispInfo.data.dataSend[0].REAL_VENDER_NAME,\r\n        load_area_nm    : dispInfo.data.dataSend[0].LOAD_AREA_NM,\r\n        load_area_addr  : dispInfo.data.dataSend[0].LOAD_AREA_ADDR\r\n      });\r\n\r\n      const scrp_ord_no = dispInfo.data.dataSend[0].SCRP_ORD_NO;\r\n      const yyyy = scrp_ord_no.substr(2, 4);\r\n      const mm = scrp_ord_no.substr(6, 2);\r\n      const dd = scrp_ord_no.substr(8, 2);\r\n\r\n      gfs_dispatch('INSP_PROC_MAIN', 'DISP_PIC', {\r\n        scaleNumb           : chitInfoYn.data.dataSend[0].scaleNumb,\r\n        scrp_ord_no         : dispInfo.data.dataSend[0].SCRP_ORD_NO,\r\n    \r\n        empty_front_date    : dispInfo.data.PIC[0].EMPTY_FRONT_DATE,\r\n        empty_front         : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.PIC[0].EMPTY_FRONT}`,\r\n        empty_front_gps_addr: dispInfo.data.PIC[0].EMPTY_FRONT_GPS_ADDR,\r\n        \r\n        empty_rear_date     : dispInfo.data.PIC[0].EMPTY_REAR_DATE,\r\n        empty_rear          : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.PIC[0].EMPTY_REAR}`,\r\n        empty_rear_gps_addr : dispInfo.data.PIC[0].EMPTY_REAR_GPS_ADDR,\r\n        \r\n        cargo_front_date    : dispInfo.data.PIC[0].CARGO_FRONT_DATE,\r\n        cargo_front         : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.PIC[0].CARGO_FRONT}`,\r\n        cargo_front_gps_addr: dispInfo.data.PIC[0].CARGO_FRONT_GPS_ADDR,\r\n        \r\n        cargo_rear_date     : dispInfo.data.PIC[0].CARGO_REAR_DATE,\r\n        cargo_rear          : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.PIC[0].CARGO_REAR}`,\r\n        cargo_rear_gps_addr : dispInfo.data.PIC[0].CARGO_REAR_GPS_ADDR\r\n      });\r\n    }\r\n    \r\n    gfc_hideMask();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager'>\r\n\r\n          \r\n          <div className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp'>\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '계근번호'\r\n                            },{\r\n                              code: '2',\r\n                              name: '차량번호'\r\n                            },{\r\n                              code: '3',\r\n                              name: '사전등급'\r\n                            },{\r\n                              code: '4',\r\n                              name: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       onKeyDown   = {(e) => {\r\n                        if(e.keyCode === 13){\r\n                          this.Retrieve()\r\n                        }\r\n                       }}\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                        />\r\n                <button>검색</button>\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        selectionChange={(e) => this.onSelectChange(e)}\r\n                        // dblclick={(e) => this.dblclick(e)}\r\n                        rowHeight={46}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        columns={[\r\n                          columnInput({\r\n                            name: 'scaleNumb',\r\n                            header: '계근번호',\r\n                            width : 110,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'carNumb',\r\n                            header: '차량번호',\r\n                            width : 90,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'itemGrade',\r\n                            header: '사전등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'date',\r\n                            header: '입차시간',\r\n                            width : 150,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnTextArea({\r\n                            name: 'vendor',\r\n                            header: 'Vendor',\r\n                            width : 160,\r\n                            height: 38,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnImage({\r\n                            name: 'rec',\r\n                            header: '녹화중',\r\n                            width: 85,\r\n                            imgItem:[\r\n                              {'code':'0', 'value': ''},\r\n                              {'code':'1', 'value': <GifPlayer height='30' width='70' gif={require('../../../Image/yk_rec01.gif').default} autoplay/>}\r\n                            ]\r\n                          })\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>잔여차량</span><Botspan reducer='INSP_PROC_MAIN' />\r\n              </div>\r\n            </div>\r\n            <div className='total_info'>\r\n              <ul>\r\n                <li><span className='title'>잔류 차량</span><Mainspan reducer='INSP_PROC_MAIN' flag={1} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'DAILY_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n\r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('DAILY_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'DAILY_PROC',\r\n                                        programNam: '검수일계표'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>전체 검수 차량</span><Mainspan reducer='INSP_PROC_MAIN' flag={2} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'DAILY_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n\r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('DAILY_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'DAILY_PROC',\r\n                                        programNam: '검수일계표'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>입고량(KG)</span><Mainspan reducer='INSP_PROC_MAIN' flag={3} /></li>\r\n              </ul>\r\n              <ul className='four'>\r\n                <li><span className='title'>검수대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={4} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'DISP_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n\r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('DISP_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'DISP_PROC',\r\n                                        programNam: '출차대기'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>출차대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={5} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'ENTR_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n                  \r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('ENTR_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'ENTR_PROC',\r\n                                        programNam: '입차대기'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>입차대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={6} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'ENTR_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n                  \r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('ENTR_WAIT');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'ENTR_WAIT',\r\n                                        programNam: '운송대기'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>운송대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={7} /></li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div className='car_info' id='car_info'>\r\n            <div className='title'><span>계근번호</span><Detailspan reducer='INSP_PROC_MAIN' flag={1} /></div>\r\n\r\n            <TabList pgm={this.props.pgm} id={this.props.id} reducer='INSP_PROC_MAIN'/>\r\n\r\n            <div className='tab_content' id='tabMain'>\r\n              <div className='input_list on' id={`content1_${this.props.pgm}`}>\r\n                <ul>\r\n                  <li>\r\n                    <h5>사전등급</h5>\r\n                      <Input pgm     = {this.props.pgm}\r\n                             id      = 'detail_pre_grade'\r\n                             width   = '100%'\r\n                             disabled\r\n                      />\r\n                  </li>\r\n                  <li>\r\n                    <h5>등급책정</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                                id      = 'detail_grade1'\r\n                                value   = 'itemCode'\r\n                                display = 'item'\r\n                                placeholder = '고철등급 검색'\r\n                                height  = {42}\r\n                                etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P005', {})}\r\n                                onChange = {async (e) => {\r\n                                  const combo = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n                                  combo.setValue(null);\r\n\r\n                                  if(e !== undefined && e.value !== ''){\r\n                                    await combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                                    combo.setDisabled(false);\r\n                                  }else{\r\n                                    combo.setDisabled(true);\r\n                                  }\r\n                                }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_grade2'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>감량중량</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_subt'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감량중량 검색(KG)'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P535', {})}\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_subt_leg');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value === '0'){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                await combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                                combo.setDisabled(false);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_subt_leg'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '감량사유 검색'\r\n                          etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P620', {})}\r\n                          isDisabled\r\n                    /> \r\n                  </li>\r\n                  <li>\r\n                    <h5>감가내역</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_depr'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감가내역 검색'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P130', {})}\r\n                            emptyRow\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_depr2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e !== undefined && e.value !== ''){\r\n                                combo.setDisabled(false);\r\n                              }else{\r\n                                combo.setDisabled(true);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm = {this.props.pgm}\r\n                          id      = 'detail_depr2'\r\n                          value   = 'code'\r\n                          display = 'name'\r\n                          placeholder = '감가비율'\r\n                          isDisabled\r\n                          data    = {[{\r\n                            'code': '10',\r\n                            'name': '10%'\r\n                          },{\r\n                            'code': '20',\r\n                            'name': '20%'\r\n                          },{\r\n                            'code': '30',\r\n                            'name': '30%'\r\n                          },{\r\n                            'code': '40',\r\n                            'name': '40%'\r\n                          },{\r\n                            'code': '50',\r\n                            'name': '50%'\r\n                          },{\r\n                            'code': '60',\r\n                            'name': '60%'\r\n                          },{\r\n                            'code': '70',\r\n                            'name': '70%'\r\n                          },{\r\n                            'code': '80',\r\n                            'name': '80%'\r\n                          },{\r\n                            'code': '90',\r\n                            'name': '90%'\r\n                          },{\r\n                            'code': '100',\r\n                            'name': '100%'\r\n                          }]}\r\n                          // emptyRow\r\n                    />\r\n                  </li>\r\n                  {/* <li>\r\n                    <h5>하차구역</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_out'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '하차구역 검색(SECTOR)'\r\n                          data    = ''\r\n                          onFocus = {ComboCreate => {\r\n                            YK_WEB_REQ('tally_process_pop.jsp?division=P530', {})\r\n                              .then(res => {\r\n                                ComboCreate({data   : res.data.dataSend,\r\n                                            value  : 'itemCode',\r\n                                            display: 'item'});\r\n                              })\r\n                          }}\r\n                  />\r\n                  </li> */}\r\n                  <li>\r\n                    <h5>차종구분</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_car'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '차종선택'\r\n                          etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P700', {})}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>반품구분</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '일부,전량 선택'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P110', {})}\r\n                            emptyRow\r\n                            onChange = {e => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_rtn2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value === ''){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                combo.setDisabled(false);\r\n                              }\r\n                              // combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                            }}\r\n                    />\r\n                  </div>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn2'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            etcData = {YK_WEB_REQ('tally_process_pop.jsp?division=P120', {})}\r\n                            isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>경고</h5>\r\n                    <Checkbox pgm   = {this.props.pgm}\r\n                              id    = 'detail_warning'\r\n                              width = '30px'\r\n                              height= '30px'\r\n\r\n                    />\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              \r\n              <Chit pgm={this.props.pgm} id={'chit_memo'} reducer='INSP_PROC_MAIN'/>\r\n              \r\n              <div className='input_list' id={`content3_${this.props.pgm}`}>\r\n                <DispInfo pgm={this.props.pgm} />\r\n              </div>\r\n\r\n              <div className='input_list' id={`content4_${this.props.pgm}`}>\r\n                <DispImg pgm={this.props.pgm} />\r\n              </div>\r\n            </div>\r\n            \r\n            <CompleteBtn pgm={this.props.pgm}/>\r\n          </div>\r\n\r\n          \r\n          <div className='cctv_viewer'>\r\n            <h4>실시간 CCTV</h4>\r\n            <div className='manual_record'>\r\n              <h5>수동녹화</h5>\r\n              <button \r\n                type='button' \r\n                className='record'\r\n                onClick={e => this.startRec()}\r\n              >녹화</button>\r\n              <button \r\n                type='button' \r\n                className='stop on'\r\n                onClick={e => this.stopRec()}\r\n              >정지</button>\r\n            </div>\r\n            <RainInfo />\r\n            <div className='cctv_list' \r\n            >\r\n              {this.state.device[0] !== undefined && \r\n                <RecImage \r\n                  seq={1}\r\n                  device={this.state.device[0].camera.Guid} \r\n                  Name={this.state.device[0].camera.Name}\r\n                  rtspAddr={this.state.device[0].rtspAddr}\r\n                  cameraPort={this.state.device[0].cameraPort}\r\n                  cameraNam={this.state.device[0].cameraNam}\r\n                  cam='STD_CAM_OPEN' \r\n                  focus='STD_CAM_FOCUS' \r\n                  rec='STD_CAM_REC' \r\n                  image='STD_CAM_IMG'/> \r\n              }\r\n              {this.state.device[1] !== undefined && \r\n                <RecImage\r\n                  seq={2} \r\n                  device={this.state.device[1].camera.Guid} \r\n                  Name={this.state.device[1].camera.Name}\r\n                  rtspAddr={this.state.device[1].rtspAddr}\r\n                  cameraPort={this.state.device[1].cameraPort}\r\n                  cameraNam={this.state.device[1].cameraNam}\r\n                  cam='DUM_CAM_OPEN' \r\n                  focus='DUM_CAM_FOCUS' \r\n                  rec='DUM_CAM_REC' \r\n                  image='DUM_CAM_IMG'/> \r\n              }\r\n            </div>\r\n            <div className='cctv_other_list'>\r\n              <ul>\r\n                <li>\r\n                  {this.state.device[2] !== undefined && \r\n                    <RecImage\r\n                      seq={3} \r\n                      device={this.state.device[2].camera.Guid} \r\n                      Name={this.state.device[2].camera.Name}\r\n                      rtspAddr={this.state.device[2].rtspAddr}\r\n                      cameraPort={this.state.device[2].cameraPort}\r\n                      cameraNam={this.state.device[2].cameraNam}\r\n                      cam='ETC1_CAM_OPEN' \r\n                      focus='ETC1_CAM_FOCUS' \r\n                      rec='ETC1_CAM_REC' \r\n                      image='ETC1_CAM_IMG'/> \r\n                  }\r\n                </li>\r\n                <li>\r\n                  {this.state.device[3] !== undefined && \r\n                    <RecImage\r\n                      seq={4} \r\n                      device={this.state.device[3].camera.Guid} \r\n                      Name={this.state.device[3].camera.Name}\r\n                      rtspAddr={this.state.device[3].rtspAddr}\r\n                      cameraPort={this.state.device[3].cameraPort}\r\n                      cameraNam={this.state.device[3].cameraNam}\r\n                      cam='ETC2_CAM_OPEN' \r\n                      focus='ETC2_CAM_FOCUS' \r\n                      rec='ETC2_CAM_REC' \r\n                      image='ETC2_CAM_IMG'/> \r\n                  }\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default INSP_PROC;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\INSP_PROC copy 3.js",["748","749","750","751","752"],"//#region import\r\nimport React, { Component } from 'react';\r\nimport Input from '../../../Component/Control/Input';\r\nimport Checkbox from '../../../Component/Control/Checkbox';\r\n\r\nimport { gfc_initPgm, gfc_sleep, gfc_showMask, gfc_yk_call_sp, gfc_hideMask, gfc_chit_yn_YK, gfc_ftp_file_yn_YK } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue, gfs_injectAsyncReducer, gfs_dispatch, gfs_subscribe, gfs_PGM_REDUCER } from '../../../Method/Store';\r\nimport { gfo_getCombo, gfo_getInput, gfo_getCheckbox } from '../../../Method/Component';\r\nimport { gfg_appendRow, gfg_getGrid, gfg_setSelectRow } from '../../../Method/Grid';\r\nimport { getDynamicSql_Oracle, getSp_Oracle } from '../../../db/Oracle/Oracle';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport Layout from '../../../Component/Layout/Layout';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Image as columnImage } from '../../../Component/Grid/Column/Image';\r\nimport { TextArea as columnTextArea } from '../../../Component/Grid/Column/TextArea';\r\nimport { DateTime as columnDateTime } from '../../../Component/Grid/Column/DateTime';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\nimport Mainspan from '../Common/Mainspan';\r\nimport Detailspan from '../Common/Detailspan';\r\nimport Botspan from '../Common/Botspan';\r\nimport Chit from '../Common/Chit/Chit';\r\nimport CompleteBtn from './CompleteBtn';\r\nimport TabList from '../Common/TabList';\r\nimport DispInfo from './DispInfo';\r\nimport DispImg from './DispImg';\r\nimport RecImage from './RecImage';\r\nimport RainInfo from './RainInfo';\r\n\r\nimport GifPlayer from 'react-gif-player';\r\n\r\nimport { ReRec, RecodingList } from '../../../WebReq/WebReq';\r\nimport { TOKEN, MILESTONE } from '../../../WebReq/WebReq';\r\nimport { throttle } from 'lodash';\r\nimport { setSessionCookie } from '../../../Cookies';\r\nimport { getDynamicSql_Mysql } from '../../../db/Mysql/Mysql';\r\n//#endregion\r\n\r\nclass INSP_PROC extends Component {\r\n\r\n  state = {\r\n    wait_list: [],\r\n    device: []\r\n  }\r\n\r\n  milestoneInfo = async() => {\r\n\r\n    // 선택된 공정의 카메라를 찾아서 스트리밍 받는다\r\n    // 지금은 하드코딩 되어있지만 나중엔 로컬스토리지와 콤보박스를 써서 선택된 공정의 아이피를 가지고 카메라를 가져온다.\r\n    // 1. 선택된 공정의 카메라 정보를 가지고온다.\r\n    // const milestone = TOKEN({reqAddr: 'LOGIN', MilestoneIP: gfs_getStoreValue('CAMERA_REDUCER', 'MilestoneIP')});\r\n    const milestone = await TOKEN({});\r\n    this.token  = milestone.data.TOKEN;\r\n    this.device = milestone.data.DEVICE;\r\n    if(this.token === ''){\r\n      alert('마일스톤 서버에 접속할 수 없습니다.'); \r\n    }else if(this.device === ''){\r\n      alert('마일스톤 서버에 접속할 수 없습니다.');\r\n    }else{\r\n      const areaTp = gfs_getStoreValue('USER_REDUCER', 'AREA_TP');\r\n      const select = await this.callOracle('Common/Common', 'ZM_IMS_CAMERA_SELECT_EACH', [{AREA_TP:areaTp}]);\r\n      if(select.data === undefined){\r\n        alert('설정된 카메라가 없습니다.');\r\n        return;\r\n      }\r\n\r\n      if(select.data.rows.length === 0){\r\n        alert('설정된 카메라가 없습니다.');\r\n        return;\r\n      }\r\n      let data = [];\r\n      for(let i = 0; i < select.data.rows.length; i++){\r\n  \r\n        let col = {};\r\n        for(let j = 0; j < select.data.rows[i].length; j++){\r\n          col[select.data.metaData[j].name] = select.data.rows[i][j];\r\n        }\r\n        data.push(col);\r\n      }\r\n\r\n      let ipArr = [];\r\n      let cameraPort = [];\r\n      let cameraNam = [];\r\n      let rtspAddr = [];\r\n\r\n      for(let i = 0; i < data.length; i++){\r\n        ipArr.push(data[i].CAMERA_IP);\r\n        cameraPort.push(data[i].CAMERA_PORT);\r\n        cameraNam.push(data[i].CAMERA_NAM);\r\n        rtspAddr.push(data[i].RTSP_ADDR);\r\n      }\r\n\r\n      // let ipArr = ['10.10.136.112', '10.10.136.128'];\r\n      // let rtspUrl = ['rtsp://admin:admin13579@10.10.136.112:554/profile2/media.smp', 'rtsp://admin:pass@10.10.136.128:554/video1'];\r\n      // let rtspPort = [3100, 3101];\r\n      this.infoArr = [];\r\n\r\n      for(let i = 0; i < ipArr.length; i++){\r\n        const camera = this.device.find(e1 => e1.Name.indexOf(ipArr[i]) >= 0);\r\n        if(camera){\r\n          this.infoArr.push({\r\n            camera, \r\n            ipArr: ipArr[i], \r\n            cameraPort: cameraPort[i], \r\n            cameraNam: cameraNam[i], \r\n            rtspAddr: rtspAddr[i]\r\n          }); \r\n        }\r\n      }\r\n\r\n      if(this.infoArr.length > 0){\r\n        // this.setState(this.state.device = this.infoArr);\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DEVICE', {DEVICE: this.infoArr});\r\n      }\r\n    }\r\n  }\r\n\r\n  //#region onActivePage 스토어 subscribe로 실행됨.\r\n  onActivePage = () => {\r\n    const activeWindow = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'activeWindow');\r\n    if(activeWindow.programId === 'INSP_PROC'){\r\n      window.onkeydown = e => this.onKeyDown(e);\r\n      window.onmousewheel = e => this.onMouseWheel(e);\r\n    }\r\n  }\r\n\r\n  onCameraChange = () => {\r\n    const cameraDevice = gfs_getStoreValue('INSP_PROC_MAIN', 'DEVICE');\r\n    if(cameraDevice !== undefined){\r\n      if(cameraDevice === 0) return;\r\n\r\n      if(JSON.stringify(cameraDevice) !== JSON.stringify(this.state.device)){\r\n        this.setState({\r\n          device: cameraDevice\r\n        });\r\n      }\r\n    } \r\n  }\r\n  //#endregion\r\n\r\n  //#region PTZ\r\n  debounceKeyDown = throttle((e, device) => {\r\n    let ptz = '';\r\n    if(e.keyCode === 37) ptz = 'left';\r\n    else if(e.keyCode === 38) ptz = 'up';\r\n    else if(e.keyCode === 39) ptz = 'right';\r\n    else if(e.keyCode === 40) ptz = 'down';\r\n\r\n    if(ptz !== ''){\r\n      MILESTONE({reqAddr: 'PTZ',\r\n      device: device.Guid,\r\n      ptz})\r\n    }\r\n  }, 1000);\r\n\r\n  // debounceMouseWheel = throttle((e, device) => {\r\n  //   let ptz = '';\r\n  //   if(e.deltaX === -0){\r\n  //     if (e.wheelDelta > 0){\r\n  //       ptz = 'zoomin';\r\n  //     }else{\r\n  //       ptz = 'zoomout';\r\n  //     }\r\n  //   }\r\n\r\n  //   if(ptz !== ''){\r\n  //     MILESTONE({reqAddr: 'PTZ',\r\n  //     device: device.Guid,\r\n  //     ptz})\r\n  //   }\r\n  // }, 1000);\r\n\r\n\r\n  // debounceKeyDown = (e, device) => {\r\n  //   let ptz = '';\r\n  //   if(e.keyCode === 37) ptz = 'left';\r\n  //   else if(e.keyCode === 38) ptz = 'up';\r\n  //   else if(e.keyCode === 39) ptz = 'right';\r\n  //   else if(e.keyCode === 40) ptz = 'down';\r\n\r\n  //   if(ptz !== ''){\r\n  //     MILESTONE({reqAddr: 'PTZ',\r\n  //     device: device.Guid,\r\n  //     ptz})\r\n  //   }\r\n  // };\r\n\r\n  debounceMouseWheel = (e, device) => {\r\n    let ptz = '';\r\n    if(e.deltaX === -0){\r\n      if (e.wheelDelta > 0){\r\n        ptz = 'zoomin';\r\n      }else{\r\n        ptz = 'zoomout';\r\n      }\r\n    }\r\n\r\n    if(ptz !== ''){\r\n      MILESTONE({reqAddr: 'PTZ',\r\n      device: device.Guid,\r\n      ptz})\r\n    }\r\n  };\r\n\r\n  onKeyDown = (e) => {\r\n    e.stopPropagation();\r\n\r\n    const STD_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'STD_CAM_FOCUS');\r\n    const DUM_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'DUM_CAM_FOCUS');\r\n    \r\n    if(STD_CAM_FOCUS || DUM_CAM_FOCUS){\r\n      this.debounceKeyDown(e, STD_CAM_FOCUS ? this.infoArr[0].camera : this.infoArr[1].camera);\r\n    }\r\n  }\r\n\r\n  onMouseWheel = (e) => {\r\n    e.stopPropagation();\r\n\r\n    const STD_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'STD_CAM_FOCUS');\r\n    const DUM_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'DUM_CAM_FOCUS');\r\n\r\n    if(STD_CAM_FOCUS || DUM_CAM_FOCUS){\r\n      this.debounceMouseWheel(e, STD_CAM_FOCUS ? this.infoArr[0].camera : this.infoArr[1].camera);\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region 녹화제어\r\n  startRec = async () => {\r\n    \r\n    const scaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n    const camera_no = gfs_getStoreValue('USER_REDUCER', 'CAMERA_NO');\r\n    if(scaleNumb === ''){\r\n      alert('선택된 계근번호가 없습니다.');\r\n      return;\r\n    }\r\n    if(camera_no === '' || camera_no === null){\r\n      alert('설정된 차량인식 카메라가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    //기존저장된 파일있는지 확인.\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_REC(\r\n                  :p_RowStatus,\r\n                  :p_scaleNumb,\r\n                  :p_seq,\r\n                  :p_cameraNo,\r\n                  :p_cameraDevice,\r\n                  :p_cameraName,\r\n                  :p_UserId,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_RowStatus    : 'R2',\r\n        p_scaleNumb    : scaleNumb,\r\n        p_seq          : 0,\r\n        p_cameraNo     : '',\r\n        p_cameraDevice : '',\r\n        p_cameraName   : '',\r\n        p_UserId       : ''\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS === 'N'){\r\n      if(result.data.MSG_CODE === '1'){\r\n        if(window.confirm(result.data.MSG_TEXT) === true){\r\n          const recYn = await ReRec(scaleNumb);\r\n          //0. 파일명은 변경된 상태\r\n          if(recYn.data.Response === 'OK'){\r\n            //1. DB에 녹화시작으로 저장\r\n            let param = [];\r\n            param.push({\r\n              sp   : `begin \r\n                        SP_ZM_IMS_REC(\r\n                          :p_RowStatus,\r\n                          :p_scaleNumb,\r\n                          :p_seq,\r\n                          :p_cameraNo,\r\n                          :p_cameraDevice,\r\n                          :p_cameraName,\r\n                          :p_UserId,\r\n                          \r\n                          :p_select,\r\n                          :p_SUCCESS,\r\n                          :p_MSG_CODE,\r\n                          :p_MSG_TEXT,\r\n                          :p_COL_NAM\r\n                        );\r\n                      end;\r\n                      `,\r\n              data : {\r\n                p_RowStatus    : 'I2',\r\n                p_scaleNumb    : scaleNumb,\r\n                p_seq          : 0,\r\n                p_cameraNo     : camera_no,\r\n                p_cameraDevice : '',\r\n                p_cameraName   : '',\r\n                p_UserId       : ''\r\n              },\r\n              errSeq: 0\r\n            })\r\n            \r\n            const result = await getSp_Oracle(param);\r\n\r\n            if(result.data.SUCCESS === 'N'){\r\n              alert('수동녹화 시작에 실패했습니다.');\r\n            }\r\n          }\r\n        }else{\r\n          return;\r\n        }\r\n      }else{\r\n        if(window.confirm(result.data.MSG_TEXT) === true){\r\n          //1. DB에 녹화시작으로 저장\r\n          let param = [];\r\n          param.push({\r\n            sp   : `begin \r\n                      SP_ZM_IMS_REC(\r\n                        :p_RowStatus,\r\n                        :p_scaleNumb,\r\n                        :p_seq,\r\n                        :p_cameraNo,\r\n                        :p_cameraDevice,\r\n                        :p_cameraName,\r\n                        :p_UserId,\r\n                        \r\n                        :p_select,\r\n                        :p_SUCCESS,\r\n                        :p_MSG_CODE,\r\n                        :p_MSG_TEXT,\r\n                        :p_COL_NAM\r\n                      );\r\n                    end;\r\n                    `,\r\n            data : {\r\n              p_RowStatus    : 'I3',\r\n              p_scaleNumb    : scaleNumb,\r\n              p_seq          : 0,\r\n              p_cameraNo     : camera_no,\r\n              p_cameraDevice : '',\r\n              p_cameraName   : '',\r\n              p_UserId       : ''\r\n            },\r\n            errSeq: 0\r\n          })\r\n          \r\n          const result = await getSp_Oracle(param);\r\n\r\n          if(result.data.SUCCESS === 'N'){\r\n            alert('수동녹화 시작에 실패했습니다.');\r\n          }\r\n        }else{\r\n          return;\r\n        }\r\n      }\r\n    }else{\r\n        //1. DB에 녹화시작으로 저장\r\n        let param = [];\r\n        param.push({\r\n          sp   : `begin \r\n                    SP_ZM_IMS_REC(\r\n                      :p_RowStatus,\r\n                      :p_scaleNumb,\r\n                      :p_seq,\r\n                      :p_cameraNo,\r\n                      :p_cameraDevice,\r\n                      :p_cameraName,\r\n                      :p_UserId,\r\n                      \r\n                      :p_select,\r\n                      :p_SUCCESS,\r\n                      :p_MSG_CODE,\r\n                      :p_MSG_TEXT,\r\n                      :p_COL_NAM\r\n                    );\r\n                  end;\r\n                  `,\r\n          data : {\r\n            p_RowStatus    : 'I2',\r\n            p_scaleNumb    : scaleNumb,\r\n            p_seq          : 0,\r\n            p_cameraNo     : camera_no,\r\n            p_cameraDevice : '',\r\n            p_cameraName   : '',\r\n            p_UserId       : ''\r\n          },\r\n          errSeq: 0\r\n        })\r\n        \r\n        const result = await getSp_Oracle(param);\r\n\r\n        if(result.data.SUCCESS === 'N'){\r\n          alert('수동녹화 시작에 실패했습니다.');\r\n        }\r\n    }\r\n  }\r\n\r\n  stopRec = async () => {\r\n    const scaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n    const camera_no = gfs_getStoreValue('USER_REDUCER', 'CAMERA_NO');\r\n    if(scaleNumb === ''){\r\n      alert('선택된 계근번호가 없습니다.');\r\n      return;\r\n    }\r\n    if(camera_no === '' || camera_no === null){\r\n      alert('설정된 차량인식 카메라가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    //기존저장된 파일있는지 확인.\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_REC(\r\n                  :p_RowStatus,\r\n                  :p_scaleNumb,\r\n                  :p_seq,\r\n                  :p_cameraNo,\r\n                  :p_cameraDevice,\r\n                  :p_cameraName,\r\n                  :p_UserId,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_RowStatus    : 'R4',\r\n        p_scaleNumb    : scaleNumb,\r\n        p_seq          : 0,\r\n        p_cameraNo     : '',\r\n        p_cameraDevice : '',\r\n        p_cameraName   : '',\r\n        p_UserId       : ''\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS === 'N'){\r\n      alert('녹화중인 계량번호가 아닙니다.');\r\n      return;\r\n    }else{\r\n\r\n      let param = [];\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_REC(\r\n                    :p_RowStatus,\r\n                    :p_scaleNumb,\r\n                    :p_seq,\r\n                    :p_cameraNo,\r\n                    :p_cameraDevice,\r\n                    :p_cameraName,\r\n                    :p_UserId,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_RowStatus    : 'D3',\r\n          p_scaleNumb    : scaleNumb,\r\n          p_seq          : 0,\r\n          p_cameraNo     : '',\r\n          p_cameraDevice : '',\r\n          p_cameraName   : '',\r\n          p_UserId       : ''\r\n        },\r\n        errSeq: 0\r\n      })\r\n      \r\n      const result = await getSp_Oracle(param);\r\n\r\n      if(result.data.SUCCESS === 'N'){\r\n        alert('수동녹화 중지에 실패했습니다.');\r\n      }\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this);\r\n\r\n    //#region 리듀서\r\n    const INSP_PROC_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'INSP_PROC_MAIN') {\r\n        return {\r\n          ON_ACTIVE    : nowState === undefined ? {\r\n            active : true,\r\n            time   : new Date() \r\n          } : nowState.ON_ACTIVE,\r\n\r\n          DEVICE       : nowState === undefined ? 0 : nowState.DEVICE,\r\n\r\n          RAIN_INFO    : nowState === undefined ? 0 : nowState.RAIN_INFO,\r\n\r\n          MAIN_WAIT    : nowState === undefined ? 0 : nowState.MAIN_WAIT,\r\n          MAIN_TOTAL   : nowState === undefined ? 0 : nowState.MAIN_TOTAL,\r\n          MAIN_WEIGHT  : nowState === undefined ? 0 : nowState.MAIN_WEIGHT,\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n          PROC_WAIT    : nowState === undefined ? 0 : nowState.PROC_WAIT,\r\n          DEPT_WAIT    : nowState === undefined ? 0 : nowState.DEPT_WAIT,\r\n          ENTR_WAIT    : nowState === undefined ? 0 : nowState.ENTR_WAIT,\r\n          DRIV_WAIT    : nowState === undefined ? 0 : nowState.DRIV_WAIT,\r\n          \r\n          DETAIL_SCALE : nowState === undefined ? '' : nowState.DETAIL_SCALE,\r\n          DETAIL_CARNO : nowState === undefined ? '' : nowState.DETAIL_CARNO,\r\n          DETAIL_WEIGHT: nowState === undefined ? '' : nowState.DETAIL_WEIGHT,\r\n          DETAIL_DATE  : nowState === undefined ? '' : nowState.DETAIL_DATE,\r\n\r\n          STD_CAM_IMG  : nowState === undefined ? null : nowState.STD_CAM_IMG,\r\n          DUM_CAM_IMG  : nowState === undefined ? null : nowState.DUM_CAM_IMG,\r\n          ETC1_CAM_IMG : nowState === undefined ? false : nowState.ETC1_CAM_IMG,\r\n          ETC2_CAM_IMG : nowState === undefined ? false : nowState.ETC2_CAM_IMG,\r\n\r\n          STD_CAM_OPEN : nowState === undefined ? false : nowState.STD_CAM_OPEN,\r\n          DUM_CAM_OPEN : nowState === undefined ? false : nowState.DUM_CAM_OPEN,\r\n          ETC1_CAM_OPEN : nowState === undefined ? false : nowState.ETC1_CAM_OPEN,\r\n          ETC2_CAM_OPEN : nowState === undefined ? false : nowState.ETC2_CAM_OPEN,\r\n\r\n          STD_CAM_FOCUS: nowState === undefined ? false : nowState.STD_CAM_FOCUS,\r\n          DUM_CAM_FOCUS: nowState === undefined ? false : nowState.DUM_CAM_FOCUS,\r\n          ETC1_CAM_FOCUS : nowState === undefined ? false : nowState.ETC1_CAM_FOCUS,\r\n          ETC2_CAM_FOCUS : nowState === undefined ? false : nowState.ETC2_CAM_FOCUS,\r\n\r\n          STD_CAM_REC  : nowState === undefined ? {\r\n            rec     : false,\r\n            time    : '00:00'\r\n          } : nowState.STD_CAM_REC,\r\n\r\n          DUM_CAM_REC  : nowState === undefined ? {\r\n            rec     : false,\r\n            time    : '00:00'\r\n          } : nowState.DUM_CAM_REC,\r\n\r\n          CHIT_MEMO    : nowState === undefined ? '' : nowState.CHIT_MEMO,\r\n          \r\n          CHIT_INFO    : nowState === undefined ? {\r\n            date     : '',\r\n            scaleNumb: '',\r\n            carNumb  : '',\r\n            vender   : '',\r\n            itemFlag : '',\r\n            Wgt      : '',\r\n            loc      : '',\r\n            user     : '',\r\n            chit     : 'N'\r\n          } : nowState.CHIT_INFO,\r\n          \r\n          DISP_INFO    : nowState === undefined ? {\r\n            scaleNumb       : '',\r\n            scrp_ord_no     : '',\r\n            scrp_grd_nm     : '',\r\n            real_vender_name: '',\r\n            load_area_nm    : '',\r\n            load_area_addr  : ''\r\n          } : nowState.DISP_INFO,\r\n\r\n          DISP_PIC    : nowState === undefined ? {\r\n            scaleNumb           : '',\r\n            scrp_ord_no         : '',\r\n            empty_front_date    : '',\r\n            empty_front         : '',\r\n            empty_front_gps_addr: '',\r\n            empty_rear_date     : '',\r\n            empty_rear          : '',\r\n            empty_rear_gps_addr : '',\r\n            cargo_front_date    : '',\r\n            cargo_front         : '',\r\n            cargo_front_gps_addr: '',\r\n            cargo_rear_date     : '',\r\n            cargo_rear          : '',\r\n            cargo_rear_gps_addr : ''\r\n          } : nowState.DISP_PIC\r\n        };\r\n      }\r\n\r\n      if(action.type === 'DEVICE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEVICE : action.DEVICE\r\n        })\r\n      }else if(action.type === 'RAIN_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          RAIN_INFO : action.RAIN_INFO\r\n        })\r\n      }else if(action.type === 'MAIN_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WAIT : action.MAIN_WAIT\r\n        })\r\n      }else if(action.type === 'DRIV_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DRIV_WAIT : action.DRIV_WAIT\r\n        })\r\n      }else if(action.type === 'MAIN_TOTAL'){\r\n        \r\n        return Object.assign({}, nowState, {\r\n          MAIN_TOTAL : action.MAIN_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WEIGHT : action.MAIN_WEIGHT\r\n        })\r\n      }else if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }else if(action.type === 'PROC_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          PROC_WAIT : action.PROC_WAIT\r\n        })\r\n      }else if(action.type === 'DEPT_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEPT_WAIT : action.DEPT_WAIT\r\n        })\r\n      }else if(action.type === 'ENTR_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ENTR_WAIT : action.ENTR_WAIT\r\n        })\r\n      }else if(action.type === 'DETAIL_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_SCALE : action.DETAIL_SCALE\r\n        })\r\n      }else if(action.type === 'DETAIL_CARNO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_CARNO : action.DETAIL_CARNO\r\n        })\r\n      }else if(action.type === 'DETAIL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_WEIGHT : action.DETAIL_WEIGHT\r\n        })\r\n      }else if(action.type === 'DETAIL_DATE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_DATE : action.DETAIL_DATE\r\n        })\r\n      }else if(action.type === 'STD_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_IMG : action.STD_CAM_IMG\r\n        })\r\n      }else if(action.type === 'DUM_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_IMG : action.DUM_CAM_IMG\r\n        })\r\n      }else if(action.type === 'ETC1_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC1_CAM_IMG : action.ETC1_CAM_IMG\r\n        })\r\n      }else if(action.type === 'ETC2_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC2_CAM_IMG : action.ETC2_CAM_IMG\r\n        })\r\n      }else if(action.type === 'STD_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_OPEN : action.STD_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'DUM_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_OPEN : action.DUM_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'ETC1_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC1_CAM_OPEN : action.ETC1_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'ETC2_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC2_CAM_OPEN : action.ETC2_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'STD_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_FOCUS : action.STD_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'DUM_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_FOCUS : action.DUM_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'ETC1_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC1_CAM_FOCUS : action.ETC1_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'ETC2_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC2_CAM_FOCUS : action.ETC2_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.STD_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.DUM_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec     : nowState.STD_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec     : nowState.DUM_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }\r\n      // else if(action.type === 'CHIT_INFO_ITEM_FLAG'){\r\n\r\n      //   return Object.assign({}, nowState, {\r\n      //     CHIT_INFO : {\r\n      //       date     :  nowState.CHIT_INFO.date,\r\n      //       scaleNumb:  nowState.CHIT_INFO.scaleNumb,\r\n      //       carNumb  :  nowState.CHIT_INFO.carNumb,\r\n      //       vender   :  nowState.CHIT_INFO.vender,\r\n      //       itemFlag :  action.itemFlag,\r\n      //       Wgt      :  nowState.CHIT_INFO.Wgt,\r\n      //       loc      :  nowState.CHIT_INFO.loc,\r\n      //       user     :  nowState.CHIT_INFO.user,\r\n      //       chit     :  nowState.CHIT_INFO.chit\r\n      //     }\r\n      //   })\r\n      // }\r\n      else if(action.type === 'CHIT_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     : action.date,\r\n            scaleNumb: action.scaleNumb,\r\n            carNumb  : action.carNumb,\r\n            vender   : action.vender,\r\n            itemFlag : action.itemFlag,\r\n            Wgt      : action.Wgt,\r\n            loc      : action.loc,\r\n            user     : action.user,\r\n            chit     : action.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_MEMO'){\r\n        return Object.assign({}, nowState, {\r\n          CHIT_MEMO : action.CHIT_MEMO\r\n        })\r\n      }else if(action.type === 'DISP_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DISP_INFO : {\r\n            scaleNumb       : action.scaleNumb,\r\n            scrp_ord_no     : action.scrp_ord_no,\r\n            scrp_grd_nm     : action.scrp_grd_nm,\r\n            real_vender_name: action.real_vender_name,\r\n            load_area_nm    : action.load_area_nm,\r\n            load_area_addr  : action.load_area_addr  \r\n          }\r\n        })\r\n      }else if(action.type === 'DISP_PIC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DISP_PIC : {\r\n            scaleNumb           : action.scaleNumb,\r\n            scrp_ord_no         : action.scrp_ord_no,\r\n            empty_front_date    : action.empty_front_date,\r\n            empty_front         : action.empty_front,\r\n            empty_front_gps_addr: action.empty_front_gps_addr,\r\n            empty_rear_date     : action.empty_rear_date,\r\n            empty_rear          : action.empty_rear,\r\n            empty_rear_gps_addr : action.empty_rear_gps_addr,\r\n            cargo_front_date    : action.cargo_front_date,\r\n            cargo_front         : action.cargo_front,\r\n            cargo_front_gps_addr: action.cargo_front_gps_addr,\r\n            cargo_rear_date     : action.cargo_rear_date,\r\n            cargo_rear          : action.cargo_rear,\r\n            cargo_rear_gps_addr : action.cargo_rear_gps_addr \r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('INSP_PROC_MAIN', INSP_PROC_MAIN);\r\n    gfs_subscribe(this.onActivePage);\r\n    gfs_subscribe(this.onCameraChange);\r\n    //#endregion\r\n  }\r\n\r\n  callOracle = async(file, fn, param) => {\r\n    let result = await getDynamicSql_Oracle(\r\n      file,\r\n      fn,\r\n      param\r\n    ); \r\n\r\n    return result;\r\n  }\r\n\r\n  Init = async() => {\r\n    await this.milestoneInfo();\r\n  }\r\n\r\n  //#region 개별조회\r\n  mainHeader = async() => {\r\n  \r\n    // const select = await gfc_yk_call_sp('sp_zm_mstr_header');\r\n    const select = await gfc_yk_call_sp('sp_zm_mstr_header_test');\r\n    const R_CARSU = select.data.ROWS[0].R_CARSU === null ? 0 : select.data.ROWS[0].R_CARSU;\r\n    const E_CARSU = select.data.ROWS[0].E_CARSU === null ? 0 : select.data.ROWS[0].E_CARSU;\r\n    const E_KG = select.data.ROWS[0].E_KG === null ? 0 : select.data.ROWS[0].E_KG;\r\n\r\n    if(select.data.SUCCESS === 'Y'){\r\n      if(R_CARSU !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WAIT', {MAIN_WAIT: R_CARSU});\r\n\r\n      if(E_CARSU !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_TOTAL'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_TOTAL', {MAIN_TOTAL: E_CARSU});\r\n\r\n      if(E_KG !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WEIGHT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WEIGHT', {MAIN_WEIGHT: E_KG});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WAIT', {MAIN_WAIT: 0});\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_TOTAL') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_TOTAL', {MAIN_TOTAL: 0});\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WEIGHT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WEIGHT', {MAIN_WEIGHT: 0});\r\n    }\r\n  }\r\n\r\n  mainHeader2 = async() => {\r\n    //출차대기\r\n    // const select = await gfc_yk_call_sp('sp_zm_mstr_pass');\r\n    const select = await gfc_yk_call_sp('sp_zm_mstr_pass_test');\r\n\r\n    if(select.data.SUCCESS === 'Y'){\r\n      if(select.data.ROWS.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'DEPT_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DEPT_WAIT', {DEPT_WAIT: select.data.ROWS.length});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'DEPT_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DEPT_WAIT', {DEPT_WAIT: 0});\r\n    }\r\n\r\n    //입차대기\r\n    // const select2 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE');\r\n    const select2 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE_TEST');\r\n\r\n    if(select2.data.SUCCESS === 'Y'){\r\n      if(select2.data.ROWS.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'ENTR_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'ENTR_WAIT', {ENTR_WAIT: select2.data.ROWS.length});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'ENTR_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'ENTR_WAIT', {ENTR_WAIT: 0});\r\n    }\r\n\r\n    // //운송대기\r\n    // const select3 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE_WAIT');\r\n    const select3 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE_WAIT_TEST');\r\n\r\n    if(select3.data.SUCCESS === 'Y'){\r\n      if(select3.data.ROWS.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'DRIV_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DRIV_WAIT', {DRIV_WAIT: select3.data.ROWS.length});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'DRIV_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DRIV_WAIT', {DRIV_WAIT: 0});\r\n    }\r\n  }\r\n\r\n  mainGrid = async() => {\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n\r\n    // const select = await gfc_yk_call_sp('SP_ZM_MSTR_WAIT');\r\n    const select = await gfc_yk_call_sp('SP_ZM_MSTR_WAIT_TEST');\r\n    if(select.data.SUCCESS === 'Y'){\r\n      const main = select.data.ROWS;\r\n        \r\n      if(main.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'PROC_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'PROC_WAIT', {PROC_WAIT: main.length});\r\n\r\n      const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n      const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n  \r\n      const dataMod = [];\r\n      main.forEach(e => {\r\n        dataMod.push({\r\n          scaleNumb: e['DELIVERY_ID'].toString(),\r\n          carNumb: e['VEHICLE_NO'],\r\n          itemGrade: e['ITEM_GRADE'],\r\n          date: e['CREATION_DATE'],\r\n          vendor: e['VENDOR_NAME']\r\n        })\r\n      })\r\n\r\n      let data = dataMod.filter(e => {\r\n        if(search_tp !== null && search_tp !== ''){\r\n          //계근번호\r\n          if(search_tp === '1'){\r\n            if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          //차량번호\r\n          else if(search_tp === '2'){\r\n            if(e.carNumb.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          //사전등급\r\n          else if(search_tp === '3'){\r\n            if(e.itemGrade.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          //업체\r\n          else if(search_tp === '4'){\r\n            if(e.vendor.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          \r\n        }else{\r\n          return true;\r\n        }\r\n      })\r\n\r\n      if(data.length > 0){\r\n        \r\n        //기존 그리드에서 scaleNumb기준으로 데이터가 없으면 추가한다.\r\n        for(let i = 0; i < data.length; i++){\r\n          const scaleNumb = data[i].scaleNumb;\r\n\r\n          const oldData = grid.getData().find(e => e.scaleNumb === scaleNumb);\r\n          if(!oldData){\r\n            gfg_appendRow(grid, grid.getRowCount(), {\r\n              scaleNumb,\r\n              carNumb: data[i].carNumb,\r\n              itemGrade: data[i].itemGrade,\r\n              date: data[i].date,\r\n              vendor: data[i].vendor,\r\n              rec: '0'\r\n            }, 'scaleNumb', false);\r\n            grid.resetOriginData();\r\n          }\r\n        }\r\n\r\n        //새로운 정보 기준으로 데이터가 지워졌으면 삭제한다.\r\n        for(let i = 0; i < grid.getData().length; i++){\r\n          const scaleNumb =  grid.getData()[i].scaleNumb;\r\n\r\n          const newData = data.find(e => e.scaleNumb === scaleNumb)\r\n          if(!newData){\r\n            grid.removeRow(i);\r\n\r\n            //지워진 데이터가 기존에 선택된 데이터 이면 초기화 한다.\r\n            const selectScaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n            if(scaleNumb === selectScaleNumb){\r\n              gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n              gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n              gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: '0'});\r\n              gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n            }\r\n          }\r\n        }\r\n\r\n        RecodingList().then(recScaleNumb => {\r\n          for(let i = 0; i < recScaleNumb.data.Response.length; i++){\r\n\r\n            const data = grid.getData().find(e => e.scaleNumb === recScaleNumb.data.Response[i])\r\n            if(data){\r\n              //녹화 on만 설정\r\n              grid.setValue(data.rowKey, 'rec', '1');\r\n            }\r\n          }\r\n\r\n          const recGrid = grid.getData().filter(e => e.rec === '1');\r\n          for(let i = 0; i < recGrid.length; i++){\r\n            const data = recScaleNumb.data.Response.find(e => e === recGrid[i].scaleNumb);\r\n            if(!data){\r\n              //녹화 off만 설정\r\n              grid.setValue(recGrid[i].rowKey, 'rec', '0');\r\n            }\r\n          }\r\n        })\r\n  \r\n        if(data.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'BOT_TOTAL'))\r\n          gfs_dispatch('INSP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n      }\r\n    }else{\r\n      grid.clear();\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'BOT_TOTAL') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n    }\r\n\r\n    await this.mainHeader();\r\n    await this.mainHeader2();\r\n  }\r\n  //#endregion\r\n\r\n  componentDidMount(){\r\n    this.Init();\r\n    // this.Retrieve();\r\n\r\n    // this.mainHeaderInterval = setInterval(e => {\r\n    //   this.mainHeader();\r\n    // }, 2000)\r\n\r\n    // this.mainHeaderInterval2 = setInterval(e => {\r\n    //   this.mainHeader2();\r\n    // }, 5000)\r\n\r\n    this.mainGridInterval = setInterval(e => {\r\n      this.mainGrid();\r\n    }, 2000)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    // clearInterval(this.mainHeaderInterval);\r\n    // clearInterval(this.mainHeaderInterval2);\r\n    clearInterval(this.mainGridInterval);\r\n  }\r\n\r\n  Retrieve = async () => {\r\n    gfc_showMask();\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(''); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue('');      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_ord_no').setValue('');      //배차번호\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_grd_nm').setValue('');      //배차등급\r\n    gfo_getInput(this.props.pgm, 'disp_real_vender_name').setValue(''); //실공급자\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_nm').setValue('');     //실상차지\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_addr').setValue('');   //주소\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n      chit     : false\r\n    });\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DISP_INFO', {\r\n      scaleNumb       : '',\r\n      scrp_ord_no     : '',\r\n      scrp_grd_nm     : '',\r\n      real_vender_name: '',\r\n      load_area_nm    : '',\r\n      load_area_addr  : ''\r\n    });\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DISP_PIC', {\r\n      scaleNumb           : '',\r\n      scrp_ord_no         : '',\r\n  \r\n      empty_front_date    : '',\r\n      empty_front         : '',\r\n      empty_front_gps_addr: '',\r\n      empty_rear_date     : '',\r\n      empty_rear          : '',\r\n      empty_rear_gps_addr : '',\r\n      cargo_front_date    : '',\r\n      cargo_front         : '',\r\n      cargo_front_gps_addr: '',\r\n      cargo_rear_date     : '',\r\n      cargo_rear          : '',\r\n      cargo_rear_gps_addr : ''\r\n    });\r\n\r\n    this.mainGrid();\r\n    // this.mainHeader();\r\n    // this.mainHeader2();\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n  dblclick = async(e) => {\r\n    gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n      ({\r\n        windowZindex: 0,\r\n        activeWindow: {programId:  'INSP_HIST',\r\n                       programNam: '검수이력'\r\n                      }\r\n      })\r\n    );\r\n  }\r\n\r\n  onSelectChange = async (e) => {\r\n    if(e === null) return;\r\n\r\n    gfc_showMask();\r\n\r\n    document.getElementById('tab1_INSP_PROC').click(0);\r\n    await gfc_sleep(100);\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(e.itemGrade); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue(e.cartype);      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_ord_no').setValue('');      //배차번호\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_grd_nm').setValue('');      //배차등급\r\n    gfo_getInput(this.props.pgm, 'disp_real_vender_name').setValue(''); //실공급자\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_nm').setValue('');     //실상차지\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_addr').setValue('');   //주소\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: e.scaleNumb});\r\n    setSessionCookie('DETAIL_SCALE', e.scaleNumb);\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: e.carNumb});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: e.totalWgt});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: e.date});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n      chit     : false\r\n    });\r\n\r\n    //계량증명서 정보여부\r\n    \r\n    const chitInfoYn = await gfc_yk_call_sp('SP_ZM_CHIT', {\r\n      P_SCALENUMB: e.scaleNumb\r\n    });\r\n\r\n    if(chitInfoYn.data.SUCCESS === 'N'){\r\n      alert('계량증명서 정보가 없습니다.');\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n\r\n    //계량증명서\r\n    const chitYn = await gfc_ftp_file_yn_YK(e.scaleNumb);\r\n    gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n      date     : chitInfoYn.data.ROWS[0].CREATION_DATE,\r\n      scaleNumb: chitInfoYn.data.ROWS[0].DELIVERY_ID.toString(),\r\n      carNumb  : chitInfoYn.data.ROWS[0].VEHICLE_NO,\r\n      vender   : chitInfoYn.data.ROWS[0].VENDOR_NAME,\r\n      itemFlag : e.itemGrade,\r\n      Wgt      : chitInfoYn.data.ROWS[0].TOTAL_WEIGHT,\r\n      loc      : chitInfoYn.data.ROWS[0].AREA,\r\n      user     : gfs_getStoreValue('USER_REDUCER', 'USER_NAM'),\r\n      chit     : chitYn.data\r\n    });\r\n\r\n    //배차정보 김경현\r\n    const dispInfo = await gfc_yk_call_sp('SP_ZM_PROCESS_F3', {\r\n      P_SCALENUMB: e.scaleNumb\r\n    });\r\n\r\n    if(dispInfo.data.SUCCESS === 'Y'){\r\n      gfs_dispatch('INSP_PROC_MAIN', 'DISP_INFO', {\r\n        scaleNumb       : chitInfoYn.data.ROWS[0].DELIVERY_ID.toString(),\r\n        scrp_ord_no     : dispInfo.data.ROWS[0].SCRP_ORD_NO,\r\n        scrp_grd_nm     : dispInfo.data.ROWS[0].SCRP_GRD_NM,\r\n        real_vender_name: dispInfo.data.ROWS[0].REAL_VENDER_NAME,\r\n        load_area_nm    : dispInfo.data.ROWS[0].LOAD_AREA_NM,\r\n        load_area_addr  : dispInfo.data.ROWS[0].LOAD_AREA_ADDR\r\n      });\r\n\r\n      const scrp_ord_no = dispInfo.data.ROWS[0].SCRP_ORD_NO;\r\n      const yyyy = scrp_ord_no.substr(2, 4);\r\n      const mm = scrp_ord_no.substr(6, 2);\r\n      const dd = scrp_ord_no.substr(8, 2);\r\n\r\n      gfs_dispatch('INSP_PROC_MAIN', 'DISP_PIC', {\r\n        scaleNumb           : chitInfoYn.data.ROWS[0].DELIVERY_ID.toString(),\r\n        scrp_ord_no         : dispInfo.data.ROWS[0].SCRP_ORD_NO,\r\n    \r\n        empty_front_date    : dispInfo.data.ROWS[0].EMPTY_FRONT_DATE,\r\n        empty_front         : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].EMPTY_FRONT}`,\r\n        empty_front_gps_addr: dispInfo.data.ROWS[0].EMPTY_FRONT_GPS_ADDR,\r\n        \r\n        empty_rear_date     : dispInfo.data.ROWS[0].EMPTY_REAR_DATE,\r\n        empty_rear          : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].EMPTY_REAR}`,\r\n        empty_rear_gps_addr : dispInfo.data.ROWS[0].EMPTY_REAR_GPS_ADDR,\r\n        \r\n        cargo_front_date    : dispInfo.data.ROWS[0].CARGO_FRONT_DATE,\r\n        cargo_front         : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].CARGO_FRONT}`,\r\n        cargo_front_gps_addr: dispInfo.data.ROWS[0].CARGO_FRONT_GPS_ADDR,\r\n        \r\n        cargo_rear_date     : dispInfo.data.ROWS[0].CARGO_REAR_DATE,\r\n        cargo_rear          : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].CARGO_REAR}`,\r\n        cargo_rear_gps_addr : dispInfo.data.ROWS[0].CARGO_REAR_GPS_ADDR\r\n      });\r\n    }\r\n    \r\n    gfc_hideMask();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager'>\r\n\r\n          \r\n          <div className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp'>\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '계근번호'\r\n                            },{\r\n                              code: '2',\r\n                              name: '차량번호'\r\n                            },{\r\n                              code: '3',\r\n                              name: '사전등급'\r\n                            },{\r\n                              code: '4',\r\n                              name: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       onKeyDown   = {(e) => {\r\n                        if(e.keyCode === 13){\r\n                          this.Retrieve()\r\n                        }\r\n                       }}\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                        />\r\n                <button>검색</button>\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        selectionChange={(e) => this.onSelectChange(e)}\r\n                        // dblclick={(e) => this.dblclick(e)}\r\n                        rowHeight={46}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        columns={[\r\n                          columnInput({\r\n                            name: 'scaleNumb',\r\n                            header: '계근번호',\r\n                            width : 110,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'carNumb',\r\n                            header: '차량번호',\r\n                            width : 90,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'itemGrade',\r\n                            header: '사전등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnDateTime({\r\n                            name  : 'date',\r\n                            header: '입차시간',\r\n                            width : 120,\r\n                            height: 38,\r\n                            // paddingTop: ''\r\n                            readOnly: true,\r\n                            valign:'middle',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                            time  : 'HH:mm:ss'\r\n                          }),\r\n                          columnTextArea({\r\n                            name: 'vendor',\r\n                            header: 'Vendor',\r\n                            width : 160,\r\n                            height: 38,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnImage({\r\n                            name: 'rec',\r\n                            header: '녹화중',\r\n                            width: 85,\r\n                            imgItem:[\r\n                              {'code':'0', 'value': ''},\r\n                              {'code':'1', 'value': <GifPlayer height='30' width='70' gif={require('../../../Image/yk_rec01.gif').default} autoplay/>}\r\n                            ]\r\n                          })\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>잔여차량</span><Botspan reducer='INSP_PROC_MAIN' />\r\n              </div>\r\n            </div>\r\n            <div className='total_info'>\r\n              <ul>\r\n                <li><span className='title'>잔류 차량</span><Mainspan reducer='INSP_PROC_MAIN' flag={1} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'DAILY_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n\r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('DAILY_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'DAILY_PROC',\r\n                                        programNam: '검수일계표'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>전체 검수 차량</span><Mainspan reducer='INSP_PROC_MAIN' flag={2} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'DAILY_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n\r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('DAILY_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'DAILY_PROC',\r\n                                        programNam: '검수일계표'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>입고량(KG)</span><Mainspan reducer='INSP_PROC_MAIN' flag={3} /></li>\r\n              </ul>\r\n              <ul className='four'>\r\n                <li><span className='title'>검수대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={4} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'DISP_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n\r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('DISP_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'DISP_PROC',\r\n                                        programNam: '출차대기'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>출차대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={5} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'ENTR_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n                  \r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('ENTR_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'ENTR_PROC',\r\n                                        programNam: '입차대기'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>입차대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={6} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'ENTR_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n                  \r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('ENTR_WAIT');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'ENTR_WAIT',\r\n                                        programNam: '운송대기'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>운송대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={7} /></li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div className='car_info' id='car_info'>\r\n            <div className='title'><span>계근번호</span><Detailspan reducer='INSP_PROC_MAIN' flag={1} /></div>\r\n\r\n            <TabList pgm={this.props.pgm} id={this.props.id} reducer='INSP_PROC_MAIN'/>\r\n\r\n            <div className='tab_content' id='tabMain'>\r\n              <div className='input_list on' id={`content1_${this.props.pgm}`}>\r\n                <ul>\r\n                  <li>\r\n                    <h5>사전등급</h5>\r\n                      <Input pgm     = {this.props.pgm}\r\n                             id      = 'detail_pre_grade'\r\n                             width   = '100%'\r\n                             disabled\r\n                      />\r\n                  </li>\r\n                  <li>\r\n                    <h5>등급책정</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                                id      = 'detail_grade1'\r\n                                value   = 'itemCode'\r\n                                display = 'item'\r\n                                placeholder = '고철등급 검색'\r\n                                height  = {42}\r\n                                oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                  p_division    : 'P005'\r\n                                })}\r\n                                onChange = {async (e) => {\r\n                                  const combo = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n                                  combo.setValue(null);\r\n                                  combo.setDisabled(true);\r\n\r\n                                  if(e !== undefined && e.value !== ''){\r\n                                    await combo.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                      p_division    : e.value\r\n                                    })});\r\n                                    combo.setDisabled(false);\r\n                                  }else{\r\n                                    combo.setDisabled(true);\r\n                                  }\r\n                                }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_grade2'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>감량중량</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_subt'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감량중량 검색(KG)'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P535'\r\n                            })}\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_subt_leg');\r\n                              combo.setValue(null);\r\n                              combo.setDisabled(true);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value !== '0'){\r\n                                await combo.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                  p_division    : e.value\r\n                                })});\r\n                                combo.setDisabled(false);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_subt_leg'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '감량사유 검색'\r\n                          oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                            p_division    : 'P620'\r\n                          })}\r\n                          isDisabled\r\n                    /> \r\n                  </li>\r\n                  <li>\r\n                    <h5>감가내역</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_depr'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감가내역 검색'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P130'\r\n                            })}\r\n                            emptyRow\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_depr2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e !== undefined && e.value !== ''){\r\n                                combo.setDisabled(false);\r\n                              }else{\r\n                                combo.setDisabled(true);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm = {this.props.pgm}\r\n                          id      = 'detail_depr2'\r\n                          value   = 'CODE'\r\n                          display = 'NAME'\r\n                          placeholder = '감가비율'\r\n                          isDisabled\r\n                          data    = {[{\r\n                            'CODE': '10',\r\n                            'NAME': '10%'\r\n                          },{\r\n                            'CODE': '20',\r\n                            'NAME': '20%'\r\n                          },{\r\n                            'CODE': '30',\r\n                            'NAME': '30%'\r\n                          },{\r\n                            'CODE': '40',\r\n                            'NAME': '40%'\r\n                          },{\r\n                            'CODE': '50',\r\n                            'NAME': '50%'\r\n                          },{\r\n                            'CODE': '60',\r\n                            'NAME': '60%'\r\n                          },{\r\n                            'CODE': '70',\r\n                            'NAME': '70%'\r\n                          },{\r\n                            'CODE': '80',\r\n                            'NAME': '80%'\r\n                          },{\r\n                            'CODE': '90',\r\n                            'NAME': '90%'\r\n                          },{\r\n                            'CODE': '100',\r\n                            'NAME': '100%'\r\n                          }]}\r\n                          // emptyRow\r\n                    />\r\n                  </li>\r\n                  {/* <li>\r\n                    <h5>하차구역</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_out'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '하차구역 검색(SECTOR)'\r\n                          data    = ''\r\n                          onFocus = {ComboCreate => {\r\n                            YK_WEB_REQ('tally_process_pop.jsp?division=P530', {})\r\n                              .then(res => {\r\n                                ComboCreate({data   : res.data.dataSend,\r\n                                            value  : 'itemCode',\r\n                                            display: 'item'});\r\n                              })\r\n                          }}\r\n                  />\r\n                  </li> */}\r\n                  <li>\r\n                    <h5>차종구분</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_car'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '차종선택'\r\n                          oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                            p_division    : 'P700'\r\n                          })}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>반품구분</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '일부,전량 선택'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P110'\r\n                            })}\r\n                            emptyRow\r\n                            onChange = {e => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_rtn2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value === ''){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                combo.setDisabled(false);\r\n                              }\r\n                              // combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                            }}\r\n                    />\r\n                  </div>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn2'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P120'\r\n                            })}\r\n                            isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>경고</h5>\r\n                    <Checkbox pgm   = {this.props.pgm}\r\n                              id    = 'detail_warning'\r\n                              width = '30px'\r\n                              height= '30px'\r\n\r\n                    />\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              \r\n              <Chit pgm={this.props.pgm} id={'chit_memo'} reducer='INSP_PROC_MAIN'/>\r\n              \r\n              <div className='input_list' id={`content3_${this.props.pgm}`}>\r\n                <DispInfo pgm={this.props.pgm} />\r\n              </div>\r\n\r\n              <div className='input_list' id={`content4_${this.props.pgm}`}>\r\n                <DispImg pgm={this.props.pgm} />\r\n              </div>\r\n            </div>\r\n            \r\n            <CompleteBtn pgm={this.props.pgm}/>\r\n          </div>\r\n\r\n          \r\n          <div className='cctv_viewer'>\r\n            <h4>실시간 CCTV</h4>\r\n            <div className='manual_record'>\r\n              <h5>수동녹화</h5>\r\n              <button \r\n                type='button' \r\n                className='record'\r\n                onClick={e => this.startRec()}\r\n              >녹화</button>\r\n              <button \r\n                type='button' \r\n                className='stop on'\r\n                onClick={e => this.stopRec()}\r\n              >정지</button>\r\n            </div>\r\n            <RainInfo />\r\n            <div className='cctv_list' \r\n            >\r\n              {this.state.device[0] !== undefined && \r\n                <RecImage \r\n                  seq={1}\r\n                  device={this.state.device[0].camera.Guid} \r\n                  Name={this.state.device[0].camera.Name}\r\n                  rtspAddr={this.state.device[0].rtspAddr}\r\n                  cameraPort={this.state.device[0].cameraPort}\r\n                  cameraNam={this.state.device[0].cameraNam}\r\n                  cam='STD_CAM_OPEN' \r\n                  focus='STD_CAM_FOCUS' \r\n                  rec='STD_CAM_REC' \r\n                  image='STD_CAM_IMG'/> \r\n              }\r\n              {this.state.device[1] !== undefined && \r\n                <RecImage\r\n                  seq={2} \r\n                  device={this.state.device[1].camera.Guid} \r\n                  Name={this.state.device[1].camera.Name}\r\n                  rtspAddr={this.state.device[1].rtspAddr}\r\n                  cameraPort={this.state.device[1].cameraPort}\r\n                  cameraNam={this.state.device[1].cameraNam}\r\n                  cam='DUM_CAM_OPEN' \r\n                  focus='DUM_CAM_FOCUS' \r\n                  rec='DUM_CAM_REC' \r\n                  image='DUM_CAM_IMG'/> \r\n              }\r\n            </div>\r\n            <div className='cctv_other_list'>\r\n              <ul>\r\n                <li>\r\n                  {this.state.device[2] !== undefined && \r\n                    <RecImage\r\n                      seq={3} \r\n                      device={this.state.device[2].camera.Guid} \r\n                      Name={this.state.device[2].camera.Name}\r\n                      rtspAddr={this.state.device[2].rtspAddr}\r\n                      cameraPort={this.state.device[2].cameraPort}\r\n                      cameraNam={this.state.device[2].cameraNam}\r\n                      cam='ETC1_CAM_OPEN' \r\n                      focus='ETC1_CAM_FOCUS' \r\n                      rec='ETC1_CAM_REC' \r\n                      image='ETC1_CAM_IMG'/> \r\n                  }\r\n                </li>\r\n                <li>\r\n                  {this.state.device[3] !== undefined && \r\n                    <RecImage\r\n                      seq={4} \r\n                      device={this.state.device[3].camera.Guid} \r\n                      Name={this.state.device[3].camera.Name}\r\n                      rtspAddr={this.state.device[3].rtspAddr}\r\n                      cameraPort={this.state.device[3].cameraPort}\r\n                      cameraNam={this.state.device[3].cameraNam}\r\n                      cam='ETC2_CAM_OPEN' \r\n                      focus='ETC2_CAM_FOCUS' \r\n                      rec='ETC2_CAM_REC' \r\n                      image='ETC2_CAM_IMG'/> \r\n                  }\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default INSP_PROC;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\INSP_PROC org.js",["753","754","755","756","757"],"//#region import\r\nimport React, { Component } from 'react';\r\nimport Input from '../../../Component/Control/Input';\r\nimport Checkbox from '../../../Component/Control/Checkbox';\r\n\r\nimport { gfc_initPgm, gfc_sleep, gfc_showMask, gfc_yk_call_sp, gfc_hideMask, gfc_chit_yn_YK, gfc_ftp_file_yn_YK } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue, gfs_injectAsyncReducer, gfs_dispatch, gfs_subscribe, gfs_PGM_REDUCER } from '../../../Method/Store';\r\nimport { gfo_getCombo, gfo_getInput, gfo_getCheckbox } from '../../../Method/Component';\r\nimport { gfg_appendRow, gfg_getGrid, gfg_setSelectRow } from '../../../Method/Grid';\r\nimport { getDynamicSql_Oracle, getSp_Oracle } from '../../../db/Oracle/Oracle';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport Layout from '../../../Component/Layout/Layout';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Image as columnImage } from '../../../Component/Grid/Column/Image';\r\nimport { TextArea as columnTextArea } from '../../../Component/Grid/Column/TextArea';\r\nimport { DateTime as columnDateTime } from '../../../Component/Grid/Column/DateTime';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\nimport Mainspan from '../Common/Mainspan';\r\nimport Detailspan from '../Common/Detailspan';\r\nimport Botspan from '../Common/Botspan';\r\nimport Chit from '../Common/Chit/Chit';\r\nimport CompleteBtn from './CompleteBtn';\r\nimport TabList from '../Common/TabList';\r\nimport DispInfo from './DispInfo';\r\nimport DispImg from './DispImg';\r\nimport RecImage from './RecImage';\r\nimport RainInfo from './RainInfo';\r\n\r\nimport GifPlayer from 'react-gif-player';\r\n\r\nimport { ReRec, RecodingList } from '../../../WebReq/WebReq';\r\nimport { TOKEN, MILESTONE } from '../../../WebReq/WebReq';\r\nimport { throttle } from 'lodash';\r\nimport { setSessionCookie } from '../../../Cookies';\r\nimport { getDynamicSql_Mysql } from '../../../db/Mysql/Mysql';\r\n//#endregion\r\n\r\nclass INSP_PROC extends Component {\r\n\r\n  state = {\r\n    wait_list: [],\r\n    device: []\r\n  }\r\n\r\n  milestoneInfo = async() => {\r\n\r\n    // 선택된 공정의 카메라를 찾아서 스트리밍 받는다\r\n    // 지금은 하드코딩 되어있지만 나중엔 로컬스토리지와 콤보박스를 써서 선택된 공정의 아이피를 가지고 카메라를 가져온다.\r\n    // 1. 선택된 공정의 카메라 정보를 가지고온다.\r\n    // const milestone = TOKEN({reqAddr: 'LOGIN', MilestoneIP: gfs_getStoreValue('CAMERA_REDUCER', 'MilestoneIP')});\r\n    const milestone = await TOKEN({});\r\n    this.token  = milestone.data.TOKEN;\r\n    this.device = milestone.data.DEVICE;\r\n    if(this.token === ''){\r\n      alert('마일스톤 서버에 접속할 수 없습니다.'); \r\n    }else if(this.device === ''){\r\n      alert('마일스톤 서버에 접속할 수 없습니다.');\r\n    }else{\r\n      const areaTp = gfs_getStoreValue('USER_REDUCER', 'AREA_TP');\r\n      const select = await this.callOracle('Common/Common', 'ZM_IMS_CAMERA_SELECT_EACH', [{AREA_TP:areaTp}]);\r\n      if(select.data === undefined){\r\n        alert('설정된 카메라가 없습니다.');\r\n        return;\r\n      }\r\n\r\n      if(select.data.rows.length === 0){\r\n        alert('설정된 카메라가 없습니다.');\r\n        return;\r\n      }\r\n      let data = [];\r\n      for(let i = 0; i < select.data.rows.length; i++){\r\n  \r\n        let col = {};\r\n        for(let j = 0; j < select.data.rows[i].length; j++){\r\n          col[select.data.metaData[j].name] = select.data.rows[i][j];\r\n        }\r\n        data.push(col);\r\n      }\r\n\r\n      let ipArr = [];\r\n      let cameraPort = [];\r\n      let cameraNam = [];\r\n      let rtspAddr = [];\r\n\r\n      for(let i = 0; i < data.length; i++){\r\n        ipArr.push(data[i].CAMERA_IP);\r\n        cameraPort.push(data[i].CAMERA_PORT);\r\n        cameraNam.push(data[i].CAMERA_NAM);\r\n        rtspAddr.push(data[i].RTSP_ADDR);\r\n      }\r\n\r\n      // let ipArr = ['10.10.136.112', '10.10.136.128'];\r\n      // let rtspUrl = ['rtsp://admin:admin13579@10.10.136.112:554/profile2/media.smp', 'rtsp://admin:pass@10.10.136.128:554/video1'];\r\n      // let rtspPort = [3100, 3101];\r\n      this.infoArr = [];\r\n\r\n      for(let i = 0; i < ipArr.length; i++){\r\n        const camera = this.device.find(e1 => e1.Name.indexOf(ipArr[i]) >= 0);\r\n        if(camera){\r\n          this.infoArr.push({\r\n            camera, \r\n            ipArr: ipArr[i], \r\n            cameraPort: cameraPort[i], \r\n            cameraNam: cameraNam[i], \r\n            rtspAddr: rtspAddr[i]\r\n          }); \r\n        }\r\n      }\r\n\r\n      if(this.infoArr.length > 0){\r\n        // this.setState(this.state.device = this.infoArr);\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DEVICE', {DEVICE: this.infoArr});\r\n      }\r\n    }\r\n  }\r\n\r\n  //#region onActivePage 스토어 subscribe로 실행됨.\r\n  onActivePage = () => {\r\n    const activeWindow = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'activeWindow');\r\n    if(activeWindow.programId === 'INSP_PROC'){\r\n      window.onkeydown = e => this.onKeyDown(e);\r\n      window.onmousewheel = e => this.onMouseWheel(e);\r\n    }\r\n  }\r\n\r\n  onCameraChange = () => {\r\n    const cameraDevice = gfs_getStoreValue('INSP_PROC_MAIN', 'DEVICE');\r\n    if(cameraDevice !== undefined){\r\n      if(cameraDevice === 0) return;\r\n\r\n      if(JSON.stringify(cameraDevice) !== JSON.stringify(this.state.device)){\r\n        this.setState({\r\n          device: cameraDevice\r\n        });\r\n      }\r\n    } \r\n  }\r\n  //#endregion\r\n\r\n  //#region PTZ\r\n  debounceKeyDown = throttle((e, device) => {\r\n    let ptz = '';\r\n    if(e.keyCode === 37) ptz = 'left';\r\n    else if(e.keyCode === 38) ptz = 'up';\r\n    else if(e.keyCode === 39) ptz = 'right';\r\n    else if(e.keyCode === 40) ptz = 'down';\r\n\r\n    if(ptz !== ''){\r\n      MILESTONE({reqAddr: 'PTZ',\r\n      device: device.Guid,\r\n      ptz})\r\n    }\r\n  }, 1000);\r\n\r\n  // debounceMouseWheel = throttle((e, device) => {\r\n  //   let ptz = '';\r\n  //   if(e.deltaX === -0){\r\n  //     if (e.wheelDelta > 0){\r\n  //       ptz = 'zoomin';\r\n  //     }else{\r\n  //       ptz = 'zoomout';\r\n  //     }\r\n  //   }\r\n\r\n  //   if(ptz !== ''){\r\n  //     MILESTONE({reqAddr: 'PTZ',\r\n  //     device: device.Guid,\r\n  //     ptz})\r\n  //   }\r\n  // }, 1000);\r\n\r\n\r\n  // debounceKeyDown = (e, device) => {\r\n  //   let ptz = '';\r\n  //   if(e.keyCode === 37) ptz = 'left';\r\n  //   else if(e.keyCode === 38) ptz = 'up';\r\n  //   else if(e.keyCode === 39) ptz = 'right';\r\n  //   else if(e.keyCode === 40) ptz = 'down';\r\n\r\n  //   if(ptz !== ''){\r\n  //     MILESTONE({reqAddr: 'PTZ',\r\n  //     device: device.Guid,\r\n  //     ptz})\r\n  //   }\r\n  // };\r\n\r\n  debounceMouseWheel = (e, device) => {\r\n    let ptz = '';\r\n    if(e.deltaX === -0){\r\n      if (e.wheelDelta > 0){\r\n        ptz = 'zoomin';\r\n      }else{\r\n        ptz = 'zoomout';\r\n      }\r\n    }\r\n\r\n    if(ptz !== ''){\r\n      MILESTONE({reqAddr: 'PTZ',\r\n      device: device.Guid,\r\n      ptz})\r\n    }\r\n  };\r\n\r\n  onKeyDown = (e) => {\r\n    e.stopPropagation();\r\n\r\n    const STD_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'STD_CAM_FOCUS');\r\n    const DUM_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'DUM_CAM_FOCUS');\r\n    \r\n    if(STD_CAM_FOCUS || DUM_CAM_FOCUS){\r\n      this.debounceKeyDown(e, STD_CAM_FOCUS ? this.infoArr[0].camera : this.infoArr[1].camera);\r\n    }\r\n  }\r\n\r\n  onMouseWheel = (e) => {\r\n    e.stopPropagation();\r\n\r\n    const STD_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'STD_CAM_FOCUS');\r\n    const DUM_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'DUM_CAM_FOCUS');\r\n\r\n    if(STD_CAM_FOCUS || DUM_CAM_FOCUS){\r\n      this.debounceMouseWheel(e, STD_CAM_FOCUS ? this.infoArr[0].camera : this.infoArr[1].camera);\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region 녹화제어\r\n  startRec = async () => {\r\n    \r\n    const scaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n    const camera_no = gfs_getStoreValue('USER_REDUCER', 'CAMERA_NO');\r\n    if(scaleNumb === ''){\r\n      alert('선택된 계근번호가 없습니다.');\r\n      return;\r\n    }\r\n    if(camera_no === '' || camera_no === null){\r\n      alert('설정된 차량인식 카메라가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    //기존저장된 파일있는지 확인.\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_REC(\r\n                  :p_RowStatus,\r\n                  :p_scaleNumb,\r\n                  :p_seq,\r\n                  :p_cameraNo,\r\n                  :p_cameraDevice,\r\n                  :p_cameraName,\r\n                  :p_UserId,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_RowStatus    : 'R2',\r\n        p_scaleNumb    : scaleNumb,\r\n        p_seq          : 0,\r\n        p_cameraNo     : '',\r\n        p_cameraDevice : '',\r\n        p_cameraName   : '',\r\n        p_UserId       : ''\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS === 'N'){\r\n      if(result.data.MSG_CODE === '1'){\r\n        if(window.confirm(result.data.MSG_TEXT) === true){\r\n          const recYn = await ReRec(scaleNumb);\r\n          //0. 파일명은 변경된 상태\r\n          if(recYn.data.Response === 'OK'){\r\n            //1. DB에 녹화시작으로 저장\r\n            let param = [];\r\n            param.push({\r\n              sp   : `begin \r\n                        SP_ZM_IMS_REC(\r\n                          :p_RowStatus,\r\n                          :p_scaleNumb,\r\n                          :p_seq,\r\n                          :p_cameraNo,\r\n                          :p_cameraDevice,\r\n                          :p_cameraName,\r\n                          :p_UserId,\r\n                          \r\n                          :p_select,\r\n                          :p_SUCCESS,\r\n                          :p_MSG_CODE,\r\n                          :p_MSG_TEXT,\r\n                          :p_COL_NAM\r\n                        );\r\n                      end;\r\n                      `,\r\n              data : {\r\n                p_RowStatus    : 'I2',\r\n                p_scaleNumb    : scaleNumb,\r\n                p_seq          : 0,\r\n                p_cameraNo     : camera_no,\r\n                p_cameraDevice : '',\r\n                p_cameraName   : '',\r\n                p_UserId       : ''\r\n              },\r\n              errSeq: 0\r\n            })\r\n            \r\n            const result = await getSp_Oracle(param);\r\n\r\n            if(result.data.SUCCESS === 'N'){\r\n              alert('수동녹화 시작에 실패했습니다.');\r\n            }\r\n          }\r\n        }else{\r\n          return;\r\n        }\r\n      }else{\r\n        if(window.confirm(result.data.MSG_TEXT) === true){\r\n          //1. DB에 녹화시작으로 저장\r\n          let param = [];\r\n          param.push({\r\n            sp   : `begin \r\n                      SP_ZM_IMS_REC(\r\n                        :p_RowStatus,\r\n                        :p_scaleNumb,\r\n                        :p_seq,\r\n                        :p_cameraNo,\r\n                        :p_cameraDevice,\r\n                        :p_cameraName,\r\n                        :p_UserId,\r\n                        \r\n                        :p_select,\r\n                        :p_SUCCESS,\r\n                        :p_MSG_CODE,\r\n                        :p_MSG_TEXT,\r\n                        :p_COL_NAM\r\n                      );\r\n                    end;\r\n                    `,\r\n            data : {\r\n              p_RowStatus    : 'I3',\r\n              p_scaleNumb    : scaleNumb,\r\n              p_seq          : 0,\r\n              p_cameraNo     : camera_no,\r\n              p_cameraDevice : '',\r\n              p_cameraName   : '',\r\n              p_UserId       : ''\r\n            },\r\n            errSeq: 0\r\n          })\r\n          \r\n          const result = await getSp_Oracle(param);\r\n\r\n          if(result.data.SUCCESS === 'N'){\r\n            alert('수동녹화 시작에 실패했습니다.');\r\n          }\r\n        }else{\r\n          return;\r\n        }\r\n      }\r\n    }else{\r\n        //1. DB에 녹화시작으로 저장\r\n        let param = [];\r\n        param.push({\r\n          sp   : `begin \r\n                    SP_ZM_IMS_REC(\r\n                      :p_RowStatus,\r\n                      :p_scaleNumb,\r\n                      :p_seq,\r\n                      :p_cameraNo,\r\n                      :p_cameraDevice,\r\n                      :p_cameraName,\r\n                      :p_UserId,\r\n                      \r\n                      :p_select,\r\n                      :p_SUCCESS,\r\n                      :p_MSG_CODE,\r\n                      :p_MSG_TEXT,\r\n                      :p_COL_NAM\r\n                    );\r\n                  end;\r\n                  `,\r\n          data : {\r\n            p_RowStatus    : 'I2',\r\n            p_scaleNumb    : scaleNumb,\r\n            p_seq          : 0,\r\n            p_cameraNo     : camera_no,\r\n            p_cameraDevice : '',\r\n            p_cameraName   : '',\r\n            p_UserId       : ''\r\n          },\r\n          errSeq: 0\r\n        })\r\n        \r\n        const result = await getSp_Oracle(param);\r\n\r\n        if(result.data.SUCCESS === 'N'){\r\n          alert('수동녹화 시작에 실패했습니다.');\r\n        }\r\n    }\r\n  }\r\n\r\n  stopRec = async () => {\r\n    const scaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n    const camera_no = gfs_getStoreValue('USER_REDUCER', 'CAMERA_NO');\r\n    if(scaleNumb === ''){\r\n      alert('선택된 계근번호가 없습니다.');\r\n      return;\r\n    }\r\n    if(camera_no === '' || camera_no === null){\r\n      alert('설정된 차량인식 카메라가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    //기존저장된 파일있는지 확인.\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_REC(\r\n                  :p_RowStatus,\r\n                  :p_scaleNumb,\r\n                  :p_seq,\r\n                  :p_cameraNo,\r\n                  :p_cameraDevice,\r\n                  :p_cameraName,\r\n                  :p_UserId,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_RowStatus    : 'R4',\r\n        p_scaleNumb    : scaleNumb,\r\n        p_seq          : 0,\r\n        p_cameraNo     : '',\r\n        p_cameraDevice : '',\r\n        p_cameraName   : '',\r\n        p_UserId       : ''\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS === 'N'){\r\n      alert('녹화중인 계량번호가 아닙니다.');\r\n      return;\r\n    }else{\r\n\r\n      let param = [];\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_REC(\r\n                    :p_RowStatus,\r\n                    :p_scaleNumb,\r\n                    :p_seq,\r\n                    :p_cameraNo,\r\n                    :p_cameraDevice,\r\n                    :p_cameraName,\r\n                    :p_UserId,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_RowStatus    : 'D3',\r\n          p_scaleNumb    : scaleNumb,\r\n          p_seq          : 0,\r\n          p_cameraNo     : '',\r\n          p_cameraDevice : '',\r\n          p_cameraName   : '',\r\n          p_UserId       : ''\r\n        },\r\n        errSeq: 0\r\n      })\r\n      \r\n      const result = await getSp_Oracle(param);\r\n\r\n      if(result.data.SUCCESS === 'N'){\r\n        alert('수동녹화 중지에 실패했습니다.');\r\n      }\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this);\r\n\r\n    //#region 리듀서\r\n    const INSP_PROC_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'INSP_PROC_MAIN') {\r\n        return {\r\n          ON_ACTIVE    : nowState === undefined ? {\r\n            active : true,\r\n            time   : new Date() \r\n          } : nowState.ON_ACTIVE,\r\n\r\n          DEVICE       : nowState === undefined ? 0 : nowState.DEVICE,\r\n\r\n          RAIN_INFO    : nowState === undefined ? 0 : nowState.RAIN_INFO,\r\n\r\n          MAIN_WAIT    : nowState === undefined ? 0 : nowState.MAIN_WAIT,\r\n          MAIN_TOTAL   : nowState === undefined ? 0 : nowState.MAIN_TOTAL,\r\n          MAIN_WEIGHT  : nowState === undefined ? 0 : nowState.MAIN_WEIGHT,\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n          PROC_WAIT    : nowState === undefined ? 0 : nowState.PROC_WAIT,\r\n          DEPT_WAIT    : nowState === undefined ? 0 : nowState.DEPT_WAIT,\r\n          ENTR_WAIT    : nowState === undefined ? 0 : nowState.ENTR_WAIT,\r\n          DRIV_WAIT    : nowState === undefined ? 0 : nowState.DRIV_WAIT,\r\n          \r\n          DETAIL_SCALE : nowState === undefined ? '' : nowState.DETAIL_SCALE,\r\n          DETAIL_CARNO : nowState === undefined ? '' : nowState.DETAIL_CARNO,\r\n          DETAIL_WEIGHT: nowState === undefined ? '' : nowState.DETAIL_WEIGHT,\r\n          DETAIL_DATE  : nowState === undefined ? '' : nowState.DETAIL_DATE,\r\n\r\n          STD_CAM_IMG  : nowState === undefined ? null : nowState.STD_CAM_IMG,\r\n          DUM_CAM_IMG  : nowState === undefined ? null : nowState.DUM_CAM_IMG,\r\n          ETC1_CAM_IMG : nowState === undefined ? false : nowState.ETC1_CAM_IMG,\r\n          ETC2_CAM_IMG : nowState === undefined ? false : nowState.ETC2_CAM_IMG,\r\n\r\n          STD_CAM_OPEN : nowState === undefined ? false : nowState.STD_CAM_OPEN,\r\n          DUM_CAM_OPEN : nowState === undefined ? false : nowState.DUM_CAM_OPEN,\r\n          ETC1_CAM_OPEN : nowState === undefined ? false : nowState.ETC1_CAM_OPEN,\r\n          ETC2_CAM_OPEN : nowState === undefined ? false : nowState.ETC2_CAM_OPEN,\r\n\r\n          STD_CAM_FOCUS: nowState === undefined ? false : nowState.STD_CAM_FOCUS,\r\n          DUM_CAM_FOCUS: nowState === undefined ? false : nowState.DUM_CAM_FOCUS,\r\n          ETC1_CAM_FOCUS : nowState === undefined ? false : nowState.ETC1_CAM_FOCUS,\r\n          ETC2_CAM_FOCUS : nowState === undefined ? false : nowState.ETC2_CAM_FOCUS,\r\n\r\n          STD_CAM_REC  : nowState === undefined ? {\r\n            rec     : false,\r\n            time    : '00:00'\r\n          } : nowState.STD_CAM_REC,\r\n\r\n          DUM_CAM_REC  : nowState === undefined ? {\r\n            rec     : false,\r\n            time    : '00:00'\r\n          } : nowState.DUM_CAM_REC,\r\n\r\n          CHIT_MEMO    : nowState === undefined ? '' : nowState.CHIT_MEMO,\r\n          \r\n          CHIT_INFO    : nowState === undefined ? {\r\n            date     : '',\r\n            scaleNumb: '',\r\n            carNumb  : '',\r\n            vender   : '',\r\n            itemFlag : '',\r\n            Wgt      : '',\r\n            loc      : '',\r\n            user     : '',\r\n            chit     : 'N'\r\n          } : nowState.CHIT_INFO,\r\n          \r\n          DISP_INFO    : nowState === undefined ? {\r\n            scaleNumb       : '',\r\n            scrp_ord_no     : '',\r\n            scrp_grd_nm     : '',\r\n            real_vender_name: '',\r\n            load_area_nm    : '',\r\n            load_area_addr  : ''\r\n          } : nowState.DISP_INFO,\r\n\r\n          DISP_PIC    : nowState === undefined ? {\r\n            scaleNumb           : '',\r\n            scrp_ord_no         : '',\r\n            empty_front_date    : '',\r\n            empty_front         : '',\r\n            empty_front_gps_addr: '',\r\n            empty_rear_date     : '',\r\n            empty_rear          : '',\r\n            empty_rear_gps_addr : '',\r\n            cargo_front_date    : '',\r\n            cargo_front         : '',\r\n            cargo_front_gps_addr: '',\r\n            cargo_rear_date     : '',\r\n            cargo_rear          : '',\r\n            cargo_rear_gps_addr : ''\r\n          } : nowState.DISP_PIC\r\n        };\r\n      }\r\n\r\n      if(action.type === 'DEVICE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEVICE : action.DEVICE\r\n        })\r\n      }else if(action.type === 'RAIN_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          RAIN_INFO : action.RAIN_INFO\r\n        })\r\n      }else if(action.type === 'MAIN_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WAIT : action.MAIN_WAIT\r\n        })\r\n      }else if(action.type === 'DRIV_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DRIV_WAIT : action.DRIV_WAIT\r\n        })\r\n      }else if(action.type === 'MAIN_TOTAL'){\r\n        \r\n        return Object.assign({}, nowState, {\r\n          MAIN_TOTAL : action.MAIN_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WEIGHT : action.MAIN_WEIGHT\r\n        })\r\n      }else if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }else if(action.type === 'PROC_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          PROC_WAIT : action.PROC_WAIT\r\n        })\r\n      }else if(action.type === 'DEPT_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEPT_WAIT : action.DEPT_WAIT\r\n        })\r\n      }else if(action.type === 'ENTR_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ENTR_WAIT : action.ENTR_WAIT\r\n        })\r\n      }else if(action.type === 'DETAIL_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_SCALE : action.DETAIL_SCALE\r\n        })\r\n      }else if(action.type === 'DETAIL_CARNO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_CARNO : action.DETAIL_CARNO\r\n        })\r\n      }else if(action.type === 'DETAIL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_WEIGHT : action.DETAIL_WEIGHT\r\n        })\r\n      }else if(action.type === 'DETAIL_DATE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_DATE : action.DETAIL_DATE\r\n        })\r\n      }else if(action.type === 'STD_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_IMG : action.STD_CAM_IMG\r\n        })\r\n      }else if(action.type === 'DUM_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_IMG : action.DUM_CAM_IMG\r\n        })\r\n      }else if(action.type === 'ETC1_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC1_CAM_IMG : action.ETC1_CAM_IMG\r\n        })\r\n      }else if(action.type === 'ETC2_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC2_CAM_IMG : action.ETC2_CAM_IMG\r\n        })\r\n      }else if(action.type === 'STD_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_OPEN : action.STD_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'DUM_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_OPEN : action.DUM_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'ETC1_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC1_CAM_OPEN : action.ETC1_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'ETC2_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC2_CAM_OPEN : action.ETC2_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'STD_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_FOCUS : action.STD_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'DUM_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_FOCUS : action.DUM_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'ETC1_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC1_CAM_FOCUS : action.ETC1_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'ETC2_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC2_CAM_FOCUS : action.ETC2_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.STD_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.DUM_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec     : nowState.STD_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec     : nowState.DUM_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }\r\n      // else if(action.type === 'CHIT_INFO_ITEM_FLAG'){\r\n\r\n      //   return Object.assign({}, nowState, {\r\n      //     CHIT_INFO : {\r\n      //       date     :  nowState.CHIT_INFO.date,\r\n      //       scaleNumb:  nowState.CHIT_INFO.scaleNumb,\r\n      //       carNumb  :  nowState.CHIT_INFO.carNumb,\r\n      //       vender   :  nowState.CHIT_INFO.vender,\r\n      //       itemFlag :  action.itemFlag,\r\n      //       Wgt      :  nowState.CHIT_INFO.Wgt,\r\n      //       loc      :  nowState.CHIT_INFO.loc,\r\n      //       user     :  nowState.CHIT_INFO.user,\r\n      //       chit     :  nowState.CHIT_INFO.chit\r\n      //     }\r\n      //   })\r\n      // }\r\n      else if(action.type === 'CHIT_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     : action.date,\r\n            scaleNumb: action.scaleNumb,\r\n            carNumb  : action.carNumb,\r\n            vender   : action.vender,\r\n            itemFlag : action.itemFlag,\r\n            Wgt      : action.Wgt,\r\n            loc      : action.loc,\r\n            user     : action.user,\r\n            chit     : action.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_MEMO'){\r\n        return Object.assign({}, nowState, {\r\n          CHIT_MEMO : action.CHIT_MEMO\r\n        })\r\n      }else if(action.type === 'DISP_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DISP_INFO : {\r\n            scaleNumb       : action.scaleNumb,\r\n            scrp_ord_no     : action.scrp_ord_no,\r\n            scrp_grd_nm     : action.scrp_grd_nm,\r\n            real_vender_name: action.real_vender_name,\r\n            load_area_nm    : action.load_area_nm,\r\n            load_area_addr  : action.load_area_addr  \r\n          }\r\n        })\r\n      }else if(action.type === 'DISP_PIC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DISP_PIC : {\r\n            scaleNumb           : action.scaleNumb,\r\n            scrp_ord_no         : action.scrp_ord_no,\r\n            empty_front_date    : action.empty_front_date,\r\n            empty_front         : action.empty_front,\r\n            empty_front_gps_addr: action.empty_front_gps_addr,\r\n            empty_rear_date     : action.empty_rear_date,\r\n            empty_rear          : action.empty_rear,\r\n            empty_rear_gps_addr : action.empty_rear_gps_addr,\r\n            cargo_front_date    : action.cargo_front_date,\r\n            cargo_front         : action.cargo_front,\r\n            cargo_front_gps_addr: action.cargo_front_gps_addr,\r\n            cargo_rear_date     : action.cargo_rear_date,\r\n            cargo_rear          : action.cargo_rear,\r\n            cargo_rear_gps_addr : action.cargo_rear_gps_addr \r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('INSP_PROC_MAIN', INSP_PROC_MAIN);\r\n    gfs_subscribe(this.onActivePage);\r\n    gfs_subscribe(this.onCameraChange);\r\n    //#endregion\r\n  }\r\n\r\n  callOracle = async(file, fn, param) => {\r\n    let result = await getDynamicSql_Oracle(\r\n      file,\r\n      fn,\r\n      param\r\n    ); \r\n\r\n    return result;\r\n  }\r\n\r\n  Init = async() => {\r\n    await this.milestoneInfo();\r\n  }\r\n\r\n  //#region 개별조회\r\n  mainHeader = async() => {\r\n  \r\n    // const select = await gfc_yk_call_sp('sp_zm_mstr_header');\r\n    const select = await gfc_yk_call_sp('sp_zm_mstr_header');\r\n    const R_CARSU = select.data.ROWS[0].R_CARSU === null ? 0 : select.data.ROWS[0].R_CARSU;\r\n    const E_CARSU = select.data.ROWS[0].E_CARSU === null ? 0 : select.data.ROWS[0].E_CARSU;\r\n    const E_KG = select.data.ROWS[0].E_KG === null ? 0 : select.data.ROWS[0].E_KG;\r\n\r\n    if(select.data.SUCCESS === 'Y'){\r\n      if(R_CARSU !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WAIT', {MAIN_WAIT: R_CARSU});\r\n\r\n      if(E_CARSU !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_TOTAL'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_TOTAL', {MAIN_TOTAL: E_CARSU});\r\n\r\n      if(E_KG !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WEIGHT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WEIGHT', {MAIN_WEIGHT: E_KG});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WAIT', {MAIN_WAIT: 0});\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_TOTAL') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_TOTAL', {MAIN_TOTAL: 0});\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WEIGHT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WEIGHT', {MAIN_WEIGHT: 0});\r\n    }\r\n  }\r\n\r\n  mainHeader2 = async() => {\r\n    //출차대기\r\n    // const select = await gfc_yk_call_sp('sp_zm_mstr_pass');\r\n    const select = await gfc_yk_call_sp('sp_zm_mstr_pass');\r\n\r\n    if(select.data.SUCCESS === 'Y'){\r\n      if(select.data.ROWS.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'DEPT_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DEPT_WAIT', {DEPT_WAIT: select.data.ROWS.length});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'DEPT_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DEPT_WAIT', {DEPT_WAIT: 0});\r\n    }\r\n\r\n    //입차대기\r\n    // const select2 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE');\r\n    const select2 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE');\r\n\r\n    if(select2.data.SUCCESS === 'Y'){\r\n      if(select2.data.ROWS.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'ENTR_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'ENTR_WAIT', {ENTR_WAIT: select2.data.ROWS.length});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'ENTR_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'ENTR_WAIT', {ENTR_WAIT: 0});\r\n    }\r\n\r\n    // //운송대기\r\n    // const select3 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE_WAIT');\r\n    const select3 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE_WAIT');\r\n\r\n    if(select3.data.SUCCESS === 'Y'){\r\n      if(select3.data.ROWS.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'DRIV_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DRIV_WAIT', {DRIV_WAIT: select3.data.ROWS.length});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'DRIV_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DRIV_WAIT', {DRIV_WAIT: 0});\r\n    }\r\n  }\r\n\r\n  mainGrid = async() => {\r\n    const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n\r\n    // const select = await gfc_yk_call_sp('SP_ZM_MSTR_WAIT');\r\n    const select = await gfc_yk_call_sp('SP_ZM_MSTR_WAIT');\r\n    if(select.data.SUCCESS === 'Y'){\r\n      const main = select.data.ROWS;\r\n        \r\n      if(main.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'PROC_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'PROC_WAIT', {PROC_WAIT: main.length});\r\n\r\n      const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n      const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n  \r\n      const dataMod = [];\r\n      main.forEach(e => {\r\n        dataMod.push({\r\n          scaleNumb: e['DELIVERY_ID'].toString(),\r\n          carNumb: e['VEHICLE_NO'],\r\n          itemGrade: e['ITEM_GRADE'],\r\n          date: e['CREATION_DATE'],\r\n          vendor: e['VENDOR_NAME']\r\n        })\r\n      })\r\n\r\n      let data = dataMod.filter(e => {\r\n        if(search_tp !== null && search_tp !== ''){\r\n          //계근번호\r\n          if(search_tp === '1'){\r\n            if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          //차량번호\r\n          else if(search_tp === '2'){\r\n            if(e.carNumb.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          //사전등급\r\n          else if(search_tp === '3'){\r\n            if(e.itemGrade.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          //업체\r\n          else if(search_tp === '4'){\r\n            if(e.vendor.indexOf(search_txt) >= 0){\r\n              return true;\r\n            }else{\r\n              return false;\r\n            }\r\n          }\r\n          \r\n        }else{\r\n          return true;\r\n        }\r\n      })\r\n\r\n      if(data.length > 0){\r\n        \r\n        //기존 그리드에서 scaleNumb기준으로 데이터가 없으면 추가한다.\r\n        for(let i = 0; i < data.length; i++){\r\n          const scaleNumb = data[i].scaleNumb;\r\n\r\n          const oldData = grid.getData().find(e => e.scaleNumb === scaleNumb);\r\n          if(!oldData){\r\n            gfg_appendRow(grid, grid.getRowCount(), {\r\n              scaleNumb,\r\n              carNumb: data[i].carNumb,\r\n              itemGrade: data[i].itemGrade,\r\n              date: data[i].date,\r\n              vendor: data[i].vendor,\r\n              rec: '0'\r\n            }, 'scaleNumb', false);\r\n            grid.resetOriginData();\r\n          }\r\n        }\r\n\r\n        //새로운 정보 기준으로 데이터가 지워졌으면 삭제한다.\r\n        for(let i = 0; i < grid.getData().length; i++){\r\n          const scaleNumb =  grid.getData()[i].scaleNumb;\r\n\r\n          const newData = data.find(e => e.scaleNumb === scaleNumb)\r\n          if(!newData){\r\n            grid.removeRow(i);\r\n\r\n            //지워진 데이터가 기존에 선택된 데이터 이면 초기화 한다.\r\n            const selectScaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n            if(scaleNumb === selectScaleNumb){\r\n              gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n              gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n              gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: '0'});\r\n              gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n            }\r\n          }\r\n        }\r\n\r\n        RecodingList().then(recScaleNumb => {\r\n          for(let i = 0; i < recScaleNumb.data.Response.length; i++){\r\n\r\n            const data = grid.getData().find(e => e.scaleNumb === recScaleNumb.data.Response[i])\r\n            if(data){\r\n              //녹화 on만 설정\r\n              grid.setValue(data.rowKey, 'rec', '1');\r\n            }\r\n          }\r\n\r\n          const recGrid = grid.getData().filter(e => e.rec === '1');\r\n          for(let i = 0; i < recGrid.length; i++){\r\n            const data = recScaleNumb.data.Response.find(e => e === recGrid[i].scaleNumb);\r\n            if(!data){\r\n              //녹화 off만 설정\r\n              grid.setValue(recGrid[i].rowKey, 'rec', '0');\r\n            }\r\n          }\r\n        })\r\n  \r\n        if(data.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'BOT_TOTAL'))\r\n          gfs_dispatch('INSP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n      }\r\n    }else{\r\n      grid.clear();\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'BOT_TOTAL') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n    }\r\n\r\n    await this.mainHeader();\r\n    await this.mainHeader2();\r\n  }\r\n  //#endregion\r\n\r\n  componentDidMount(){\r\n    this.Init();\r\n    // this.Retrieve();\r\n\r\n    // this.mainHeaderInterval = setInterval(e => {\r\n    //   this.mainHeader();\r\n    // }, 2000)\r\n\r\n    // this.mainHeaderInterval2 = setInterval(e => {\r\n    //   this.mainHeader2();\r\n    // }, 5000)\r\n\r\n    this.mainGridInterval = setInterval(e => {\r\n      this.mainGrid();\r\n    }, 5000)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    // clearInterval(this.mainHeaderInterval);\r\n    // clearInterval(this.mainHeaderInterval2);\r\n    clearInterval(this.mainGridInterval);\r\n  }\r\n\r\n  Retrieve = async () => {\r\n    gfc_showMask();\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(''); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue('');      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_ord_no').setValue('');      //배차번호\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_grd_nm').setValue('');      //배차등급\r\n    gfo_getInput(this.props.pgm, 'disp_real_vender_name').setValue(''); //실공급자\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_nm').setValue('');     //실상차지\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_addr').setValue('');   //주소\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n      chit     : false\r\n    });\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DISP_INFO', {\r\n      scaleNumb       : '',\r\n      scrp_ord_no     : '',\r\n      scrp_grd_nm     : '',\r\n      real_vender_name: '',\r\n      load_area_nm    : '',\r\n      load_area_addr  : ''\r\n    });\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DISP_PIC', {\r\n      scaleNumb           : '',\r\n      scrp_ord_no         : '',\r\n  \r\n      empty_front_date    : '',\r\n      empty_front         : '',\r\n      empty_front_gps_addr: '',\r\n      empty_rear_date     : '',\r\n      empty_rear          : '',\r\n      empty_rear_gps_addr : '',\r\n      cargo_front_date    : '',\r\n      cargo_front         : '',\r\n      cargo_front_gps_addr: '',\r\n      cargo_rear_date     : '',\r\n      cargo_rear          : '',\r\n      cargo_rear_gps_addr : ''\r\n    });\r\n\r\n    this.mainGrid();\r\n    // this.mainHeader();\r\n    // this.mainHeader2();\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n  dblclick = async(e) => {\r\n    gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n      ({\r\n        windowZindex: 0,\r\n        activeWindow: {programId:  'INSP_HIST',\r\n                       programNam: '검수이력'\r\n                      }\r\n      })\r\n    );\r\n  }\r\n\r\n  onSelectChange = async (e) => {\r\n    if(e === null) return;\r\n\r\n    gfc_showMask();\r\n\r\n    document.getElementById('tab1_INSP_PROC').click(0);\r\n    await gfc_sleep(100);\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(e.itemGrade); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue(e.cartype);      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_ord_no').setValue('');      //배차번호\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_grd_nm').setValue('');      //배차등급\r\n    gfo_getInput(this.props.pgm, 'disp_real_vender_name').setValue(''); //실공급자\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_nm').setValue('');     //실상차지\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_addr').setValue('');   //주소\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: e.scaleNumb});\r\n    setSessionCookie('DETAIL_SCALE', e.scaleNumb);\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: e.carNumb});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: e.totalWgt});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: e.date});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n      chit     : false\r\n    });\r\n\r\n    //계량증명서 정보여부\r\n    \r\n    const chitInfoYn = await gfc_yk_call_sp('SP_ZM_CHIT', {\r\n      P_SCALENUMB: e.scaleNumb\r\n    });\r\n\r\n    if(chitInfoYn.data.SUCCESS === 'N'){\r\n      alert('계량증명서 정보가 없습니다.');\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n\r\n    //계량증명서\r\n    const chitYn = await gfc_ftp_file_yn_YK(e.scaleNumb);\r\n    gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n      date     : chitInfoYn.data.ROWS[0].CREATION_DATE,\r\n      scaleNumb: chitInfoYn.data.ROWS[0].DELIVERY_ID.toString(),\r\n      carNumb  : chitInfoYn.data.ROWS[0].VEHICLE_NO,\r\n      vender   : chitInfoYn.data.ROWS[0].VENDOR_NAME,\r\n      itemFlag : e.itemGrade,\r\n      Wgt      : chitInfoYn.data.ROWS[0].TOTAL_WEIGHT,\r\n      loc      : chitInfoYn.data.ROWS[0].AREA,\r\n      user     : gfs_getStoreValue('USER_REDUCER', 'USER_NAM'),\r\n      chit     : chitYn.data\r\n    });\r\n\r\n    //배차정보 김경현\r\n    const dispInfo = await gfc_yk_call_sp('SP_ZM_PROCESS_F3', {\r\n      P_SCALENUMB: e.scaleNumb\r\n    });\r\n\r\n    if(dispInfo.data.SUCCESS === 'Y'){\r\n      gfs_dispatch('INSP_PROC_MAIN', 'DISP_INFO', {\r\n        scaleNumb       : chitInfoYn.data.ROWS[0].DELIVERY_ID.toString(),\r\n        scrp_ord_no     : dispInfo.data.ROWS[0].SCRP_ORD_NO,\r\n        scrp_grd_nm     : dispInfo.data.ROWS[0].SCRP_GRD_NM,\r\n        real_vender_name: dispInfo.data.ROWS[0].REAL_VENDER_NAME,\r\n        load_area_nm    : dispInfo.data.ROWS[0].LOAD_AREA_NM,\r\n        load_area_addr  : dispInfo.data.ROWS[0].LOAD_AREA_ADDR\r\n      });\r\n\r\n      const scrp_ord_no = dispInfo.data.ROWS[0].SCRP_ORD_NO;\r\n      const yyyy = scrp_ord_no.substr(2, 4);\r\n      const mm = scrp_ord_no.substr(6, 2);\r\n      const dd = scrp_ord_no.substr(8, 2);\r\n\r\n      gfs_dispatch('INSP_PROC_MAIN', 'DISP_PIC', {\r\n        scaleNumb           : chitInfoYn.data.ROWS[0].DELIVERY_ID.toString(),\r\n        scrp_ord_no         : dispInfo.data.ROWS[0].SCRP_ORD_NO,\r\n    \r\n        empty_front_date    : dispInfo.data.ROWS[0].EMPTY_FRONT_DATE,\r\n        empty_front         : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].EMPTY_FRONT}`,\r\n        empty_front_gps_addr: dispInfo.data.ROWS[0].EMPTY_FRONT_GPS_ADDR,\r\n        \r\n        empty_rear_date     : dispInfo.data.ROWS[0].EMPTY_REAR_DATE,\r\n        empty_rear          : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].EMPTY_REAR}`,\r\n        empty_rear_gps_addr : dispInfo.data.ROWS[0].EMPTY_REAR_GPS_ADDR,\r\n        \r\n        cargo_front_date    : dispInfo.data.ROWS[0].CARGO_FRONT_DATE,\r\n        cargo_front         : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].CARGO_FRONT}`,\r\n        cargo_front_gps_addr: dispInfo.data.ROWS[0].CARGO_FRONT_GPS_ADDR,\r\n        \r\n        cargo_rear_date     : dispInfo.data.ROWS[0].CARGO_REAR_DATE,\r\n        cargo_rear          : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].CARGO_REAR}`,\r\n        cargo_rear_gps_addr : dispInfo.data.ROWS[0].CARGO_REAR_GPS_ADDR\r\n      });\r\n    }\r\n    \r\n    gfc_hideMask();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager'>\r\n\r\n          \r\n          <div className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp'>\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '계근번호'\r\n                            },{\r\n                              code: '2',\r\n                              name: '차량번호'\r\n                            },{\r\n                              code: '3',\r\n                              name: '사전등급'\r\n                            },{\r\n                              code: '4',\r\n                              name: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       onKeyDown   = {(e) => {\r\n                        if(e.keyCode === 13){\r\n                          this.Retrieve()\r\n                        }\r\n                       }}\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                        />\r\n                <button>검색</button>\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        selectionChange={(e) => this.onSelectChange(e)}\r\n                        // dblclick={(e) => this.dblclick(e)}\r\n                        rowHeight={46}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        columns={[\r\n                          columnInput({\r\n                            name: 'scaleNumb',\r\n                            header: '계근번호',\r\n                            width : 110,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'carNumb',\r\n                            header: '차량번호',\r\n                            width : 90,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'itemGrade',\r\n                            header: '사전등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnDateTime({\r\n                            name  : 'date',\r\n                            header: '입차시간',\r\n                            width : 120,\r\n                            height: 38,\r\n                            // paddingTop: ''\r\n                            readOnly: true,\r\n                            valign:'middle',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                            time  : 'HH:mm:ss'\r\n                          }),\r\n                          columnTextArea({\r\n                            name: 'vendor',\r\n                            header: 'Vendor',\r\n                            width : 160,\r\n                            height: 38,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnImage({\r\n                            name: 'rec',\r\n                            header: '녹화중',\r\n                            width: 85,\r\n                            imgItem:[\r\n                              {'code':'0', 'value': ''},\r\n                              {'code':'1', 'value': <GifPlayer height='30' width='70' gif={require('../../../Image/yk_rec01.gif').default} autoplay/>}\r\n                            ]\r\n                          })\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>잔여차량</span><Botspan reducer='INSP_PROC_MAIN' />\r\n              </div>\r\n            </div>\r\n            <div className='total_info'>\r\n              <ul>\r\n                <li><span className='title'>잔류 차량</span><Mainspan reducer='INSP_PROC_MAIN' flag={1} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'DAILY_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n\r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('DAILY_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'DAILY_PROC',\r\n                                        programNam: '검수일계표'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>전체 검수 차량</span><Mainspan reducer='INSP_PROC_MAIN' flag={2} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'DAILY_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n\r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('DAILY_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'DAILY_PROC',\r\n                                        programNam: '검수일계표'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>입고량(KG)</span><Mainspan reducer='INSP_PROC_MAIN' flag={3} /></li>\r\n              </ul>\r\n              <ul className='four'>\r\n                <li><span className='title'>검수대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={4} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'DISP_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n\r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('DISP_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'DISP_PROC',\r\n                                        programNam: '출차대기'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>출차대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={5} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'ENTR_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n                  \r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('ENTR_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'ENTR_PROC',\r\n                                        programNam: '입차대기'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>입차대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={6} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'ENTR_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n                  \r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('ENTR_WAIT');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'ENTR_WAIT',\r\n                                        programNam: '운송대기'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>운송대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={7} /></li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div className='car_info' id='car_info'>\r\n            <div className='title'><span>계근번호</span><Detailspan reducer='INSP_PROC_MAIN' flag={1} /></div>\r\n\r\n            <TabList pgm={this.props.pgm} id={this.props.id} reducer='INSP_PROC_MAIN'/>\r\n\r\n            <div className='tab_content' id='tabMain'>\r\n              <div className='input_list on' id={`content1_${this.props.pgm}`}>\r\n                <ul>\r\n                  <li>\r\n                    <h5>사전등급</h5>\r\n                      <Input pgm     = {this.props.pgm}\r\n                             id      = 'detail_pre_grade'\r\n                             width   = '100%'\r\n                             disabled\r\n                      />\r\n                  </li>\r\n                  <li>\r\n                    <h5>등급책정</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                                id      = 'detail_grade1'\r\n                                value   = 'itemCode'\r\n                                display = 'item'\r\n                                placeholder = '고철등급 검색'\r\n                                height  = {42}\r\n                                oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                  p_division    : 'P005'\r\n                                })}\r\n                                onChange = {async (e) => {\r\n                                  const combo = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n                                  combo.setValue(null);\r\n                                  combo.setDisabled(true);\r\n\r\n                                  if(e !== undefined && e.value !== ''){\r\n                                    await combo.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                      p_division    : e.value\r\n                                    })});\r\n                                    combo.setDisabled(false);\r\n                                  }else{\r\n                                    combo.setDisabled(true);\r\n                                  }\r\n                                }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_grade2'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>감량중량</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_subt'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감량중량 검색(KG)'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P535'\r\n                            })}\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_subt_leg');\r\n                              combo.setValue(null);\r\n                              combo.setDisabled(true);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value !== '0'){\r\n                                await combo.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                  p_division    : e.value\r\n                                })});\r\n                                combo.setDisabled(false);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_subt_leg'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '감량사유 검색'\r\n                          oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                            p_division    : 'P620'\r\n                          })}\r\n                          isDisabled\r\n                    /> \r\n                  </li>\r\n                  <li>\r\n                    <h5>감가내역</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_depr'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감가내역 검색'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P130'\r\n                            })}\r\n                            emptyRow\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_depr2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e !== undefined && e.value !== ''){\r\n                                combo.setDisabled(false);\r\n                              }else{\r\n                                combo.setDisabled(true);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm = {this.props.pgm}\r\n                          id      = 'detail_depr2'\r\n                          value   = 'CODE'\r\n                          display = 'NAME'\r\n                          placeholder = '감가비율'\r\n                          isDisabled\r\n                          data    = {[{\r\n                            'CODE': '10',\r\n                            'NAME': '10%'\r\n                          },{\r\n                            'CODE': '20',\r\n                            'NAME': '20%'\r\n                          },{\r\n                            'CODE': '30',\r\n                            'NAME': '30%'\r\n                          },{\r\n                            'CODE': '40',\r\n                            'NAME': '40%'\r\n                          },{\r\n                            'CODE': '50',\r\n                            'NAME': '50%'\r\n                          },{\r\n                            'CODE': '60',\r\n                            'NAME': '60%'\r\n                          },{\r\n                            'CODE': '70',\r\n                            'NAME': '70%'\r\n                          },{\r\n                            'CODE': '80',\r\n                            'NAME': '80%'\r\n                          },{\r\n                            'CODE': '90',\r\n                            'NAME': '90%'\r\n                          },{\r\n                            'CODE': '100',\r\n                            'NAME': '100%'\r\n                          }]}\r\n                          // emptyRow\r\n                    />\r\n                  </li>\r\n                  {/* <li>\r\n                    <h5>하차구역</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_out'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '하차구역 검색(SECTOR)'\r\n                          data    = ''\r\n                          onFocus = {ComboCreate => {\r\n                            YK_WEB_REQ('tally_process_pop.jsp?division=P530', {})\r\n                              .then(res => {\r\n                                ComboCreate({data   : res.data.dataSend,\r\n                                            value  : 'itemCode',\r\n                                            display: 'item'});\r\n                              })\r\n                          }}\r\n                  />\r\n                  </li> */}\r\n                  <li>\r\n                    <h5>차종구분</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_car'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '차종선택'\r\n                          oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                            p_division    : 'P700'\r\n                          })}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>반품구분</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '일부,전량 선택'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P110'\r\n                            })}\r\n                            emptyRow\r\n                            onChange = {e => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_rtn2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value === ''){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                combo.setDisabled(false);\r\n                              }\r\n                              // combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                            }}\r\n                    />\r\n                  </div>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn2'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P120'\r\n                            })}\r\n                            isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>경고</h5>\r\n                    <Checkbox pgm   = {this.props.pgm}\r\n                              id    = 'detail_warning'\r\n                              width = '30px'\r\n                              height= '30px'\r\n\r\n                    />\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              \r\n              <Chit pgm={this.props.pgm} id={'chit_memo'} reducer='INSP_PROC_MAIN'/>\r\n              \r\n              <div className='input_list' id={`content3_${this.props.pgm}`}>\r\n                <DispInfo pgm={this.props.pgm} />\r\n              </div>\r\n\r\n              <div className='input_list' id={`content4_${this.props.pgm}`}>\r\n                <DispImg pgm={this.props.pgm} />\r\n              </div>\r\n            </div>\r\n            \r\n            <CompleteBtn pgm={this.props.pgm}/>\r\n          </div>\r\n\r\n          \r\n          <div className='cctv_viewer'>\r\n            <h4>실시간 CCTV</h4>\r\n            <div className='manual_record'>\r\n              <h5>수동녹화</h5>\r\n              <button \r\n                type='button' \r\n                className='record'\r\n                onClick={e => this.startRec()}\r\n              >녹화</button>\r\n              <button \r\n                type='button' \r\n                className='stop on'\r\n                onClick={e => this.stopRec()}\r\n              >정지</button>\r\n            </div>\r\n            <RainInfo />\r\n            <div className='cctv_list' \r\n            >\r\n              {this.state.device[0] !== undefined && \r\n                <RecImage \r\n                  seq={1}\r\n                  device={this.state.device[0].camera.Guid} \r\n                  Name={this.state.device[0].camera.Name}\r\n                  rtspAddr={this.state.device[0].rtspAddr}\r\n                  cameraPort={this.state.device[0].cameraPort}\r\n                  cameraNam={this.state.device[0].cameraNam}\r\n                  cam='STD_CAM_OPEN' \r\n                  focus='STD_CAM_FOCUS' \r\n                  rec='STD_CAM_REC' \r\n                  image='STD_CAM_IMG'/> \r\n              }\r\n              {this.state.device[1] !== undefined && \r\n                <RecImage\r\n                  seq={2} \r\n                  device={this.state.device[1].camera.Guid} \r\n                  Name={this.state.device[1].camera.Name}\r\n                  rtspAddr={this.state.device[1].rtspAddr}\r\n                  cameraPort={this.state.device[1].cameraPort}\r\n                  cameraNam={this.state.device[1].cameraNam}\r\n                  cam='DUM_CAM_OPEN' \r\n                  focus='DUM_CAM_FOCUS' \r\n                  rec='DUM_CAM_REC' \r\n                  image='DUM_CAM_IMG'/> \r\n              }\r\n            </div>\r\n            <div className='cctv_other_list'>\r\n              <ul>\r\n                <li>\r\n                  {this.state.device[2] !== undefined && \r\n                    <RecImage\r\n                      seq={3} \r\n                      device={this.state.device[2].camera.Guid} \r\n                      Name={this.state.device[2].camera.Name}\r\n                      rtspAddr={this.state.device[2].rtspAddr}\r\n                      cameraPort={this.state.device[2].cameraPort}\r\n                      cameraNam={this.state.device[2].cameraNam}\r\n                      cam='ETC1_CAM_OPEN' \r\n                      focus='ETC1_CAM_FOCUS' \r\n                      rec='ETC1_CAM_REC' \r\n                      image='ETC1_CAM_IMG'/> \r\n                  }\r\n                </li>\r\n                <li>\r\n                  {this.state.device[3] !== undefined && \r\n                    <RecImage\r\n                      seq={4} \r\n                      device={this.state.device[3].camera.Guid} \r\n                      Name={this.state.device[3].camera.Name}\r\n                      rtspAddr={this.state.device[3].rtspAddr}\r\n                      cameraPort={this.state.device[3].cameraPort}\r\n                      cameraNam={this.state.device[3].cameraNam}\r\n                      cam='ETC2_CAM_OPEN' \r\n                      focus='ETC2_CAM_FOCUS' \r\n                      rec='ETC2_CAM_REC' \r\n                      image='ETC2_CAM_IMG'/> \r\n                  }\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default INSP_PROC;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\Report\\Botspan.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\IMS\\SHIP_PROC\\Botspan.js",[],"D:\\Project\\01.YK\\react\\src\\Program\\COMM\\NOTI\\NOTICE.js",["758","759"],"//#region import\r\nimport React, { Component } from 'react';\r\n\r\nimport Input from '../../../Component/Control/Input';\r\nimport DateTime from '../../../Component/Control/DateTime';\r\n\r\nimport { gfc_initPgm, gfc_showMask, gfc_hideMask, gfc_getAtt } from '../../../Method/Comm';\r\nimport { gfs_injectAsyncReducer, gfs_getStoreValue } from '../../../Method/Store';\r\nimport { gfg_getGrid, gfg_getRow, gfg_appendRow, gfg_getModyfiedRow, gfg_setSelectRow, gfg_getRowCount } from '../../../Method/Grid';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport Layout from '../../../Component/Layout/Layout';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Combobox as columnCombobox }  from '../../../Component/Grid/Column/Combobox';\r\nimport { Number as columnNumber} from '../../../Component/Grid/Column/Number';\r\nimport { Checkbox as columnCheckbox } from '../../../Component/Grid/Column/Checkbox';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\n// import Mainspan from './Mainspan';\r\n// import Botspan from '../Common/Botspan';\r\n\r\nimport { getDynamicSql_Oracle } from '../../../db/Oracle/Oracle';\r\nimport { getSp_Oracle } from '../../../db/Oracle/Oracle';\r\n//#endregion\r\n\r\nclass NOTICE extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this)\r\n\r\n    //#region 리듀서\r\n    const NOTICE_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'NOTICE_MAIN') {\r\n        return {\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n        };\r\n      }\r\n\r\n      if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('NOTICE_MAIN', NOTICE_MAIN);\r\n    //#endregion\r\n  }\r\n\r\n  componentDidMount(){\r\n    \r\n  }\r\n\r\n  callOracle = async(file, fn, param) => {\r\n    let result = await getDynamicSql_Oracle(\r\n      file,\r\n      fn,\r\n      param\r\n    ); \r\n\r\n    return result;\r\n  }\r\n\r\n  Delete = () => {\r\n    // const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n    // const selectRow = gfg_getRow(grid);\r\n    // if(selectRow === null){\r\n    //   alert('선택된건이 없습니다.');\r\n    //   return;\r\n    // }\r\n\r\n    // if(selectRow.phantom){\r\n    //   grid.removeRow(selectRow['rowKey']);\r\n    //   return;\r\n    // }else{\r\n    //   this.callOracle(\r\n    //     'Common/Common',\r\n    //     'ZM_IMS_CAMERA_DELETE',\r\n    //     [{\r\n    //       AREA_TP: selectRow.AREA_TP,\r\n    //       CAMERA_IP: selectRow.CAMERA_IP\r\n    //     }]\r\n    //   )\r\n    // }\r\n    \r\n    // grid.resetOriginData()\r\n    // grid.restore();\r\n\r\n    // this.Retrieve();\r\n  }\r\n\r\n  Save = async() => {\r\n    const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n    const dtlGrid = gfg_getGrid(this.props.pgm, 'detail10');\r\n\r\n    if(gfg_getRowCount(mainGrid) === 0){\r\n      alert('데이터가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    if(gfg_getRowCount(dtlGrid) === 0){\r\n      alert('데이터가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    const dtlMod = gfg_getModyfiedRow(dtlGrid);\r\n    if(dtlMod.length === 0){\r\n      alert('추가되거나 수정된건 이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    let param = [];\r\n\r\n    dtlMod.forEach(e => {\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_NOTICE_DETAIL10(\r\n                    :p_COP_CD,\r\n                    :p_RowStatus,\r\n                    :p_NOTICE_GRP,\r\n                    :p_NOTICE_ID,\r\n                    :p_NOTICE_NAM,\r\n                    :p_USE_YN,\r\n                    :p_PGM_ID,\r\n                    :p_PGM_ROOT,\r\n                    :p_NOTICE_SEQ, \r\n                    :p_RETAUT_YN,\r\n                    :p_INSAUT_YN,\r\n                    :p_SAVAUT_YN,\r\n                    :p_DELAUT_YN,\r\n                    :p_USER_ID,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n          p_RowStatus : e.rowStatus,\r\n          p_NOTICE_GRP  : gfg_getRow(mainGrid).NOTICE_ID,\r\n          p_NOTICE_ID   : e.NOTICE_ID,\r\n          p_NOTICE_NAM  : e.NOTICE_NAM,\r\n          p_USE_YN    : e.USE_YN,\r\n          p_PGM_ID    : e.PGM_ID,\r\n          p_PGM_ROOT  : e.PGM_ROOT,\r\n          p_NOTICE_SEQ  : e.NOTICE_SEQ,\r\n          p_RETAUT_YN : e.RETAUT_YN,\r\n          p_INSAUT_YN : e.INSAUT_YN,\r\n          p_SAVAUT_YN : e.SAVAUT_YN,\r\n          p_DELAUT_YN : e.DELAUT_YN,\r\n          p_USER_ID   : gfs_getStoreValue('USER_REDUCER', 'USER_ID')\r\n        },\r\n        errSeq: e.rowKey\r\n      })\r\n    })\r\n\r\n    gfc_showMask();\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS !== 'Y'){\r\n      alert(gfc_getAtt(result.data.MSG_CODE));\r\n      gfg_setSelectRow(dtlGrid, result.data.COL_NAM, result.data.SEQ);\r\n      gfc_hideMask();\r\n\r\n      return;\r\n    }else{\r\n      alert(gfc_getAtt(result.data.MSG_CODE));\r\n      \r\n      this.Retrieve();\r\n    }\r\n  }\r\n\r\n\r\n  DtlDelete = async (e) => {\r\n\r\n    const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n    const detailGrid = gfg_getGrid(this.props.pgm, 'detail10');\r\n    const selectRow = gfg_getRow(detailGrid);\r\n    if(selectRow === null){\r\n      alert('선택된건이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    if(selectRow.phantom){\r\n      detailGrid.removeRow(selectRow['rowKey']);\r\n      return;\r\n    }else{\r\n\r\n      if(window.confirm('삭제하시겠습니까?') === false){\r\n        return;\r\n      }\r\n\r\n      gfc_showMask();\r\n\r\n      let param = [];\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_NOTICE_DETAIL10(\r\n                    :p_COP_CD,\r\n                    :p_RowStatus,\r\n                    :p_NOTICE_GRP,\r\n                    :p_NOTICE_ID,\r\n                    :p_NOTICE_NAM,\r\n                    :p_USE_YN,\r\n                    :p_PGM_ID,\r\n                    :p_PGM_ROOT,\r\n                    :p_NOTICE_SEQ, \r\n                    :p_RETAUT_YN,\r\n                    :p_INSAUT_YN,\r\n                    :p_SAVAUT_YN,\r\n                    :p_DELAUT_YN,\r\n                    :p_USER_ID,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n          p_RowStatus : 'D',\r\n          p_NOTICE_GRP  : gfg_getRow(mainGrid).NOTICE_ID,\r\n          p_NOTICE_ID   : gfg_getRow(detailGrid).NOTICE_ID,\r\n          p_NOTICE_NAM  : '',\r\n          p_USE_YN    : '',\r\n          p_PGM_ID    : '',\r\n          p_PGM_ROOT  : '',\r\n          p_NOTICE_SEQ  : '',\r\n          p_RETAUT_YN : '',\r\n          p_INSAUT_YN : '',\r\n          p_SAVAUT_YN : '',\r\n          p_DELAUT_YN : '',\r\n          p_USER_ID   : ''\r\n        },\r\n        errSeq: 0\r\n      })\r\n      \r\n      const result = await getSp_Oracle(param);\r\n      if(result.data.SUCCESS !== 'Y'){\r\n        alert(gfc_getAtt(result.data.MSG_CODE));\r\n        gfc_hideMask();\r\n  \r\n        return;\r\n      }\r\n  \r\n      detailGrid.removeRow(selectRow['rowKey']);\r\n      gfc_hideMask();\r\n    }\r\n  }\r\n\r\n  DtlInsert = () => {\r\n    const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n    const dtlGrid = gfg_getGrid(this.props.pgm, 'detail10');\r\n\r\n    const mainRow = gfg_getRow(mainGrid);\r\n    if(mainRow === null){\r\n      alert('선택된건이 없습니다.');\r\n      return;\r\n    }\r\n\r\n    gfg_appendRow(dtlGrid, dtlGrid.getRowCount(), { RETAUT_YN:'Y', INSAUT_YN: 'Y', SAVAUT_YN: 'Y', DELAUT_YN: 'Y'}, 'NOTICE_ID');\r\n\r\n  }\r\n\r\n  Retrieve = async () => {\r\n    gfc_showMask();\r\n\r\n    const mainGrid = gfg_getGrid(this.props.pgm, 'main10');\r\n    const dtlGrid  = gfg_getGrid(this.props.pgm, 'detail10');\r\n    mainGrid.clear();\r\n    dtlGrid.clear();\r\n\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_NOTICE_MAIN10(\r\n                  :p_COP_CD,\r\n                  :p_RowStatus,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n        p_RowStatus : 'R'\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS !== 'Y'){\r\n      alert(gfc_getAtt(result.data.MSG_CODE));\r\n      gfc_hideMask();\r\n\r\n      return;\r\n    }\r\n\r\n    mainGrid.clear();\r\n\r\n    mainGrid.resetData(result.data.ROWS);\r\n    mainGrid.resetOriginData()\r\n    mainGrid.restore();\r\n\r\n    gfg_setSelectRow(mainGrid);\r\n    // gfg_setSelectRow(mainGrid);\r\n\r\n    gfc_hideMask();\r\n  }\r\n  \r\n  onSelectChange = async (e) => {\r\n    const dtlGrid  = gfg_getGrid(this.props.pgm, 'detail10');\r\n    dtlGrid.clear();\r\n    \r\n    gfc_showMask();\r\n\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_NOTICE_DETAIL10(\r\n                  :p_COP_CD,\r\n                  :p_RowStatus,\r\n                  :p_NOTICE_GRP,\r\n                  :p_NOTICE_ID,\r\n                  :p_NOTICE_NAM,\r\n                  :p_USE_YN,\r\n                  :p_PGM_ID,\r\n                  :p_PGM_ROOT,\r\n                  :p_NOTICE_SEQ, \r\n                  :p_RETAUT_YN,\r\n                  :p_INSAUT_YN,\r\n                  :p_SAVAUT_YN,\r\n                  :p_DELAUT_YN,\r\n                  :p_USER_ID,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_COP_CD    : gfs_getStoreValue('USER_REDUCER', 'COP_CD'),\r\n        p_RowStatus : 'R',\r\n        p_NOTICE_GRP  : e.NOTICE_ID,\r\n        p_NOTICE_ID   : '',\r\n        p_NOTICE_NAM  : '',\r\n        p_USE_YN    : '',\r\n        p_PGM_ID    : '',\r\n        p_PGM_ROOT  : '',\r\n        p_NOTICE_SEQ  : 0,\r\n        p_RETAUT_YN : '',\r\n        p_INSAUT_YN : '',\r\n        p_SAVAUT_YN : '',\r\n        p_DELAUT_YN : '',\r\n        p_USER_ID   : gfs_getStoreValue('USER_REDUCER', 'USER_ID')\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS !== 'Y'){\r\n      gfc_hideMask();\r\n\r\n      return;\r\n    }\r\n\r\n    const grid = gfg_getGrid(this.props.pgm, 'detail10');\r\n    grid.resetData(result.data.ROWS);\r\n    gfg_setSelectRow(grid);\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager type3'>\r\n          <div style={{paddingBottom:'0'}} className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp type2' >\r\n                <div style={{position:'absolute', left:0, top:0, width:'360px', height:'42px', fontSize:'16px'}}>\r\n                  <div>\r\n                    <DateTime pgm={this.props.pgm}\r\n                              id='search_fr_dt' />                  \r\n                    <DateTime pgm={this.props.pgm}\r\n                              id='search_to_dt' />\r\n                  </div>  \r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '작성자'\r\n                            },{\r\n                              code: '2',\r\n                              name: '제목'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className='grid' style={{paddingBottom:'0'}}>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Layout split       ='vertical'\r\n                          minSize     ={[54]}\r\n                          defaultSize ={'30%'}\r\n                  >\r\n                    <Grid pgm={this.props.pgm}\r\n                          id ='main10'\r\n                          selectionChange={(e) => {\r\n                            this.onSelectChange(e);\r\n                          }}\r\n                          rowHeight={30}\r\n                          rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                          columns={[\r\n                            columnCombobox({\r\n                              name: 'NOTICE_ID', \r\n                              header: '메뉴그룹',\r\n                              value   : 'COMM_DTL_CD',\r\n                              display : 'COMM_DTL_NAM',\r\n                              width   : 150, \r\n                              readOnly: true,\r\n                              oracleData : getDynamicSql_Oracle(\r\n                                'COMM/COMM',\r\n                                'ZM_IMS_CODE_SELECT',\r\n                                [{COMM_CD: '1'}]),\r\n                              editor: {\r\n                                value   : 'COMM_DTL_CD',\r\n                                display : 'COMM_DTL_NAM'\r\n                              }\r\n                            }),\r\n                            columnInput({\r\n                              name: 'NOTICE_NAM',\r\n                              header: '메뉴그룹명',\r\n                              width : 250,\r\n                              readOnly: true,\r\n                              align : 'left',\r\n                            })\r\n                          ]}\r\n                    />\r\n\r\n                    <div style={{width:'50%', height:'100%', background:'yellow'}}>\r\n                      <div style={{width:'100%', height:'30px'}}>\r\n                        <span style={{width:'100%', height:'30px'}}>작성자</span>\r\n                      </div>\r\n                    </div>\r\n                  </Layout>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NOTICE;","D:\\Project\\01.YK\\react\\src\\Program\\IMS\\INSP_PROC\\INSP_PROC copy.js",["760","761","762","763","764"],"//#region import\r\nimport React, { Component } from 'react';\r\nimport Input from '../../../Component/Control/Input';\r\nimport Checkbox from '../../../Component/Control/Checkbox';\r\n\r\nimport { gfc_initPgm, gfc_sleep, gfc_showMask, gfc_yk_call_sp, gfc_hideMask, gfc_chit_yn_YK, gfc_ftp_file_yn_YK } from '../../../Method/Comm';\r\nimport { gfs_getStoreValue, gfs_injectAsyncReducer, gfs_dispatch, gfs_subscribe, gfs_PGM_REDUCER } from '../../../Method/Store';\r\nimport { gfo_getCombo, gfo_getInput, gfo_getCheckbox } from '../../../Method/Component';\r\nimport { gfg_appendRow, gfg_getGrid, gfg_setSelectRow } from '../../../Method/Grid';\r\nimport { getDynamicSql_Oracle, getSp_Oracle } from '../../../db/Oracle/Oracle';\r\n\r\nimport Grid from '../../../Component/Grid/Grid';\r\nimport Layout from '../../../Component/Layout/Layout';\r\nimport { Input as columnInput } from '../../../Component/Grid/Column/Input';\r\nimport { Image as columnImage } from '../../../Component/Grid/Column/Image';\r\nimport { Combobox as columnCombobox }  from '../../../Component/Grid/Column/Combobox';\r\nimport { TextArea as columnTextArea } from '../../../Component/Grid/Column/TextArea';\r\nimport { DateTime as columnDateTime } from '../../../Component/Grid/Column/DateTime';\r\n\r\nimport Combobox from '../../../Component/Control/Combobox';\r\n\r\nimport Mainspan from '../Common/Mainspan';\r\nimport Detailspan from '../Common/Detailspan';\r\nimport Botspan from '../Common/Botspan';\r\nimport Chit from '../Common/Chit/Chit';\r\nimport CompleteBtn from './CompleteBtn';\r\nimport TabList from '../Common/TabList';\r\nimport DispInfo from './DispInfo';\r\nimport DispImg from './DispImg';\r\nimport RecImage from './RecImage';\r\nimport RainInfo from './RainInfo';\r\n\r\nimport GifPlayer from 'react-gif-player';\r\n\r\nimport { ReRec, RecodingList } from '../../../WebReq/WebReq';\r\nimport { TOKEN, MILESTONE } from '../../../WebReq/WebReq';\r\nimport { throttle } from 'lodash';\r\nimport { setSessionCookie } from '../../../Cookies';\r\nimport { getDynamicSql_Mysql } from '../../../db/Mysql/Mysql';\r\n//#endregion\r\n\r\nclass INSP_PROC extends Component {\r\n\r\n  state = {\r\n    wait_list: [],\r\n    device: []\r\n  }\r\n\r\n  milestoneInfo = async() => {\r\n\r\n    // 선택된 공정의 카메라를 찾아서 스트리밍 받는다\r\n    // 지금은 하드코딩 되어있지만 나중엔 로컬스토리지와 콤보박스를 써서 선택된 공정의 아이피를 가지고 카메라를 가져온다.\r\n    // 1. 선택된 공정의 카메라 정보를 가지고온다.\r\n    // const milestone = TOKEN({reqAddr: 'LOGIN', MilestoneIP: gfs_getStoreValue('CAMERA_REDUCER', 'MilestoneIP')});\r\n    const milestone = await TOKEN({});\r\n    this.token  = milestone.data.TOKEN;\r\n    this.device = milestone.data.DEVICE;\r\n    if(this.token === ''){\r\n      alert('마일스톤 서버에 접속할 수 없습니다.'); \r\n    }else if(this.device === ''){\r\n      alert('마일스톤 서버에 접속할 수 없습니다.');\r\n    }else{\r\n      const areaTp = gfs_getStoreValue('USER_REDUCER', 'AREA_TP');\r\n      const select = await this.callOracle('Common/Common', 'ZM_IMS_CAMERA_SELECT_EACH', [{AREA_TP:areaTp}]);\r\n      if(select.data === undefined){\r\n        alert('설정된 카메라가 없습니다.');\r\n        return;\r\n      }\r\n\r\n      if(select.data.rows.length === 0){\r\n        alert('설정된 카메라가 없습니다.');\r\n        return;\r\n      }\r\n      let data = [];\r\n      for(let i = 0; i < select.data.rows.length; i++){\r\n  \r\n        let col = {};\r\n        for(let j = 0; j < select.data.rows[i].length; j++){\r\n          col[select.data.metaData[j].name] = select.data.rows[i][j];\r\n        }\r\n        data.push(col);\r\n      }\r\n\r\n      let ipArr = [];\r\n      let cameraPort = [];\r\n      let cameraNam = [];\r\n      let rtspAddr = [];\r\n\r\n      for(let i = 0; i < data.length; i++){\r\n        ipArr.push(data[i].CAMERA_IP);\r\n        cameraPort.push(data[i].CAMERA_PORT);\r\n        cameraNam.push(data[i].CAMERA_NAM);\r\n        rtspAddr.push(data[i].RTSP_ADDR);\r\n      }\r\n\r\n      // let ipArr = ['10.10.136.112', '10.10.136.128'];\r\n      // let rtspUrl = ['rtsp://admin:admin13579@10.10.136.112:554/profile2/media.smp', 'rtsp://admin:pass@10.10.136.128:554/video1'];\r\n      // let rtspPort = [3100, 3101];\r\n      this.infoArr = [];\r\n\r\n      for(let i = 0; i < ipArr.length; i++){\r\n        const camera = this.device.find(e1 => e1.Name.indexOf(ipArr[i]) >= 0);\r\n        if(camera){\r\n          this.infoArr.push({\r\n            camera, \r\n            ipArr: ipArr[i], \r\n            cameraPort: cameraPort[i], \r\n            cameraNam: cameraNam[i], \r\n            rtspAddr: rtspAddr[i]\r\n          }); \r\n        }\r\n      }\r\n\r\n      if(this.infoArr.length > 0){\r\n        // this.setState(this.state.device = this.infoArr);\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DEVICE', {DEVICE: this.infoArr});\r\n      }\r\n    }\r\n  }\r\n\r\n  //#region onActivePage 스토어 subscribe로 실행됨.\r\n  onActivePage = () => {\r\n    const activeWindow = gfs_getStoreValue('WINDOWFRAME_REDUCER', 'activeWindow');\r\n    if(activeWindow.programId === 'INSP_PROC'){\r\n      window.onkeydown = e => this.onKeyDown(e);\r\n      window.onmousewheel = e => this.onMouseWheel(e);\r\n    }\r\n  }\r\n\r\n  onCameraChange = () => {\r\n    const cameraDevice = gfs_getStoreValue('INSP_PROC_MAIN', 'DEVICE');\r\n    if(cameraDevice !== undefined){\r\n      if(cameraDevice === 0) return;\r\n\r\n      if(JSON.stringify(cameraDevice) !== JSON.stringify(this.state.device)){\r\n        this.setState({\r\n          device: cameraDevice\r\n        });\r\n      }\r\n    } \r\n  }\r\n  //#endregion\r\n\r\n  //#region PTZ\r\n  debounceKeyDown = throttle((e, device) => {\r\n    let ptz = '';\r\n    if(e.keyCode === 37) ptz = 'left';\r\n    else if(e.keyCode === 38) ptz = 'up';\r\n    else if(e.keyCode === 39) ptz = 'right';\r\n    else if(e.keyCode === 40) ptz = 'down';\r\n\r\n    if(ptz !== ''){\r\n      MILESTONE({reqAddr: 'PTZ',\r\n      device: device.Guid,\r\n      ptz})\r\n    }\r\n  }, 1000);\r\n\r\n  // debounceMouseWheel = throttle((e, device) => {\r\n  //   let ptz = '';\r\n  //   if(e.deltaX === -0){\r\n  //     if (e.wheelDelta > 0){\r\n  //       ptz = 'zoomin';\r\n  //     }else{\r\n  //       ptz = 'zoomout';\r\n  //     }\r\n  //   }\r\n\r\n  //   if(ptz !== ''){\r\n  //     MILESTONE({reqAddr: 'PTZ',\r\n  //     device: device.Guid,\r\n  //     ptz})\r\n  //   }\r\n  // }, 1000);\r\n\r\n\r\n  // debounceKeyDown = (e, device) => {\r\n  //   let ptz = '';\r\n  //   if(e.keyCode === 37) ptz = 'left';\r\n  //   else if(e.keyCode === 38) ptz = 'up';\r\n  //   else if(e.keyCode === 39) ptz = 'right';\r\n  //   else if(e.keyCode === 40) ptz = 'down';\r\n\r\n  //   if(ptz !== ''){\r\n  //     MILESTONE({reqAddr: 'PTZ',\r\n  //     device: device.Guid,\r\n  //     ptz})\r\n  //   }\r\n  // };\r\n\r\n  debounceMouseWheel = (e, device) => {\r\n    let ptz = '';\r\n    if(e.deltaX === -0){\r\n      if (e.wheelDelta > 0){\r\n        ptz = 'zoomin';\r\n      }else{\r\n        ptz = 'zoomout';\r\n      }\r\n    }\r\n\r\n    if(ptz !== ''){\r\n      MILESTONE({reqAddr: 'PTZ',\r\n      device: device.Guid,\r\n      ptz})\r\n    }\r\n  };\r\n\r\n  onKeyDown = (e) => {\r\n    e.stopPropagation();\r\n\r\n    const STD_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'STD_CAM_FOCUS');\r\n    const DUM_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'DUM_CAM_FOCUS');\r\n    \r\n    if(STD_CAM_FOCUS || DUM_CAM_FOCUS){\r\n      this.debounceKeyDown(e, STD_CAM_FOCUS ? this.infoArr[0].camera : this.infoArr[1].camera);\r\n    }\r\n  }\r\n\r\n  onMouseWheel = (e) => {\r\n    e.stopPropagation();\r\n\r\n    const STD_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'STD_CAM_FOCUS');\r\n    const DUM_CAM_FOCUS = gfs_getStoreValue('INSP_PROC_MAIN', 'DUM_CAM_FOCUS');\r\n\r\n    if(STD_CAM_FOCUS || DUM_CAM_FOCUS){\r\n      this.debounceMouseWheel(e, STD_CAM_FOCUS ? this.infoArr[0].camera : this.infoArr[1].camera);\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region 녹화제어\r\n  startRec = async () => {\r\n    \r\n    const scaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n    const camera_no = gfs_getStoreValue('USER_REDUCER', 'CAMERA_NO');\r\n    if(scaleNumb === ''){\r\n      alert('선택된 계근번호가 없습니다.');\r\n      return;\r\n    }\r\n    if(camera_no === '' || camera_no === null){\r\n      alert('설정된 차량인식 카메라가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    //기존저장된 파일있는지 확인.\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_REC(\r\n                  :p_RowStatus,\r\n                  :p_scaleNumb,\r\n                  :p_seq,\r\n                  :p_cameraNo,\r\n                  :p_cameraDevice,\r\n                  :p_cameraName,\r\n                  :p_UserId,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_RowStatus    : 'R2',\r\n        p_scaleNumb    : scaleNumb,\r\n        p_seq          : 0,\r\n        p_cameraNo     : '',\r\n        p_cameraDevice : '',\r\n        p_cameraName   : '',\r\n        p_UserId       : ''\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS === 'N'){\r\n      if(result.data.MSG_CODE === '1'){\r\n        if(window.confirm(result.data.MSG_TEXT) === true){\r\n          const recYn = await ReRec(scaleNumb);\r\n          //0. 파일명은 변경된 상태\r\n          if(recYn.data.Response === 'OK'){\r\n            //1. DB에 녹화시작으로 저장\r\n            let param = [];\r\n            param.push({\r\n              sp   : `begin \r\n                        SP_ZM_IMS_REC(\r\n                          :p_RowStatus,\r\n                          :p_scaleNumb,\r\n                          :p_seq,\r\n                          :p_cameraNo,\r\n                          :p_cameraDevice,\r\n                          :p_cameraName,\r\n                          :p_UserId,\r\n                          \r\n                          :p_select,\r\n                          :p_SUCCESS,\r\n                          :p_MSG_CODE,\r\n                          :p_MSG_TEXT,\r\n                          :p_COL_NAM\r\n                        );\r\n                      end;\r\n                      `,\r\n              data : {\r\n                p_RowStatus    : 'I2',\r\n                p_scaleNumb    : scaleNumb,\r\n                p_seq          : 0,\r\n                p_cameraNo     : camera_no,\r\n                p_cameraDevice : '',\r\n                p_cameraName   : '',\r\n                p_UserId       : ''\r\n              },\r\n              errSeq: 0\r\n            })\r\n            \r\n            const result = await getSp_Oracle(param);\r\n\r\n            if(result.data.SUCCESS === 'N'){\r\n              alert('수동녹화 시작에 실패했습니다.');\r\n            }\r\n          }\r\n        }else{\r\n          return;\r\n        }\r\n      }else{\r\n        if(window.confirm(result.data.MSG_TEXT) === true){\r\n          //1. DB에 녹화시작으로 저장\r\n          let param = [];\r\n          param.push({\r\n            sp   : `begin \r\n                      SP_ZM_IMS_REC(\r\n                        :p_RowStatus,\r\n                        :p_scaleNumb,\r\n                        :p_seq,\r\n                        :p_cameraNo,\r\n                        :p_cameraDevice,\r\n                        :p_cameraName,\r\n                        :p_UserId,\r\n                        \r\n                        :p_select,\r\n                        :p_SUCCESS,\r\n                        :p_MSG_CODE,\r\n                        :p_MSG_TEXT,\r\n                        :p_COL_NAM\r\n                      );\r\n                    end;\r\n                    `,\r\n            data : {\r\n              p_RowStatus    : 'I3',\r\n              p_scaleNumb    : scaleNumb,\r\n              p_seq          : 0,\r\n              p_cameraNo     : camera_no,\r\n              p_cameraDevice : '',\r\n              p_cameraName   : '',\r\n              p_UserId       : ''\r\n            },\r\n            errSeq: 0\r\n          })\r\n          \r\n          const result = await getSp_Oracle(param);\r\n\r\n          if(result.data.SUCCESS === 'N'){\r\n            alert('수동녹화 시작에 실패했습니다.');\r\n          }\r\n        }else{\r\n          return;\r\n        }\r\n      }\r\n    }else{\r\n        //1. DB에 녹화시작으로 저장\r\n        let param = [];\r\n        param.push({\r\n          sp   : `begin \r\n                    SP_ZM_IMS_REC(\r\n                      :p_RowStatus,\r\n                      :p_scaleNumb,\r\n                      :p_seq,\r\n                      :p_cameraNo,\r\n                      :p_cameraDevice,\r\n                      :p_cameraName,\r\n                      :p_UserId,\r\n                      \r\n                      :p_select,\r\n                      :p_SUCCESS,\r\n                      :p_MSG_CODE,\r\n                      :p_MSG_TEXT,\r\n                      :p_COL_NAM\r\n                    );\r\n                  end;\r\n                  `,\r\n          data : {\r\n            p_RowStatus    : 'I2',\r\n            p_scaleNumb    : scaleNumb,\r\n            p_seq          : 0,\r\n            p_cameraNo     : camera_no,\r\n            p_cameraDevice : '',\r\n            p_cameraName   : '',\r\n            p_UserId       : ''\r\n          },\r\n          errSeq: 0\r\n        })\r\n        \r\n        const result = await getSp_Oracle(param);\r\n\r\n        if(result.data.SUCCESS === 'N'){\r\n          alert('수동녹화 시작에 실패했습니다.');\r\n        }\r\n    }\r\n  }\r\n\r\n  stopRec = async () => {\r\n    const scaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n    const camera_no = gfs_getStoreValue('USER_REDUCER', 'CAMERA_NO');\r\n    if(scaleNumb === ''){\r\n      alert('선택된 계근번호가 없습니다.');\r\n      return;\r\n    }\r\n    if(camera_no === '' || camera_no === null){\r\n      alert('설정된 차량인식 카메라가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    //기존저장된 파일있는지 확인.\r\n    let param = [];\r\n    param.push({\r\n      sp   : `begin \r\n                SP_ZM_IMS_REC(\r\n                  :p_RowStatus,\r\n                  :p_scaleNumb,\r\n                  :p_seq,\r\n                  :p_cameraNo,\r\n                  :p_cameraDevice,\r\n                  :p_cameraName,\r\n                  :p_UserId,\r\n                  \r\n                  :p_select,\r\n                  :p_SUCCESS,\r\n                  :p_MSG_CODE,\r\n                  :p_MSG_TEXT,\r\n                  :p_COL_NAM\r\n                );\r\n              end;\r\n              `,\r\n      data : {\r\n        p_RowStatus    : 'R4',\r\n        p_scaleNumb    : scaleNumb,\r\n        p_seq          : 0,\r\n        p_cameraNo     : '',\r\n        p_cameraDevice : '',\r\n        p_cameraName   : '',\r\n        p_UserId       : ''\r\n      },\r\n      errSeq: 0\r\n    })\r\n    \r\n    const result = await getSp_Oracle(param);\r\n    if(result.data.SUCCESS === 'N'){\r\n      alert('녹화중인 계량번호가 아닙니다.');\r\n      return;\r\n    }else{\r\n\r\n      let param = [];\r\n      param.push({\r\n        sp   : `begin \r\n                  SP_ZM_IMS_REC(\r\n                    :p_RowStatus,\r\n                    :p_scaleNumb,\r\n                    :p_seq,\r\n                    :p_cameraNo,\r\n                    :p_cameraDevice,\r\n                    :p_cameraName,\r\n                    :p_UserId,\r\n                    \r\n                    :p_select,\r\n                    :p_SUCCESS,\r\n                    :p_MSG_CODE,\r\n                    :p_MSG_TEXT,\r\n                    :p_COL_NAM\r\n                  );\r\n                end;\r\n                `,\r\n        data : {\r\n          p_RowStatus    : 'D3',\r\n          p_scaleNumb    : scaleNumb,\r\n          p_seq          : 0,\r\n          p_cameraNo     : '',\r\n          p_cameraDevice : '',\r\n          p_cameraName   : '',\r\n          p_UserId       : ''\r\n        },\r\n        errSeq: 0\r\n      })\r\n      \r\n      const result = await getSp_Oracle(param);\r\n\r\n      if(result.data.SUCCESS === 'N'){\r\n        alert('수동녹화 중지에 실패했습니다.');\r\n      }\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n\r\n\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    gfc_initPgm(props.pgm, props.nam, this);\r\n\r\n    //#region 리듀서\r\n    const INSP_PROC_MAIN = (nowState, action) => {\r\n\r\n      if(action.reducer !== 'INSP_PROC_MAIN') {\r\n        return {\r\n          ON_ACTIVE    : nowState === undefined ? {\r\n            active : true,\r\n            time   : new Date() \r\n          } : nowState.ON_ACTIVE,\r\n\r\n          DEVICE       : nowState === undefined ? 0 : nowState.DEVICE,\r\n\r\n          RAIN_INFO    : nowState === undefined ? 0 : nowState.RAIN_INFO,\r\n\r\n          MAIN_WAIT    : nowState === undefined ? 0 : nowState.MAIN_WAIT,\r\n          MAIN_TOTAL   : nowState === undefined ? 0 : nowState.MAIN_TOTAL,\r\n          MAIN_WEIGHT  : nowState === undefined ? 0 : nowState.MAIN_WEIGHT,\r\n          BOT_TOTAL    : nowState === undefined ? 0 : nowState.BOT_TOTAL,\r\n          PROC_WAIT    : nowState === undefined ? 0 : nowState.PROC_WAIT,\r\n          DEPT_WAIT    : nowState === undefined ? 0 : nowState.DEPT_WAIT,\r\n          ENTR_WAIT    : nowState === undefined ? 0 : nowState.ENTR_WAIT,\r\n          DRIV_WAIT    : nowState === undefined ? 0 : nowState.DRIV_WAIT,\r\n          CAR_TOTAL    : nowState === undefined ? 0 : nowState.CAR_TOTAL,\r\n          \r\n          DETAIL_SCALE : nowState === undefined ? '' : nowState.DETAIL_SCALE,\r\n          DETAIL_CARNO : nowState === undefined ? '' : nowState.DETAIL_CARNO,\r\n          DETAIL_WEIGHT: nowState === undefined ? '' : nowState.DETAIL_WEIGHT,\r\n          DETAIL_DATE  : nowState === undefined ? '' : nowState.DETAIL_DATE,\r\n\r\n          STD_CAM_IMG  : nowState === undefined ? null : nowState.STD_CAM_IMG,\r\n          DUM_CAM_IMG  : nowState === undefined ? null : nowState.DUM_CAM_IMG,\r\n          ETC1_CAM_IMG : nowState === undefined ? false : nowState.ETC1_CAM_IMG,\r\n          ETC2_CAM_IMG : nowState === undefined ? false : nowState.ETC2_CAM_IMG,\r\n\r\n          STD_CAM_OPEN : nowState === undefined ? false : nowState.STD_CAM_OPEN,\r\n          DUM_CAM_OPEN : nowState === undefined ? false : nowState.DUM_CAM_OPEN,\r\n          ETC1_CAM_OPEN : nowState === undefined ? false : nowState.ETC1_CAM_OPEN,\r\n          ETC2_CAM_OPEN : nowState === undefined ? false : nowState.ETC2_CAM_OPEN,\r\n\r\n          STD_CAM_FOCUS: nowState === undefined ? false : nowState.STD_CAM_FOCUS,\r\n          DUM_CAM_FOCUS: nowState === undefined ? false : nowState.DUM_CAM_FOCUS,\r\n          ETC1_CAM_FOCUS : nowState === undefined ? false : nowState.ETC1_CAM_FOCUS,\r\n          ETC2_CAM_FOCUS : nowState === undefined ? false : nowState.ETC2_CAM_FOCUS,\r\n\r\n          STD_CAM_REC  : nowState === undefined ? {\r\n            rec     : false,\r\n            time    : '00:00'\r\n          } : nowState.STD_CAM_REC,\r\n\r\n          DUM_CAM_REC  : nowState === undefined ? {\r\n            rec     : false,\r\n            time    : '00:00'\r\n          } : nowState.DUM_CAM_REC,\r\n\r\n          CHIT_MEMO    : nowState === undefined ? '' : nowState.CHIT_MEMO,\r\n          \r\n          CHIT_INFO    : nowState === undefined ? {\r\n            date     : '',\r\n            scaleNumb: '',\r\n            carNumb  : '',\r\n            vender   : '',\r\n            itemFlag : '',\r\n            Wgt      : '',\r\n            loc      : '',\r\n            user     : '',\r\n            chit     : 'N'\r\n          } : nowState.CHIT_INFO,\r\n          \r\n          DISP_INFO    : nowState === undefined ? {\r\n            scaleNumb       : '',\r\n            scrp_ord_no     : '',\r\n            scrp_grd_nm     : '',\r\n            real_vender_name: '',\r\n            load_area_nm    : '',\r\n            load_area_addr  : ''\r\n          } : nowState.DISP_INFO,\r\n\r\n          DISP_PIC    : nowState === undefined ? {\r\n            scaleNumb           : '',\r\n            scrp_ord_no         : '',\r\n            empty_front_date    : '',\r\n            empty_front         : '',\r\n            empty_front_gps_addr: '',\r\n            empty_rear_date     : '',\r\n            empty_rear          : '',\r\n            empty_rear_gps_addr : '',\r\n            cargo_front_date    : '',\r\n            cargo_front         : '',\r\n            cargo_front_gps_addr: '',\r\n            cargo_rear_date     : '',\r\n            cargo_rear          : '',\r\n            cargo_rear_gps_addr : ''\r\n          } : nowState.DISP_PIC\r\n        };\r\n      }\r\n\r\n      if(action.type === 'DEVICE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEVICE : action.DEVICE\r\n        })\r\n      }else if(action.type === 'RAIN_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          RAIN_INFO : action.RAIN_INFO\r\n        })\r\n      }else if(action.type === 'CAR_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CAR_TOTAL : action.CAR_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WAIT : action.MAIN_WAIT\r\n        })\r\n      }else if(action.type === 'DRIV_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DRIV_WAIT : action.DRIV_WAIT\r\n        })\r\n      }else if(action.type === 'MAIN_TOTAL'){\r\n        \r\n        return Object.assign({}, nowState, {\r\n          MAIN_TOTAL : action.MAIN_TOTAL\r\n        })\r\n      }else if(action.type === 'MAIN_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          MAIN_WEIGHT : action.MAIN_WEIGHT\r\n        })\r\n      }else if(action.type === 'BOT_TOTAL'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          BOT_TOTAL : action.BOT_TOTAL\r\n        })\r\n      }else if(action.type === 'PROC_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          PROC_WAIT : action.PROC_WAIT\r\n        })\r\n      }else if(action.type === 'DEPT_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DEPT_WAIT : action.DEPT_WAIT\r\n        })\r\n      }else if(action.type === 'ENTR_WAIT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ENTR_WAIT : action.ENTR_WAIT\r\n        })\r\n      }else if(action.type === 'DETAIL_SCALE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_SCALE : action.DETAIL_SCALE\r\n        })\r\n      }else if(action.type === 'DETAIL_CARNO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_CARNO : action.DETAIL_CARNO\r\n        })\r\n      }else if(action.type === 'DETAIL_WEIGHT'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_WEIGHT : action.DETAIL_WEIGHT\r\n        })\r\n      }else if(action.type === 'DETAIL_DATE'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DETAIL_DATE : action.DETAIL_DATE\r\n        })\r\n      }else if(action.type === 'STD_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_IMG : action.STD_CAM_IMG\r\n        })\r\n      }else if(action.type === 'DUM_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_IMG : action.DUM_CAM_IMG\r\n        })\r\n      }else if(action.type === 'ETC1_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC1_CAM_IMG : action.ETC1_CAM_IMG\r\n        })\r\n      }else if(action.type === 'ETC2_CAM_IMG'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC2_CAM_IMG : action.ETC2_CAM_IMG\r\n        })\r\n      }else if(action.type === 'STD_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_OPEN : action.STD_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'DUM_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_OPEN : action.DUM_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'ETC1_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC1_CAM_OPEN : action.ETC1_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'ETC2_CAM_OPEN'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC2_CAM_OPEN : action.ETC2_CAM_OPEN\r\n        })\r\n      }else if(action.type === 'STD_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_FOCUS : action.STD_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'DUM_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_FOCUS : action.DUM_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'ETC1_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC1_CAM_FOCUS : action.ETC1_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'ETC2_CAM_FOCUS'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          ETC2_CAM_FOCUS : action.ETC2_CAM_FOCUS\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.STD_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec  : action.rec,\r\n            //  car  : action.car,\r\n            time : nowState.DUM_CAM_REC.time\r\n          }\r\n        })\r\n      }else if(action.type === 'STD_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          STD_CAM_REC : {\r\n            rec     : nowState.STD_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }else if(action.type === 'DUM_CAM_REC_TIME'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DUM_CAM_REC : {\r\n            rec     : nowState.DUM_CAM_REC.rec,\r\n            //  car     : action.car,\r\n            time    : action.time\r\n          }\r\n        })\r\n      }\r\n      // else if(action.type === 'CHIT_INFO_ITEM_FLAG'){\r\n\r\n      //   return Object.assign({}, nowState, {\r\n      //     CHIT_INFO : {\r\n      //       date     :  nowState.CHIT_INFO.date,\r\n      //       scaleNumb:  nowState.CHIT_INFO.scaleNumb,\r\n      //       carNumb  :  nowState.CHIT_INFO.carNumb,\r\n      //       vender   :  nowState.CHIT_INFO.vender,\r\n      //       itemFlag :  action.itemFlag,\r\n      //       Wgt      :  nowState.CHIT_INFO.Wgt,\r\n      //       loc      :  nowState.CHIT_INFO.loc,\r\n      //       user     :  nowState.CHIT_INFO.user,\r\n      //       chit     :  nowState.CHIT_INFO.chit\r\n      //     }\r\n      //   })\r\n      // }\r\n      else if(action.type === 'CHIT_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          CHIT_INFO : {\r\n            date     : action.date,\r\n            scaleNumb: action.scaleNumb,\r\n            carNumb  : action.carNumb,\r\n            vender   : action.vender,\r\n            itemFlag : action.itemFlag,\r\n            Wgt      : action.Wgt,\r\n            loc      : action.loc,\r\n            user     : action.user,\r\n            chit     : action.chit\r\n          }\r\n        })\r\n      }else if(action.type === 'CHIT_MEMO'){\r\n        return Object.assign({}, nowState, {\r\n          CHIT_MEMO : action.CHIT_MEMO\r\n        })\r\n      }else if(action.type === 'DISP_INFO'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DISP_INFO : {\r\n            scaleNumb       : action.scaleNumb,\r\n            scrp_ord_no     : action.scrp_ord_no,\r\n            scrp_grd_nm     : action.scrp_grd_nm,\r\n            real_vender_name: action.real_vender_name,\r\n            load_area_nm    : action.load_area_nm,\r\n            load_area_addr  : action.load_area_addr  \r\n          }\r\n        })\r\n      }else if(action.type === 'DISP_PIC'){\r\n\r\n        return Object.assign({}, nowState, {\r\n          DISP_PIC : {\r\n            scaleNumb           : action.scaleNumb,\r\n            scrp_ord_no         : action.scrp_ord_no,\r\n            empty_front_date    : action.empty_front_date,\r\n            empty_front         : action.empty_front,\r\n            empty_front_gps_addr: action.empty_front_gps_addr,\r\n            empty_rear_date     : action.empty_rear_date,\r\n            empty_rear          : action.empty_rear,\r\n            empty_rear_gps_addr : action.empty_rear_gps_addr,\r\n            cargo_front_date    : action.cargo_front_date,\r\n            cargo_front         : action.cargo_front,\r\n            cargo_front_gps_addr: action.cargo_front_gps_addr,\r\n            cargo_rear_date     : action.cargo_rear_date,\r\n            cargo_rear          : action.cargo_rear,\r\n            cargo_rear_gps_addr : action.cargo_rear_gps_addr \r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    gfs_injectAsyncReducer('INSP_PROC_MAIN', INSP_PROC_MAIN);\r\n    gfs_subscribe(this.onActivePage);\r\n    gfs_subscribe(this.onCameraChange);\r\n    //#endregion\r\n  }\r\n\r\n  callOracle = async(file, fn, param) => {\r\n    let result = await getDynamicSql_Oracle(\r\n      file,\r\n      fn,\r\n      param\r\n    ); \r\n\r\n    return result;\r\n  }\r\n\r\n  Init = async() => {\r\n    await this.milestoneInfo();\r\n  }\r\n\r\n  //#region 개별조회\r\n  mainHeader = async() => {\r\n  \r\n    // const select = await gfc_yk_call_sp('sp_zm_mstr_header');\r\n    const select = await gfc_yk_call_sp('sp_zm_mstr_header');\r\n\r\n    if(select.data.SUCCESS === 'Y'){\r\n      const R_CARSU = select.data.ROWS[0].R_CARSU === null ? 0 : select.data.ROWS[0].R_CARSU;\r\n      const E_CARSU = select.data.ROWS[0].E_CARSU === null ? 0 : select.data.ROWS[0].E_CARSU;\r\n      const E_KG = select.data.ROWS[0].E_KG === null ? 0 : select.data.ROWS[0].E_KG;\r\n      const CAR_TOTAL = select.data.ROWS[0].CAR_TOTAL === null ? 0 : select.data.ROWS[0].CAR_TOTAL;\r\n\r\n      if(R_CARSU !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WAIT', {MAIN_WAIT: R_CARSU});\r\n\r\n      if(E_CARSU !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_TOTAL'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_TOTAL', {MAIN_TOTAL: E_CARSU});\r\n\r\n      if(E_KG !== gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WEIGHT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WEIGHT', {MAIN_WEIGHT: E_KG});\r\n\r\n      if(CAR_TOTAL !== gfs_getStoreValue('INSP_PROC_MAIN', 'CAR_TOTAL'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'CAR_TOTAL', {CAR_TOTAL: CAR_TOTAL});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WAIT', {MAIN_WAIT: 0});\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_TOTAL') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_TOTAL', {MAIN_TOTAL: 0});\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'MAIN_WEIGHT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'MAIN_WEIGHT', {MAIN_WEIGHT: 0});\r\n        if(gfs_getStoreValue('INSP_PROC_MAIN', 'CAR_TOTAL') !== 0)\r\n          gfs_dispatch('INSP_PROC_MAIN', 'CAR_TOTAL', {CAR_TOTAL: 0});\r\n    }\r\n  }\r\n\r\n  mainHeader2 = async() => {\r\n    //출차대기\r\n    // const select = await gfc_yk_call_sp('sp_zm_mstr_pass');\r\n    const select = await gfc_yk_call_sp('sp_zm_mstr_pass');\r\n\r\n    if(select.data.SUCCESS === 'Y'){\r\n      if(select.data.ROWS.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'DEPT_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DEPT_WAIT', {DEPT_WAIT: select.data.ROWS.length});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'DEPT_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DEPT_WAIT', {DEPT_WAIT: 0});\r\n    }\r\n\r\n    //입차대기\r\n    // const select2 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE');\r\n    const select2 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE');\r\n\r\n    if(select2.data.SUCCESS === 'Y'){\r\n      if(select2.data.ROWS.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'ENTR_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'ENTR_WAIT', {ENTR_WAIT: select2.data.ROWS.length});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'ENTR_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'ENTR_WAIT', {ENTR_WAIT: 0});\r\n    }\r\n\r\n    // //운송대기\r\n    // const select3 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE_WAIT');\r\n    const select3 = await gfc_yk_call_sp('SP_ZM_MSTR_DRIVE_WAIT');\r\n\r\n    if(select3.data.SUCCESS === 'Y'){\r\n      if(select3.data.ROWS.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'DRIV_WAIT'))\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DRIV_WAIT', {DRIV_WAIT: select3.data.ROWS.length});\r\n    }else{\r\n      if(gfs_getStoreValue('INSP_PROC_MAIN', 'DRIV_WAIT') !== 0)\r\n        gfs_dispatch('INSP_PROC_MAIN', 'DRIV_WAIT', {DRIV_WAIT: 0});\r\n    }\r\n  }\r\n\r\n  mainGrid = async() => {\r\n    try{\r\n      const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n      // await grid.restore();\r\n  \r\n      // //김경현\r\n      // gfg_appendRow(grid, grid.getRowCount(), {\r\n      //   scaleNumb: '202110140010',\r\n      //   carNumb: 'data[i].carNumb',\r\n      //   itemGrade: 'data[i].itemGrade',\r\n      //   date: 'data[i].date',\r\n      //   vendor: 'data[i].vendor',\r\n      //   rec: '0'\r\n      // }, 'scaleNumb', false);\r\n      //   if(grid.getData().length !== gfs_getStoreValue('INSP_PROC_MAIN', 'PROC_WAIT'))\r\n      //     gfs_dispatch('INSP_PROC_MAIN', 'PROC_WAIT', {PROC_WAIT: grid.getData().length});\r\n  \r\n  \r\n  \r\n  \r\n      const select = await gfc_yk_call_sp('SP_ZM_MSTR_WAIT');\r\n      if(select.data.SUCCESS === 'Y'){\r\n        const main = select.data.ROWS;\r\n          \r\n        if(main.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'PROC_WAIT'))\r\n          gfs_dispatch('INSP_PROC_MAIN', 'PROC_WAIT', {PROC_WAIT: main.length});\r\n  \r\n        const search_tp = gfo_getCombo(this.props.pgm, 'search_tp').getValue();\r\n        const search_txt = gfo_getInput(this.props.pgm, 'search_txt').getValue();\r\n    \r\n        const dataMod = [];\r\n        main.forEach(e => {\r\n          dataMod.push({\r\n            scaleNumb: e['DELIVERY_ID'].toString(),\r\n            carNumb: e['VEHICLE_NO'],\r\n            itemGrade: e['ITEM_GRADE'],\r\n            date: e['CREATION_DATE'],\r\n            vendor: e['VENDOR_NAME'],\r\n            warning: e['WARNING']\r\n          })\r\n        })\r\n  \r\n        let data = dataMod.filter(e => {\r\n          if(search_tp !== null && search_tp !== ''){\r\n            //계근번호\r\n            if(search_tp === '1'){\r\n              if(e.scaleNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //차량번호\r\n            else if(search_tp === '2'){\r\n              if(e.carNumb.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //사전등급\r\n            else if(search_tp === '3'){\r\n              if(e.itemGrade.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            //업체\r\n            else if(search_tp === '4'){\r\n              if(e.vendor.indexOf(search_txt) >= 0){\r\n                return true;\r\n              }else{\r\n                return false;\r\n              }\r\n            }\r\n            \r\n          }else{\r\n            return true;\r\n          }\r\n        })\r\n  \r\n        if(data.length > 0){\r\n          \r\n          //기존 그리드에서 scaleNumb기준으로 데이터가 없으면 추가한다.\r\n          for(let i = 0; i < data.length; i++){\r\n            const scaleNumb = data[i].scaleNumb;\r\n  \r\n            const oldData = grid.getData().find(e => e.scaleNumb === scaleNumb);\r\n            if(!oldData){\r\n              gfg_appendRow(grid, grid.getRowCount(), {\r\n                scaleNumb,\r\n                carNumb: data[i].carNumb,\r\n                itemGrade: data[i].itemGrade,\r\n                date: data[i].date,\r\n                vendor: data[i].vendor,\r\n                rec: '0'\r\n              }, 'scaleNumb', false);\r\n            }\r\n          }\r\n  \r\n          //새로운 정보 기준으로 데이터가 지워졌으면 삭제한다.\r\n          for(let i = 0; i < grid.getData().length; i++){\r\n            const scaleNumb =  grid.getData()[i].scaleNumb;\r\n  \r\n            const newData = data.find(e => e.scaleNumb === scaleNumb)\r\n            if(!newData){\r\n              grid.removeRow(i);\r\n  \r\n              //지워진 데이터가 기존에 선택된 데이터 이면 초기화 한다.\r\n              const selectScaleNumb = gfs_getStoreValue('INSP_PROC_MAIN', 'DETAIL_SCALE');\r\n              if(scaleNumb === selectScaleNumb){\r\n                gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n                gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n                gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: '0'});\r\n                gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n              }\r\n            }\r\n          }\r\n          \r\n          grid.resetOriginData();\r\n          grid.restore();\r\n    \r\n          if(data.length !== gfs_getStoreValue('INSP_PROC_MAIN', 'BOT_TOTAL'))\r\n            gfs_dispatch('INSP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: data.length});\r\n          \r\n          // await grid.resetOriginData();\r\n          // await grid.refreshLayout();\r\n        }\r\n      }else{\r\n        grid.clear();\r\n        if(gfs_getStoreValue('INSP_PROC_MAIN', 'BOT_TOTAL') !== 0)\r\n          gfs_dispatch('INSP_PROC_MAIN', 'BOT_TOTAL', {BOT_TOTAL: 0});\r\n      }\r\n  \r\n      await this.mainHeader();\r\n      await this.mainHeader2();\r\n    }catch(e){\r\n\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  rec = async() => {\r\n\r\n    try{\r\n      RecodingList().then(recScaleNumb => {\r\n        const grid = gfg_getGrid(this.props.pgm, 'main10');\r\n  \r\n        for(let i = 0; i < recScaleNumb.data.Response.length; i++){\r\n  \r\n          const data = grid.getData().find(e => e.scaleNumb === recScaleNumb.data.Response[i])\r\n          if(data){\r\n            //녹화 on만 설정\r\n            grid.setValue(data.rowKey, 'rec', '1');\r\n          }\r\n        }\r\n  \r\n        const recGrid = grid.getData().filter(e => e.rec === '1');\r\n        for(let i = 0; i < recGrid.length; i++){\r\n          const data = recScaleNumb.data.Response.find(e => e === recGrid[i].scaleNumb);\r\n          if(!data){\r\n            //녹화 off만 설정\r\n            grid.setValue(recGrid[i].rowKey, 'rec', '0');\r\n          }\r\n        }\r\n      })\r\n    }catch(e){\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    // this.mainHeaderInterval = setInterval(e => {\r\n    //   this.mainHeader();\r\n    // }, 2000)\r\n\r\n    // this.mainHeaderInterval2 = setInterval(e => {\r\n    //   this.mainHeader2();\r\n    // }, 5000)\r\n\r\n    this.mainGridInterval = setInterval(e => {\r\n      this.mainGrid();\r\n    }, 20000)\r\n\r\n    this.recInterval = setInterval(e => {\r\n      this.rec();\r\n    }, 1000)\r\n\r\n    this.Retrieve();\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.Init();\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    // clearInterval(this.mainHeaderInterval);\r\n    // clearInterval(this.mainHeaderInterval2);\r\n    clearInterval(this.mainGridInterval);\r\n    clearInterval(this.recInterval);\r\n  }\r\n\r\n  Retrieve = async () => {\r\n    gfc_showMask();\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(''); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue('');      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_ord_no').setValue('');      //배차번호\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_grd_nm').setValue('');      //배차등급\r\n    gfo_getInput(this.props.pgm, 'disp_real_vender_name').setValue(''); //실공급자\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_nm').setValue('');     //실상차지\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_addr').setValue('');   //주소\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: ''});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n      chit     : false\r\n    });\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DISP_INFO', {\r\n      scaleNumb       : '',\r\n      scrp_ord_no     : '',\r\n      scrp_grd_nm     : '',\r\n      real_vender_name: '',\r\n      load_area_nm    : '',\r\n      load_area_addr  : ''\r\n    });\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DISP_PIC', {\r\n      scaleNumb           : '',\r\n      scrp_ord_no         : '',\r\n  \r\n      empty_front_date    : '',\r\n      empty_front         : '',\r\n      empty_front_gps_addr: '',\r\n      empty_rear_date     : '',\r\n      empty_rear          : '',\r\n      empty_rear_gps_addr : '',\r\n      cargo_front_date    : '',\r\n      cargo_front         : '',\r\n      cargo_front_gps_addr: '',\r\n      cargo_rear_date     : '',\r\n      cargo_rear          : '',\r\n      cargo_rear_gps_addr : ''\r\n    });\r\n\r\n    this.mainGrid();\r\n    // this.mainHeader();\r\n    // this.mainHeader2();\r\n\r\n    gfc_hideMask();\r\n  }\r\n\r\n  dblclick = async(e) => {\r\n    gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n      ({\r\n        windowZindex: 0,\r\n        activeWindow: {programId:  'INSP_HIST',\r\n                       programNam: '검수이력'\r\n                      }\r\n      })\r\n    );\r\n  }\r\n\r\n  onSelectChange = async (e) => {\r\n    if(e === null) return;\r\n\r\n    gfc_showMask();\r\n\r\n    document.getElementById('tab1_INSP_PROC').click(0);\r\n    await gfc_sleep(100);\r\n\r\n    gfo_getInput(this.props.pgm, 'detail_pre_grade').setValue(e.itemGrade); //사전등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade1').setValue('');   //고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_grade2').setValue('');   //상세고철등급\r\n    gfo_getCombo(this.props.pgm, 'detail_subt').setValue('');     //감량중량\r\n    gfo_getCombo(this.props.pgm, 'detail_subt_leg').setValue(''); //감량사유\r\n    gfo_getCombo(this.props.pgm, 'detail_depr').setValue('');     //감가내역\r\n    gfo_getCombo(this.props.pgm, 'detail_depr2').setValue('');    //감가비율\r\n    gfo_getCombo(this.props.pgm, 'detail_car').setValue(e.cartype);      //차종구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn').setValue('');      //반품구분\r\n    gfo_getCombo(this.props.pgm, 'detail_rtn2').setValue('');     //반품구분사유\r\n    gfo_getCheckbox(this.props.pgm, 'detail_warning').setValue('');  //경고\r\n\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_ord_no').setValue('');      //배차번호\r\n    gfo_getInput(this.props.pgm, 'disp_scrp_grd_nm').setValue('');      //배차등급\r\n    gfo_getInput(this.props.pgm, 'disp_real_vender_name').setValue(''); //실공급자\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_nm').setValue('');     //실상차지\r\n    gfo_getInput(this.props.pgm, 'disp_load_area_addr').setValue('');   //주소\r\n\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_SCALE', {DETAIL_SCALE: e.scaleNumb});\r\n    setSessionCookie('DETAIL_SCALE', e.scaleNumb);\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_CARNO', {DETAIL_CARNO: e.carNumb});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_WEIGHT', {DETAIL_WEIGHT: e.totalWgt});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'DETAIL_DATE', {DETAIL_DATE: e.date});\r\n    gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n      chit     : false\r\n    });\r\n\r\n    //계량증명서 정보여부\r\n    const chitInfoYn = await gfc_yk_call_sp('SP_ZM_CHIT', {\r\n      P_SCALENUMB: e.scaleNumb\r\n    });\r\n\r\n    if(chitInfoYn.data.SUCCESS === 'N'){\r\n      alert('계량증명서 정보가 없습니다.');\r\n      gfc_hideMask();\r\n      return;\r\n    }\r\n\r\n    //계량증명서\r\n    const chitYn = await gfc_ftp_file_yn_YK(e.scaleNumb);\r\n    gfs_dispatch('INSP_PROC_MAIN', 'CHIT_INFO', {\r\n      date     : chitInfoYn.data.ROWS[0].CREATION_DATE,\r\n      scaleNumb: chitInfoYn.data.ROWS[0].DELIVERY_ID.toString(),\r\n      carNumb  : chitInfoYn.data.ROWS[0].VEHICLE_NO,\r\n      vender   : chitInfoYn.data.ROWS[0].VENDOR_NAME,\r\n      itemFlag : e.itemGrade,\r\n      Wgt      : chitInfoYn.data.ROWS[0].TOTAL_WEIGHT,\r\n      loc      : chitInfoYn.data.ROWS[0].AREA,\r\n      user     : gfs_getStoreValue('USER_REDUCER', 'USER_NAM'),\r\n      chit     : chitYn.data\r\n      // chit     : false\r\n    });\r\n\r\n    //배차정보\r\n    const dispInfo = await gfc_yk_call_sp('SP_ZM_PROCESS_F3', {\r\n      P_SCALENUMB: e.scaleNumb\r\n    });\r\n\r\n    if(dispInfo.data.SUCCESS === 'Y'){\r\n      gfs_dispatch('INSP_PROC_MAIN', 'DISP_INFO', {\r\n        scaleNumb       : chitInfoYn.data.ROWS[0].DELIVERY_ID.toString(),\r\n        scrp_ord_no     : dispInfo.data.ROWS[0].SCRP_ORD_NO,\r\n        scrp_grd_nm     : dispInfo.data.ROWS[0].SCRP_GRD_NM,\r\n        real_vender_name: dispInfo.data.ROWS[0].REAL_VENDER_NAME,\r\n        load_area_nm    : dispInfo.data.ROWS[0].LOAD_AREA_NM,\r\n        load_area_addr  : dispInfo.data.ROWS[0].LOAD_AREA_ADDR\r\n      });\r\n\r\n      const scrp_ord_no = dispInfo.data.ROWS[0].SCRP_ORD_NO;\r\n      const yyyy = scrp_ord_no.substr(2, 4);\r\n      const mm = scrp_ord_no.substr(6, 2);\r\n      const dd = scrp_ord_no.substr(8, 2);\r\n\r\n      gfs_dispatch('INSP_PROC_MAIN', 'DISP_PIC', {\r\n        scaleNumb           : chitInfoYn.data.ROWS[0].DELIVERY_ID.toString(),\r\n        scrp_ord_no         : dispInfo.data.ROWS[0].SCRP_ORD_NO,\r\n    \r\n        empty_front_date    : dispInfo.data.ROWS[0].EMPTY_FRONT_DATE,\r\n        empty_front         : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].EMPTY_FRONT}`,\r\n        empty_front_gps_addr: dispInfo.data.ROWS[0].EMPTY_FRONT_GPS_ADDR,\r\n        \r\n        empty_rear_date     : dispInfo.data.ROWS[0].EMPTY_REAR_DATE,\r\n        empty_rear          : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].EMPTY_REAR}`,\r\n        empty_rear_gps_addr : dispInfo.data.ROWS[0].EMPTY_REAR_GPS_ADDR,\r\n        \r\n        cargo_front_date    : dispInfo.data.ROWS[0].CARGO_FRONT_DATE,\r\n        cargo_front         : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].CARGO_FRONT}`,\r\n        cargo_front_gps_addr: dispInfo.data.ROWS[0].CARGO_FRONT_GPS_ADDR,\r\n        \r\n        cargo_rear_date     : dispInfo.data.ROWS[0].CARGO_REAR_DATE,\r\n        cargo_rear          : `http://scrap.yksteel.co.kr:8088/stms/resources/upload/${yyyy}/${mm}/${dd}/${dispInfo.data.ROWS[0].CARGO_REAR}`,\r\n        cargo_rear_gps_addr : dispInfo.data.ROWS[0].CARGO_REAR_GPS_ADDR\r\n      });\r\n    }\r\n    \r\n    gfc_hideMask();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='win_body' style={{borderRadius:'0px', borderWidth:'0px 1px 0px 1px'}}>\r\n        <div className='car_manager'>\r\n\r\n          \r\n          <div className='car_list'>\r\n            <div className='search_line'>\r\n              <div className='wp'>\r\n                <div style={{position:'absolute', left:0, top:0, width:'124px', height:'42px', fontSize:'16px'}}>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'search_tp'\r\n                            value   = 'code'\r\n                            display = 'name'\r\n                            width   = {124}\r\n                            height  = {42}\r\n                            emptyRow\r\n                            data    = {[{\r\n                              code: '1',\r\n                              name: '계근번호'\r\n                            },{\r\n                              code: '2',\r\n                              name: '차량번호'\r\n                            },{\r\n                              code: '3',\r\n                              name: '사전등급'\r\n                            },{\r\n                              code: '4',\r\n                              name: '업체'\r\n                            }]}\r\n                  />\r\n                </div>\r\n                <Input pgm         = {this.props.pgm}\r\n                       id          = 'search_txt'\r\n                       height      = '42'\r\n                       placeHolder = '검색어를 입력하세요'\r\n                       paddingLeft = '14'\r\n                       width       = '100%'\r\n                       type        = 'textarea'\r\n                       onKeyDown   = {(e) => {\r\n                        if(e.keyCode === 13){\r\n                          this.Retrieve()\r\n                        }\r\n                       }}\r\n                      //  padding-bottom:2px; padding-left:14px; border:none; font-size:22px;\r\n                        />\r\n                <button>검색</button>\r\n              </div>\r\n            </div>\r\n            <div className='grid'>\r\n              <div className='wp'>\r\n                <div style={{width:'100%', height:'100%', overflow:'auto'}}>\r\n                  <Grid pgm={this.props.pgm}\r\n                        id ='main10'\r\n                        selectionChange={(e) => this.onSelectChange(e)}\r\n                        dblclick={(e) => this.dblclick(e)}\r\n                        rowHeight={46}\r\n                        rowHeaders= {[{ type: 'rowNum', width: 40 }]}\r\n                        columns={[\r\n                          columnInput({\r\n                            name: 'scaleNumb',\r\n                            header: '계근번호',\r\n                            width : 110,\r\n                            readOnly: true,\r\n                            color : '#0063A9',\r\n                            align : 'center'\r\n                          }),\r\n                          columnInput({\r\n                            name: 'carNumb',\r\n                            header: '차량번호',\r\n                            width : 90,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnInput({\r\n                            name: 'itemGrade',\r\n                            header: '사전등급',\r\n                            width : 135,\r\n                            readOnly: true,\r\n                            align : 'center'\r\n                          }),   \r\n                          columnDateTime({\r\n                            name  : 'date',\r\n                            header: '입차시간',\r\n                            width : 120,\r\n                            height: 38,\r\n                            // paddingTop: ''\r\n                            readOnly: true,\r\n                            valign:'middle',\r\n                            format: gfs_getStoreValue('USER_REDUCER', 'YMD_FORMAT'),\r\n                            time  : 'HH:mm:ss'\r\n                          }),\r\n                          columnTextArea({\r\n                            name: 'vendor',\r\n                            header: 'Vendor',\r\n                            width : 160,\r\n                            height: 38,\r\n                            readOnly: true,\r\n                            align : 'left'\r\n                          }),\r\n                          columnImage({\r\n                            name: 'rec',\r\n                            header: '녹화중',\r\n                            width: 85,\r\n                            imgItem:[\r\n                              {'code':'0', 'value': ''},\r\n                              {'code':'1', 'value': <GifPlayer height='30' width='70' gif={require('../../../Image/yk_rec01.gif').default} autoplay/>}\r\n                            ]\r\n                          }),   \r\n                          columnCombobox({\r\n                            name: 'warning', \r\n                            header: '경고',\r\n                            value   : 'COMM_DTL_CD',\r\n                            display : 'COMM_DTL_NAM',\r\n                            width   : 80, \r\n                            readOnly: true,\r\n                            oracleData : getDynamicSql_Oracle(\r\n                              'COMM/COMM',\r\n                              'ZM_IMS_CODE_SELECT',\r\n                              [{COMM_CD: '5'}]),\r\n                            editor: {\r\n                              value   : 'COMM_DTL_CD',\r\n                              display : 'COMM_DTL_NAM'\r\n                            }\r\n                          })\r\n                        ]}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className='grid_info'>\r\n                <span className='title'>잔여차량</span><Botspan reducer='INSP_PROC_MAIN' />\r\n              </div>\r\n            </div>\r\n            <div className='total_info'>\r\n              <ul className='four'>\r\n                <li><span className='title'>운송차량 전체</span><Mainspan reducer='INSP_PROC_MAIN' flag={8} /></li>\r\n                <li><span className='title'>잔류 차량</span><Mainspan reducer='INSP_PROC_MAIN' flag={1} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'DAILY_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n\r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('DAILY_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'DAILY_PROC',\r\n                                        programNam: '검수일계표'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>전체 검수 차량</span><Mainspan reducer='INSP_PROC_MAIN' flag={2} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'DAILY_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n\r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('DAILY_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'DAILY_PROC',\r\n                                        programNam: '검수일계표'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>입고량(KG)</span><Mainspan reducer='INSP_PROC_MAIN' flag={3} /></li>\r\n              </ul>\r\n              <ul className='four'>\r\n                <li><span className='title'>검수대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={4} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'DISP_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n\r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('DISP_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'DISP_PROC',\r\n                                        programNam: '출차대기'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>출차대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={5} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'ENTR_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n                  \r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('ENTR_PROC');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'ENTR_PROC',\r\n                                        programNam: '입차대기'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>입차대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={6} /></li>\r\n                <li onClick={e => {\r\n                  const auth = gfs_getStoreValue('USER_REDUCER', 'AUTH');\r\n                  if(auth.length === undefined || auth.length === 0) return;\r\n\r\n                  const openAuth = auth.find(e => e.MENU_ID === 'ENTR_PROC');\r\n                  if(openAuth !== null){\r\n                    if(openAuth.PGMAUT_YN === 'Y'){\r\n                  \r\n                      //#region 프로그램 리듀서 생성\r\n                      gfs_PGM_REDUCER('ENTR_WAIT');\r\n                      //#endregion\r\n\r\n                      gfs_dispatch('WINDOWFRAME_REDUCER', 'SELECTWINDOW', \r\n                        ({\r\n                          windowZindex: 0,\r\n                          activeWindow: {programId: 'ENTR_WAIT',\r\n                                        programNam: '운송대기'\r\n                                        }\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                }}><span className='title'>운송대기</span><Mainspan reducer='INSP_PROC_MAIN' flag={7} /></li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div className='car_info' id='car_info'>\r\n            <div className='title'><span>계근번호</span><Detailspan reducer='INSP_PROC_MAIN' flag={1} /></div>\r\n\r\n            <TabList pgm={this.props.pgm} id={this.props.id} reducer='INSP_PROC_MAIN'/>\r\n\r\n            <div className='tab_content' id='tabMain'>\r\n              <div className='input_list on' id={`content1_${this.props.pgm}`}>\r\n                <ul>\r\n                  <li>\r\n                    <h5>사전등급</h5>\r\n                      <Input pgm     = {this.props.pgm}\r\n                             id      = 'detail_pre_grade'\r\n                             width   = '100%'\r\n                             disabled\r\n                      />\r\n                  </li>\r\n                  <li>\r\n                    <h5>등급책정</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                                id      = 'detail_grade1'\r\n                                value   = 'itemCode'\r\n                                display = 'item'\r\n                                placeholder = '고철등급 검색'\r\n                                height  = {42}\r\n                                oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                  p_division    : 'P005'\r\n                                })}\r\n                                onChange = {async (e) => {\r\n                                  const combo = gfo_getCombo(this.props.pgm, 'detail_grade2');\r\n                                  combo.setValue(null);\r\n                                  combo.setDisabled(true);\r\n\r\n                                  if(e !== undefined && e.value !== ''){\r\n                                    await combo.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                      p_division    : e.value\r\n                                    })});\r\n                                    combo.setDisabled(false);\r\n                                  }else{\r\n                                    combo.setDisabled(true);\r\n                                  }\r\n                                }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                              id      = 'detail_grade2'\r\n                              value   = 'itemCode'\r\n                              display = 'item'\r\n                              isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>감량중량</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_subt'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감량중량 검색(KG)'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P535'\r\n                            })}\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_subt_leg');\r\n                              combo.setValue(null);\r\n                              combo.setDisabled(true);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value !== '0'){\r\n                                await combo.onReset({oracleSpData:  gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                                  p_division    : e.value\r\n                                })});\r\n                                combo.setDisabled(false);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_subt_leg'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '감량사유 검색'\r\n                          oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                            p_division    : 'P620'\r\n                          })}\r\n                          isDisabled\r\n                    /> \r\n                  </li>\r\n                  <li>\r\n                    <h5>감가내역</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_depr'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '감가내역 검색'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P130'\r\n                            })}\r\n                            emptyRow\r\n                            onChange = {async (e) => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_depr2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e !== undefined && e.value !== ''){\r\n                                combo.setDisabled(false);\r\n                              }else{\r\n                                combo.setDisabled(true);\r\n                              }\r\n                            }}\r\n                      />\r\n                    </div>\r\n                    <Combobox pgm = {this.props.pgm}\r\n                          id      = 'detail_depr2'\r\n                          value   = 'CODE'\r\n                          display = 'NAME'\r\n                          placeholder = '감가비율'\r\n                          isDisabled\r\n                          data    = {[{\r\n                            'CODE': '10',\r\n                            'NAME': '10%'\r\n                          },{\r\n                            'CODE': '20',\r\n                            'NAME': '20%'\r\n                          },{\r\n                            'CODE': '30',\r\n                            'NAME': '30%'\r\n                          },{\r\n                            'CODE': '40',\r\n                            'NAME': '40%'\r\n                          },{\r\n                            'CODE': '50',\r\n                            'NAME': '50%'\r\n                          },{\r\n                            'CODE': '60',\r\n                            'NAME': '60%'\r\n                          },{\r\n                            'CODE': '70',\r\n                            'NAME': '70%'\r\n                          },{\r\n                            'CODE': '80',\r\n                            'NAME': '80%'\r\n                          },{\r\n                            'CODE': '90',\r\n                            'NAME': '90%'\r\n                          },{\r\n                            'CODE': '100',\r\n                            'NAME': '100%'\r\n                          }]}\r\n                          // emptyRow\r\n                    />\r\n                  </li>\r\n                  {/* <li>\r\n                    <h5>하차구역</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_out'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '하차구역 검색(SECTOR)'\r\n                          data    = ''\r\n                          onFocus = {ComboCreate => {\r\n                            YK_WEB_REQ('tally_process_pop.jsp?division=P530', {})\r\n                              .then(res => {\r\n                                ComboCreate({data   : res.data.dataSend,\r\n                                            value  : 'itemCode',\r\n                                            display: 'item'});\r\n                              })\r\n                          }}\r\n                  />\r\n                  </li> */}\r\n                  <li>\r\n                    <h5>차종구분</h5>\r\n                    <Combobox pgm     = {this.props.pgm}\r\n                          id      = 'detail_car'\r\n                          value   = 'itemCode'\r\n                          display = 'item'\r\n                          placeholder = '차종선택'\r\n                          oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                            p_division    : 'P700'\r\n                          })}\r\n                  />\r\n                  </li>\r\n                  <li>\r\n                    <h5>반품구분</h5>\r\n                    <div style={{marginBottom:'5px'}}>\r\n                      <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            placeholder = '일부,전량 선택'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P110'\r\n                            })}\r\n                            emptyRow\r\n                            onChange = {e => {\r\n                              const combo = gfo_getCombo(this.props.pgm, 'detail_rtn2');\r\n                              combo.setValue(null);\r\n\r\n                              if(e === undefined) return;\r\n\r\n                              if(e.value === ''){\r\n                                combo.setDisabled(true);\r\n                              }else{\r\n                                combo.setDisabled(false);\r\n                              }\r\n                              // combo.onReset({etcData:  YK_WEB_REQ(`tally_process_pop.jsp?division=${e.value}`, {})});\r\n                            }}\r\n                    />\r\n                  </div>\r\n                  <Combobox pgm     = {this.props.pgm}\r\n                            id      = 'detail_rtn2'\r\n                            value   = 'itemCode'\r\n                            display = 'item'\r\n                            oracleSpData = {gfc_yk_call_sp('SP_ZM_PROCESS_POP', {\r\n                              p_division    : 'P120'\r\n                            })}\r\n                            isDisabled\r\n                    />\r\n                  </li>\r\n                  <li>\r\n                    <h5>경고</h5>\r\n                    <Checkbox pgm   = {this.props.pgm}\r\n                              id    = 'detail_warning'\r\n                              width = '30px'\r\n                              height= '30px'\r\n\r\n                    />\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              \r\n              <Chit pgm={this.props.pgm} id={'chit_memo'} reducer='INSP_PROC_MAIN'/>\r\n              \r\n              <div className='input_list' id={`content3_${this.props.pgm}`}>\r\n                <DispInfo pgm={this.props.pgm} />\r\n              </div>\r\n\r\n              <div className='input_list' id={`content4_${this.props.pgm}`}>\r\n                <DispImg pgm={this.props.pgm} />\r\n              </div>\r\n            </div>\r\n            \r\n            <CompleteBtn pgm={this.props.pgm}/>\r\n          </div>\r\n\r\n          \r\n          <div className='cctv_viewer'>\r\n            <h4>실시간 CCTV</h4>\r\n            <div className='manual_record'>\r\n              <h5>수동녹화</h5>\r\n              <button \r\n                type='button' \r\n                className='record'\r\n                onClick={e => this.startRec()}\r\n              >녹화</button>\r\n              <button \r\n                type='button' \r\n                className='stop on'\r\n                onClick={e => this.stopRec()}\r\n              >정지</button>\r\n            </div>\r\n            <RainInfo />\r\n            <div className='cctv_list' \r\n            >\r\n              {this.state.device[0] !== undefined && \r\n                <RecImage \r\n                  seq={1}\r\n                  device={this.state.device[0].camera.Guid} \r\n                  Name={this.state.device[0].camera.Name}\r\n                  rtspAddr={this.state.device[0].rtspAddr}\r\n                  cameraPort={this.state.device[0].cameraPort}\r\n                  cameraNam={this.state.device[0].cameraNam}\r\n                  cam='STD_CAM_OPEN' \r\n                  focus='STD_CAM_FOCUS' \r\n                  rec='STD_CAM_REC' \r\n                  image='STD_CAM_IMG'/> \r\n              }\r\n              {this.state.device[1] !== undefined && \r\n                <RecImage\r\n                  seq={2} \r\n                  device={this.state.device[1].camera.Guid} \r\n                  Name={this.state.device[1].camera.Name}\r\n                  rtspAddr={this.state.device[1].rtspAddr}\r\n                  cameraPort={this.state.device[1].cameraPort}\r\n                  cameraNam={this.state.device[1].cameraNam}\r\n                  cam='DUM_CAM_OPEN' \r\n                  focus='DUM_CAM_FOCUS' \r\n                  rec='DUM_CAM_REC' \r\n                  image='DUM_CAM_IMG'/> \r\n              }\r\n            </div>\r\n            <div className='cctv_other_list'>\r\n              <ul>\r\n                <li>\r\n                  {this.state.device[2] !== undefined && \r\n                    <RecImage\r\n                      seq={3} \r\n                      device={this.state.device[2].camera.Guid} \r\n                      Name={this.state.device[2].camera.Name}\r\n                      rtspAddr={this.state.device[2].rtspAddr}\r\n                      cameraPort={this.state.device[2].cameraPort}\r\n                      cameraNam={this.state.device[2].cameraNam}\r\n                      cam='ETC1_CAM_OPEN' \r\n                      focus='ETC1_CAM_FOCUS' \r\n                      rec='ETC1_CAM_REC' \r\n                      image='ETC1_CAM_IMG'/> \r\n                  }\r\n                </li>\r\n                <li>\r\n                  {this.state.device[3] !== undefined && \r\n                    <RecImage\r\n                      seq={4} \r\n                      device={this.state.device[3].camera.Guid} \r\n                      Name={this.state.device[3].camera.Name}\r\n                      rtspAddr={this.state.device[3].rtspAddr}\r\n                      cameraPort={this.state.device[3].cameraPort}\r\n                      cameraNam={this.state.device[3].cameraNam}\r\n                      cam='ETC2_CAM_OPEN' \r\n                      focus='ETC2_CAM_FOCUS' \r\n                      rec='ETC2_CAM_REC' \r\n                      image='ETC2_CAM_IMG'/> \r\n                  }\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default INSP_PROC;",{"ruleId":"765","replacedBy":"766"},{"ruleId":"767","replacedBy":"768"},{"ruleId":"769","severity":1,"message":"770","line":9,"column":31,"nodeType":"771","messageId":"772","endLine":9,"endColumn":56},{"ruleId":"769","severity":1,"message":"773","line":10,"column":28,"nodeType":"771","messageId":"772","endLine":10,"endColumn":44},{"ruleId":"769","severity":1,"message":"774","line":125,"column":7,"nodeType":"771","messageId":"772","endLine":125,"endColumn":15},{"ruleId":"769","severity":1,"message":"775","line":15,"column":9,"nodeType":"771","messageId":"772","endLine":15,"endColumn":16},{"ruleId":"769","severity":1,"message":"776","line":1,"column":8,"nodeType":"771","messageId":"772","endLine":1,"endColumn":13},{"ruleId":"769","severity":1,"message":"777","line":6,"column":38,"nodeType":"771","messageId":"772","endLine":6,"endColumn":50},{"ruleId":"769","severity":1,"message":"778","line":24,"column":8,"nodeType":"771","messageId":"772","endLine":24,"endColumn":13},{"ruleId":"769","severity":1,"message":"779","line":12,"column":9,"nodeType":"771","messageId":"772","endLine":12,"endColumn":17},{"ruleId":"769","severity":1,"message":"780","line":15,"column":9,"nodeType":"771","messageId":"772","endLine":15,"endColumn":18},{"ruleId":"769","severity":1,"message":"781","line":6,"column":27,"nodeType":"771","messageId":"772","endLine":6,"endColumn":39},{"ruleId":"769","severity":1,"message":"782","line":8,"column":10,"nodeType":"771","messageId":"772","endLine":8,"endColumn":23},{"ruleId":"765","replacedBy":"783"},{"ruleId":"767","replacedBy":"784"},{"ruleId":"769","severity":1,"message":"785","line":3,"column":10,"nodeType":"771","messageId":"772","endLine":3,"endColumn":14},{"ruleId":"769","severity":1,"message":"786","line":9,"column":28,"nodeType":"771","messageId":"772","endLine":9,"endColumn":44},{"ruleId":"769","severity":1,"message":"787","line":16,"column":5,"nodeType":"771","messageId":"772","endLine":16,"endColumn":14},{"ruleId":"769","severity":1,"message":"788","line":126,"column":7,"nodeType":"771","messageId":"772","endLine":126,"endColumn":18},{"ruleId":"789","severity":1,"message":"790","line":273,"column":6,"nodeType":"791","endLine":273,"endColumn":8,"suggestions":"792"},{"ruleId":"769","severity":1,"message":"793","line":1,"column":17,"nodeType":"771","messageId":"772","endLine":1,"endColumn":24},{"ruleId":"769","severity":1,"message":"794","line":50,"column":7,"nodeType":"771","messageId":"772","endLine":50,"endColumn":20},{"ruleId":"769","severity":1,"message":"795","line":120,"column":7,"nodeType":"771","messageId":"772","endLine":120,"endColumn":14},{"ruleId":"769","severity":1,"message":"796","line":1,"column":17,"nodeType":"771","messageId":"772","endLine":1,"endColumn":25},{"ruleId":"769","severity":1,"message":"797","line":69,"column":9,"nodeType":"771","messageId":"772","endLine":69,"endColumn":17},{"ruleId":"798","severity":1,"message":"799","line":172,"column":25,"nodeType":"800","messageId":"801","endLine":172,"endColumn":26,"suggestions":"802"},{"ruleId":"803","severity":1,"message":"804","line":295,"column":60,"nodeType":"805","messageId":"806","endLine":295,"endColumn":62},{"ruleId":"765","replacedBy":"807"},{"ruleId":"767","replacedBy":"808"},{"ruleId":"769","severity":1,"message":"781","line":6,"column":27,"nodeType":"771","messageId":"772","endLine":6,"endColumn":39},{"ruleId":"769","severity":1,"message":"782","line":8,"column":10,"nodeType":"771","messageId":"772","endLine":8,"endColumn":23},{"ruleId":"769","severity":1,"message":"809","line":34,"column":9,"nodeType":"771","messageId":"772","endLine":34,"endColumn":18},{"ruleId":"769","severity":1,"message":"810","line":10,"column":10,"nodeType":"771","messageId":"772","endLine":10,"endColumn":30},{"ruleId":"769","severity":1,"message":"811","line":7,"column":48,"nodeType":"771","messageId":"772","endLine":7,"endColumn":65},{"ruleId":"769","severity":1,"message":"812","line":8,"column":41,"nodeType":"771","messageId":"772","endLine":8,"endColumn":54},{"ruleId":"769","severity":1,"message":"813","line":13,"column":22,"nodeType":"771","messageId":"772","endLine":13,"endColumn":36},{"ruleId":"803","severity":1,"message":"814","line":64,"column":34,"nodeType":"805","messageId":"806","endLine":64,"endColumn":36},{"ruleId":"769","severity":1,"message":"815","line":7,"column":87,"nodeType":"771","messageId":"772","endLine":7,"endColumn":96},{"ruleId":"769","severity":1,"message":"816","line":8,"column":67,"nodeType":"771","messageId":"772","endLine":8,"endColumn":80},{"ruleId":"803","severity":1,"message":"814","line":291,"column":39,"nodeType":"805","messageId":"806","endLine":291,"endColumn":41},{"ruleId":"769","severity":1,"message":"817","line":317,"column":11,"nodeType":"771","messageId":"772","endLine":317,"endColumn":16},{"ruleId":"769","severity":1,"message":"818","line":318,"column":11,"nodeType":"771","messageId":"772","endLine":318,"endColumn":16},{"ruleId":"769","severity":1,"message":"819","line":8,"column":10,"nodeType":"771","messageId":"772","endLine":8,"endColumn":20},{"ruleId":"769","severity":1,"message":"810","line":9,"column":10,"nodeType":"771","messageId":"772","endLine":9,"endColumn":30},{"ruleId":"769","severity":1,"message":"820","line":6,"column":78,"nodeType":"771","messageId":"772","endLine":6,"endColumn":92},{"ruleId":"769","severity":1,"message":"821","line":9,"column":38,"nodeType":"771","messageId":"772","endLine":9,"endColumn":54},{"ruleId":"769","severity":1,"message":"822","line":39,"column":10,"nodeType":"771","messageId":"772","endLine":39,"endColumn":29},{"ruleId":"803","severity":1,"message":"814","line":986,"column":37,"nodeType":"805","messageId":"806","endLine":986,"endColumn":39},{"ruleId":"769","severity":1,"message":"819","line":8,"column":10,"nodeType":"771","messageId":"772","endLine":8,"endColumn":20},{"ruleId":"769","severity":1,"message":"823","line":10,"column":10,"nodeType":"771","messageId":"772","endLine":10,"endColumn":22},{"ruleId":"769","severity":1,"message":"824","line":8,"column":24,"nodeType":"771","messageId":"772","endLine":8,"endColumn":36},{"ruleId":"769","severity":1,"message":"812","line":9,"column":55,"nodeType":"771","messageId":"772","endLine":9,"endColumn":68},{"ruleId":"769","severity":1,"message":"825","line":9,"column":70,"nodeType":"771","messageId":"772","endLine":9,"endColumn":83},{"ruleId":"769","severity":1,"message":"826","line":361,"column":13,"nodeType":"771","messageId":"772","endLine":361,"endColumn":26},{"ruleId":"769","severity":1,"message":"827","line":8,"column":32,"nodeType":"771","messageId":"772","endLine":8,"endColumn":44},{"ruleId":"769","severity":1,"message":"828","line":8,"column":46,"nodeType":"771","messageId":"772","endLine":8,"endColumn":58},{"ruleId":"769","severity":1,"message":"820","line":8,"column":60,"nodeType":"771","messageId":"772","endLine":8,"endColumn":74},{"ruleId":"769","severity":1,"message":"812","line":11,"column":55,"nodeType":"771","messageId":"772","endLine":11,"endColumn":68},{"ruleId":"769","severity":1,"message":"829","line":5,"column":8,"nodeType":"771","messageId":"772","endLine":5,"endColumn":16},{"ruleId":"769","severity":1,"message":"820","line":7,"column":51,"nodeType":"771","messageId":"772","endLine":7,"endColumn":65},{"ruleId":"769","severity":1,"message":"830","line":9,"column":38,"nodeType":"771","messageId":"772","endLine":9,"endColumn":53},{"ruleId":"769","severity":1,"message":"812","line":10,"column":55,"nodeType":"771","messageId":"772","endLine":10,"endColumn":68},{"ruleId":"769","severity":1,"message":"831","line":25,"column":8,"nodeType":"771","messageId":"772","endLine":25,"endColumn":15},{"ruleId":"769","severity":1,"message":"832","line":26,"column":8,"nodeType":"771","messageId":"772","endLine":26,"endColumn":16},{"ruleId":"769","severity":1,"message":"796","line":1,"column":36,"nodeType":"771","messageId":"772","endLine":1,"endColumn":44},{"ruleId":"769","severity":1,"message":"781","line":7,"column":34,"nodeType":"771","messageId":"772","endLine":7,"endColumn":46},{"ruleId":"769","severity":1,"message":"819","line":24,"column":10,"nodeType":"771","messageId":"772","endLine":24,"endColumn":20},{"ruleId":"769","severity":1,"message":"781","line":7,"column":34,"nodeType":"771","messageId":"772","endLine":7,"endColumn":46},{"ruleId":"769","severity":1,"message":"812","line":8,"column":35,"nodeType":"771","messageId":"772","endLine":8,"endColumn":48},{"ruleId":"769","severity":1,"message":"833","line":16,"column":20,"nodeType":"771","messageId":"772","endLine":16,"endColumn":32},{"ruleId":"769","severity":1,"message":"781","line":7,"column":34,"nodeType":"771","messageId":"772","endLine":7,"endColumn":46},{"ruleId":"769","severity":1,"message":"834","line":11,"column":8,"nodeType":"771","messageId":"772","endLine":11,"endColumn":14},{"ruleId":"769","severity":1,"message":"833","line":14,"column":20,"nodeType":"771","messageId":"772","endLine":14,"endColumn":32},{"ruleId":"769","severity":1,"message":"835","line":15,"column":22,"nodeType":"771","messageId":"772","endLine":15,"endColumn":36},{"ruleId":"769","severity":1,"message":"836","line":3,"column":10,"nodeType":"771","messageId":"772","endLine":3,"endColumn":21},{"ruleId":"769","severity":1,"message":"837","line":3,"column":23,"nodeType":"771","messageId":"772","endLine":3,"endColumn":33},{"ruleId":"769","severity":1,"message":"821","line":3,"column":35,"nodeType":"771","messageId":"772","endLine":3,"endColumn":51},{"ruleId":"769","severity":1,"message":"810","line":7,"column":10,"nodeType":"771","messageId":"772","endLine":7,"endColumn":30},{"ruleId":"769","severity":1,"message":"819","line":8,"column":10,"nodeType":"771","messageId":"772","endLine":8,"endColumn":20},{"ruleId":"769","severity":1,"message":"838","line":5,"column":10,"nodeType":"771","messageId":"772","endLine":5,"endColumn":25},{"ruleId":"769","severity":1,"message":"839","line":3,"column":8,"nodeType":"771","messageId":"772","endLine":3,"endColumn":14},{"ruleId":"769","severity":1,"message":"820","line":8,"column":51,"nodeType":"771","messageId":"772","endLine":8,"endColumn":65},{"ruleId":"769","severity":1,"message":"815","line":8,"column":67,"nodeType":"771","messageId":"772","endLine":8,"endColumn":76},{"ruleId":"769","severity":1,"message":"840","line":8,"column":87,"nodeType":"771","messageId":"772","endLine":8,"endColumn":105},{"ruleId":"769","severity":1,"message":"838","line":5,"column":10,"nodeType":"771","messageId":"772","endLine":5,"endColumn":25},{"ruleId":"769","severity":1,"message":"841","line":29,"column":5,"nodeType":"771","messageId":"772","endLine":29,"endColumn":13},{"ruleId":"769","severity":1,"message":"811","line":4,"column":10,"nodeType":"771","messageId":"772","endLine":4,"endColumn":27},{"ruleId":"769","severity":1,"message":"842","line":18,"column":9,"nodeType":"771","messageId":"772","endLine":18,"endColumn":16},{"ruleId":"769","severity":1,"message":"811","line":7,"column":48,"nodeType":"771","messageId":"772","endLine":7,"endColumn":65},{"ruleId":"769","severity":1,"message":"812","line":8,"column":41,"nodeType":"771","messageId":"772","endLine":8,"endColumn":54},{"ruleId":"769","severity":1,"message":"813","line":13,"column":22,"nodeType":"771","messageId":"772","endLine":13,"endColumn":36},{"ruleId":"803","severity":1,"message":"814","line":79,"column":34,"nodeType":"805","messageId":"806","endLine":79,"endColumn":36},{"ruleId":"769","severity":1,"message":"820","line":6,"column":62,"nodeType":"771","messageId":"772","endLine":6,"endColumn":76},{"ruleId":"769","severity":1,"message":"812","line":9,"column":10,"nodeType":"771","messageId":"772","endLine":9,"endColumn":23},{"ruleId":"769","severity":1,"message":"834","line":13,"column":8,"nodeType":"771","messageId":"772","endLine":13,"endColumn":14},{"ruleId":"769","severity":1,"message":"843","line":33,"column":22,"nodeType":"771","messageId":"772","endLine":33,"endColumn":40},{"ruleId":"769","severity":1,"message":"844","line":33,"column":49,"nodeType":"771","messageId":"772","endLine":33,"endColumn":61},{"ruleId":"803","severity":1,"message":"814","line":1246,"column":34,"nodeType":"805","messageId":"806","endLine":1246,"endColumn":36},{"ruleId":"769","severity":1,"message":"820","line":6,"column":78,"nodeType":"771","messageId":"772","endLine":6,"endColumn":92},{"ruleId":"769","severity":1,"message":"821","line":9,"column":38,"nodeType":"771","messageId":"772","endLine":9,"endColumn":54},{"ruleId":"769","severity":1,"message":"834","line":13,"column":8,"nodeType":"771","messageId":"772","endLine":13,"endColumn":14},{"ruleId":"769","severity":1,"message":"822","line":38,"column":10,"nodeType":"771","messageId":"772","endLine":38,"endColumn":29},{"ruleId":"803","severity":1,"message":"814","line":954,"column":35,"nodeType":"805","messageId":"806","endLine":954,"endColumn":37},{"ruleId":"769","severity":1,"message":"820","line":6,"column":78,"nodeType":"771","messageId":"772","endLine":6,"endColumn":92},{"ruleId":"769","severity":1,"message":"821","line":9,"column":38,"nodeType":"771","messageId":"772","endLine":9,"endColumn":54},{"ruleId":"769","severity":1,"message":"834","line":13,"column":8,"nodeType":"771","messageId":"772","endLine":13,"endColumn":14},{"ruleId":"769","severity":1,"message":"822","line":38,"column":10,"nodeType":"771","messageId":"772","endLine":38,"endColumn":29},{"ruleId":"803","severity":1,"message":"814","line":954,"column":35,"nodeType":"805","messageId":"806","endLine":954,"endColumn":37},{"ruleId":"769","severity":1,"message":"833","line":15,"column":20,"nodeType":"771","messageId":"772","endLine":15,"endColumn":32},{"ruleId":"769","severity":1,"message":"835","line":16,"column":22,"nodeType":"771","messageId":"772","endLine":16,"endColumn":36},{"ruleId":"769","severity":1,"message":"820","line":6,"column":78,"nodeType":"771","messageId":"772","endLine":6,"endColumn":92},{"ruleId":"769","severity":1,"message":"821","line":9,"column":38,"nodeType":"771","messageId":"772","endLine":9,"endColumn":54},{"ruleId":"769","severity":1,"message":"834","line":13,"column":8,"nodeType":"771","messageId":"772","endLine":13,"endColumn":14},{"ruleId":"769","severity":1,"message":"822","line":39,"column":10,"nodeType":"771","messageId":"772","endLine":39,"endColumn":29},{"ruleId":"803","severity":1,"message":"814","line":985,"column":37,"nodeType":"805","messageId":"806","endLine":985,"endColumn":39},"no-native-reassign",["845"],"no-negated-in-lhs",["846"],"no-unused-vars","'getDynamicSql_Mysql_async' is defined but never used.","Identifier","unusedVar","'getSessionCookie' is defined but never used.","'winClose' is assigned a value but never used.","'session' is assigned a value but never used.","'React' is defined but never used.","'gfg_setValue' is defined but never used.","'store' is defined but never used.","'dateList' is assigned a value but never used.","'valueList' is assigned a value but never used.","'gfs_dispatch' is defined but never used.","'gfp_openPopup' is defined but never used.",["845"],["846"],"'Link' is defined but never used.","'setSessionCookie' is defined but never used.","'isSession' is assigned a value but never used.","'defaultOpen' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'areaTp' and 'user_id'. Either include them or remove the dependency array.","ArrayExpression",["847"],"'useMemo' is defined but never used.","'onResizeClick' is assigned a value but never used.","'getMenu' is assigned a value but never used.","'useState' is defined but never used.","'user_nam' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["848","849"],"array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["845"],["846"],"'limitLine' is assigned a value but never used.","'getDynamicSql_Oracle' is defined but never used.","'gfs_getStoreValue' is defined but never used.","'gfg_appendRow' is defined but never used.","'columnCombobox' is defined but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","'gfc_sleep' is defined but never used.","'gfs_subscribe' is defined but never used.","'fr_dt' is assigned a value but never used.","'to_dt' is assigned a value but never used.","'YK_WEB_REQ' is defined but never used.","'gfc_chit_yn_YK' is defined but never used.","'gfg_setSelectRow' is defined but never used.","'getDynamicSql_Mysql' is defined but never used.","'getSp_Oracle' is defined but never used.","'gfo_getInput' is defined but never used.","'gfg_getColumn' is defined but never used.","'detail_grade2' is assigned a value but never used.","'gfc_showMask' is defined but never used.","'gfc_hideMask' is defined but never used.","'Checkbox' is defined but never used.","'gfo_getCheckbox' is defined but never used.","'TabList' is defined but never used.","'RecImage' is defined but never used.","'columnNumber' is defined but never used.","'Layout' is defined but never used.","'columnCheckbox' is defined but never used.","'gfg_getGrid' is defined but never used.","'gfg_getRow' is defined but never used.","'gfo_getTextarea' is defined but never used.","'lodash' is defined but never used.","'gfc_oracleRetrieve' is defined but never used.","'memoText' is assigned a value but never used.","'btnList' is assigned a value but never used.","'YK_WEB_REQ_DIRECT2' is defined but never used.","'RecodingList' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"850","fix":"851"},{"messageId":"852","fix":"853","desc":"854"},{"messageId":"855","fix":"856","desc":"857"},"Update the dependencies array to be: [areaTp, user_id]",{"range":"858","text":"859"},"removeEscape",{"range":"860","text":"861"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"862","text":"863"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[8190,8192],"[areaTp, user_id]",[4714,4715],"",[4714,4714],"\\"]